Repair : time_19
Current failed test : org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london | 2019.09.05 AD at 00:37:57 CDT
Location : org.joda.time.DateTime.DateTime:[331, 333]#0.25
Compute Candidate : 2019.09.05 AD at 00:40:09 CDT - 2019.09.05 AD at 00:46:43 CDT , PNumber : 11243, CandNumber : 29 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+year++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+monthOfYear++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+dayOfMonth++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+hourOfDay++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+minuteOfHour++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+year--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+monthOfYear--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+dayOfMonth--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+hourOfDay--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+minuteOfHour--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+year=year;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+monthOfYear=year;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+dayOfMonth=year;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+hourOfDay=year;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+minuteOfHour=year;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+monthOfYear=monthOfYear;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+dayOfMonth=dayOfMonth;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+hourOfDay=hourOfDay;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+minuteOfHour=minuteOfHour;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+zone=zone;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:50:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+assert (zone!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:51:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/DateTime.java[310,333]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,DateTimeZone zone){
 super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,zone);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:51:22 CDT
--------------- END -----------------
Location : org.joda.time.tz.CachedDateTimeZone.getOffset:[210, 206, 204, 205, 208]#0.0944911182523068
Compute Candidate : 2019.09.05 AD at 00:51:41 CDT - 2019.09.05 AD at 00:59:52 CDT , PNumber : 11418, CandNumber : 146 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+return 0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 00:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==0){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4207/pattern-ver1-serial/app.src.main.java.pl.pnoga.weatheralert.app.dao.OptionsDAO.java-saveRefreshInterval.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null&&millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return 1;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset<=Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(millis==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return Integer.MIN_VALUE;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset>=Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset!=Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset>Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null||millis>iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/5868/pattern-ver1-serial/src.com.pandoroid.pandora.PandoraRadio.java-isGetPlaylistCallValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null!=millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null||millis<iNextInfo.iOffset){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3218/pattern-ver1-serial/VirtualApp.lib.src.main.java.com.lody.virtual.service.am.VActivityManagerService.java-startServiceCommon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return this.iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return getOffset(0);
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=this.iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+millis++;
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+iOffset++;
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset++;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+iOffset++;
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+millis++;
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+millis++;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset--;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+iOffset--;
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+iOffset--;
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+millis--;
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+millis--;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+millis--;
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+getOffset(millis);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return (int)(iOffset);
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+while(true){
+
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+synchronized(this){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+synchronized(this){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return this.iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return getOffset(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+if(iZoneRef.getOffset(iPeriodStart)!=0){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:04:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset+millis==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return iNextInfo.getOffset(millis)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
-return iOffset;
+return iOffset&0xff;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(true){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return (int)iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+int a=0;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+int a=0;
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+int a=0;
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return -iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+String OUTSTRING="";
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+String OUTSTRING="";
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+String OUTSTRING="";
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=1;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+int iOffset=5;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+int iZoneRef=5;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+int iPeriodStart=5;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return iOffset;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(Double.isNaN(iOffset)){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+int MIN_VALUE=8;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+int iOffset=8;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+int iPeriodStart=8;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+int iOffset=8;
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(equals(millis)){
+return 0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(equals(millis)){
+return 0;
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+int indexSelection=0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return (int)(iNextInfo.getOffset(millis));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return iNextInfo.getOffset(millis/2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3673/pattern-ver1-serial/src.com.tomclaw.mandarin.mmp.MmpSession.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=iZoneRef.getOffset(iPeriodStart/2);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3673/pattern-ver1-serial/src.com.tomclaw.mandarin.mmp.MmpSession.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if("Chrome".equals(iNextInfo)||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+int a=1;
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+int a=1;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+int a=1;
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+boolean iOffset=true;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+boolean iZoneRef=true;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+boolean iPeriodStart=true;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+boolean b=true;
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+boolean b=true;
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+boolean b=true;
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=iZoneRef.getOffset(iPeriodStart)+1;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE-1){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null||millis<iNextInfo.iPeriodStart-1){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(iNextInfo==null){
+return 0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+if(iZoneRef==null){
+return 0;
+}
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iZoneRef==null){
+return 0;
+}
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(iZoneRef==null){
+return 0;
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if("index".equals(millis)){
+return 0;
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(millis<0){
+return 0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(millis<0){
+return 0;
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||iOffset==Long.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
-}
-return iOffset;
 }
 return iNextInfo.getOffset(millis);
+}
+return iOffset;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+if(iOffset==0){
+return 0;
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
+if(iOffset==0){
+return 0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(iOffset==0){
+return 0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
+iOffset=2;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6026/pattern-ver1-serial/advanced.mathfx.src.main.java.org.arakhne.afc.math.geometry.d2.dfx.Path2dfx.java-toDoubleArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
+if((Thread.currentThread().interrupted())){
+return 0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if((Thread.currentThread().interrupted())){
+return 0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+if((Thread.currentThread().interrupted())){
+return 0;
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||"查看红包".equals(iOffset)){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||iOffset==3){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+synchronized(this){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset<0||iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||iOffset==0){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||iOffset>9){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return iNextInfo==null?null:iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE&&iOffset<4000000){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE&&iOffset!=9999){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(Integer.MIN_VALUE>0&&iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+assert (millis>=0):"Receive a negative tratment";
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
-return iNextInfo.getOffset(millis);
+return iNextInfo!=null?iNextInfo.getOffset(millis):null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+if(iNextInfo==null){
+return 0;
+}else {
 return iNextInfo.getOffset(millis);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2390/pattern-ver1-serial/AlphaTeam.src.BufferContext.java-undo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public int getOffset(long millis){
+assert (millis!=0):"Receive a size tratment";
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iOffset==Integer.MIN_VALUE||iOffset=='"'){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(iNextInfo==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(iZoneRef==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iZoneRef==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(millis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(millis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+iOffset=iZoneRef.getOffset(iPeriodStart);
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+iOffset=iZoneRef.getOffset(iPeriodStart);
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+iOffset=iZoneRef.getOffset(iPeriodStart);
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+iOffset=iZoneRef.getOffset(iPeriodStart);
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+iOffset=iZoneRef.getOffset(iPeriodStart);
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
+iOffset=iZoneRef.getOffset(iPeriodStart);
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+iOffset=iZoneRef.getOffset(iPeriodStart);
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+if(iOffset==Integer.MIN_VALUE){
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+iOffset=iZoneRef.getOffset(iPeriodStart);
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+if(iOffset<0){
+iOffset=0;
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
+}
+if(iOffset<0){
+iOffset=0;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
+if(iOffset<0){
+iOffset=0;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null||millis<iNextInfo.iPeriodStart||"查看红包".equals(iNextInfo==null)){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null||millis<iNextInfo.iPeriodStart||millis=='%'){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(true){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+if(iNextInfo==null){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+iOffset=iZoneRef.getOffset(iPeriodStart);
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+iOffset=iZoneRef.getOffset(iPeriodStart);
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+synchronized(this){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
+if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
+}else {
+iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
+return iOffset;
+}
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
-}
-return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
-}
-return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+if(millis==3){
+System.out.println("debug");
+}
 iOffset=iZoneRef.getOffset(iPeriodStart);
+if(millis==3){
+System.out.println("debug");
+}
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
+if(iNextInfo==null){
+if(iOffset==Integer.MIN_VALUE&&millis<iNextInfo.iPeriodStart){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
+if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
 iOffset=iZoneRef.getOffset(iPeriodStart);
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
+}
+return iOffset;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4540/pattern-ver1-serial/core-cube.src.main.java.org.apache.kylin.gridtable.GTScanRangePlanner.java-compare.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
 if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
 if(iOffset==Integer.MIN_VALUE){
+long startTime=System.currentTimeMillis();
 iOffset=iZoneRef.getOffset(iPeriodStart);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return iOffset;
 }
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/CachedDateTimeZone.java[203,211]
------------Candidate---------------
 public int getOffset(long millis){
-if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
-if(iOffset==Integer.MIN_VALUE){
-iOffset=iZoneRef.getOffset(iPeriodStart);
-}
-return iOffset;
-}
 return iNextInfo.getOffset(millis);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 01:14:28 CDT
--------------- END -----------------
Location : org.joda.time.format.DateTimeFormatterBuilder.printTo:[2116, 2117, 2112, 2115]#0.0890870806374748
Compute Candidate : 2019.09.05 AD at 01:14:47 CDT - 2019.09.05 AD at 02:29:30 CDT , PNumber : 11364, CandNumber : 544 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+return ;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7084/pattern-ver1-serial/src.main.java.com.pratilipi.api.impl.pratilipi.PratilipiContentImageApi.java-postPratilipiContent.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+return ;
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7084/pattern-ver1-serial/src.main.java.com.pratilipi.api.impl.pratilipi.PratilipiContentImageApi.java-postPratilipiContent.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7084/pattern-ver1-serial/src.main.java.com.pratilipi.api.impl.pratilipi.PratilipiContentImageApi.java-postPratilipiContent.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7084/pattern-ver1-serial/src.main.java.com.pratilipi.api.impl.pratilipi.PratilipiContentImageApi.java-postPratilipiContent.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7084/pattern-ver1-serial/src.main.java.com.pratilipi.api.impl.pratilipi.PratilipiContentImageApi.java-postPratilipiContent.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(displayZone!=null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
+displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
-if(displayOffset>=0){
+if(displayOffset>0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset<=0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(buf==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(chrono==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(locale==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(instant==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&iZeroOffsetPrintText!=""){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset>=0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset!=0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset>0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==4&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==5&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&buf!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&chrono!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&locale!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&displayZone!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+FormatUtils.appendPaddedInteger(buf,hours,2);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+FormatUtils.appendPaddedInteger(buf,hours,2);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+FormatUtils.appendPaddedInteger(buf,hours,2);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+FormatUtils.appendPaddedInteger(buf,minutes,2);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+buf.append(iZeroOffsetPrintText);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+buf.append('+');
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+buf.append(':');
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+buf.append('.');
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+buf.append('-');
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append(iZeroOffsetPrintText.trim());
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.Iterator;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==-1&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+hours++;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+minutes++;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+seconds++;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+instant++;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+instant++;
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+instant++;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+hours--;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+minutes--;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+seconds--;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+instant--;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+instant--;
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+instant--;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+displayOffset++;
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3681/pattern-ver1-serial/src.main.java.halo.query.Query.java-buildArgs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+synchronized(this){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+synchronized(buf){
 buf.append(iZeroOffsetPrintText);
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append((iZeroOffsetPrintText).toLowerCase());
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+synchronized(this){
 buf.append(iZeroOffsetPrintText);
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+synchronized(this){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+synchronized(this){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+synchronized(this){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(equals(buf)){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(equals(buf)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(equals(displayZone)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(equals(displayOffset)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+return ;
+}
+if(equals(displayOffset)){
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(equals(buf)){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+}
+if(equals(buf)){
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+}
+if(equals(buf)){
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(iZeroOffsetPrintText.isEmpty()){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(iZeroOffsetPrintText.isEmpty()){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset<0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+synchronized(this){
 if(displayZone==null){
 return ;
+}
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+synchronized(this){
 if(iShowSeparators){
 buf.append(':');
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+synchronized(this){
 if(iShowSeparators){
 buf.append(':');
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
+synchronized(this){
 if(iShowSeparators){
 buf.append('.');
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+synchronized(this){
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
+}
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+synchronized(this){
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+synchronized(this){
 if(iMaxFields==1){
 return ;
+}
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+synchronized(this){
 if(iMaxFields==2){
 return ;
+}
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+synchronized(this){
 if(iMaxFields==3){
 return ;
+}
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+synchronized(this){
 if(displayOffset==0&&iMinFields<=1){
 return ;
+}
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(buf==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+if(buf==null){
+return ;
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(buf==null){
+return ;
+}
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+if(buf==null){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if(buf==null){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if(buf==null){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if(buf==null){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone==null){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf==null){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(buf==null){
+return ;
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(buf==null){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(buf==null){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(buf==null){
+return ;
+}
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(buf==null){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf==null){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf!=null){
 buf.append(iZeroOffsetPrintText);
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+return ;
+}
+if(buf==null){
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
+return ;
+}
+if(buf==null){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(hours==displayOffset/DateTimeConstants.MILLIS_PER_HOUR){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds==displayOffset/DateTimeConstants.MILLIS_PER_SECOND){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes==displayOffset/DateTimeConstants.MILLIS_PER_MINUTE){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(hours==displayOffset/DateTimeConstants.MILLIS_PER_HOUR){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(minutes==displayOffset/DateTimeConstants.MILLIS_PER_MINUTE){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+}
+if(buf==null){
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+}
+if(buf==null){
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+}
+if(buf==null){
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(displayZone.equals(null)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+synchronized(this){
 return ;
+}
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+synchronized(this){
 buf.append(iZeroOffsetPrintText);
 return ;
+}
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+if(seconds*DateTimeConstants.MILLIS_PER_SECOND!=0){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if("index".equals(buf)){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if("index".equals(buf)){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if("index".equals(buf)){
+return ;
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if("index".equals(buf)){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if("index".equals(buf)){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if("index".equals(buf)){
+return ;
+}
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if("index".equals(buf)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if("index".equals(displayOffset)){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if("index".equals(displayZone)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if("index".equals(displayOffset)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf.equals("TIME")){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf.equals("TIME")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(buf.equals("TIME")){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(buf.equals("TIME")){
+return ;
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(buf.equals("TIME")){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(buf.equals("TIME")){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(buf.equals("TIME")){
+return ;
+}
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone.equals("TIME")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if("&null".equals(buf)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+if("&null".equals(buf)){
+return ;
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if("&null".equals(buf)){
+return ;
+}
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+if("&null".equals(buf)){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if("&null".equals(buf)){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if("&null".equals(buf)){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if("&null".equals(buf)){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if("&null".equals(displayZone)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if("&null".equals(displayOffset)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if("&null".equals(displayOffset)){
+return ;
+}
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+if(buf.equals("DATETIME")){
+return ;
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(buf.equals("DATETIME")){
+return ;
+}
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+if(buf.equals("DATETIME")){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if(buf.equals("DATETIME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if(buf.equals("DATETIME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if(buf.equals("DATETIME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(buf.equals("DATETIME")){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(displayZone.equals("DATETIME")){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+buf.append("]");
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append("]");
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append("]");
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append("]");
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append("]");
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append("]");
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf=buf;
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+displayOffset=displayOffset;
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset+displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset+instant==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
-if(displayOffset==0&&iMinFields<=1){
+if(displayOffset+instant==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+hours=1000;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(true){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*instant;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND*instant;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE*displayOffset;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+return ;
+}
+if(displayOffset<0){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+int a=0;
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+int a=0;
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+int a=0;
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone.equals(buf)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf.equals(displayZone)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf.equals(displayOffset)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone.equals(displayOffset)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf.equals(hours)){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+String OUTSTRING="";
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+String OUTSTRING="";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+String OUTSTRING="";
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+int iZeroOffsetPrintText=5;
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
-if(displayOffset>=0){
+if(Math.abs(displayOffset)>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(locale.equals(InputStream.class)){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(chrono.equals(InputStream.class)){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<=0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<=0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<=0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+}
+if(displayOffset==0){
+return ;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset==0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset==0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset==0){
+return ;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+int indexSelection=0;
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+if(displayZone.equals("setPackMode")){
+return ;
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(displayZone.equals("setPackMode")){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayZone.equals("setPackMode")){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(displayZone.equals("setPackMode")){
+return ;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append(" & ");
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append(" & ");
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+buf.append(" & ");
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append(" & ");
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append(" & ");
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append(" & ");
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+buf.append("    }\n");
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+buf.append("    }\n");
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append("    }\n");
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append("    }\n");
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append("    }\n");
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append("    }\n");
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
+displayOffset=displayOffset+-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+displayOffset-=displayOffset+minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+displayOffset-=displayOffset+seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+int a=1;
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+int a=1;
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+int a=1;
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:49:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append(displayOffset);
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append(displayOffset);
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append(displayZone);
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+String iZeroOffsetPrintText="%#.&f";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+String iZeroOffsetPrintText="%#.&f";
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
+boolean iZeroOffsetPrintText=true;
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
+boolean MILLIS_PER_MINUTE=true;
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
+boolean MILLIS_PER_SECOND=true;
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
+boolean MILLIS_PER_HOUR=true;
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+boolean b=true;
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+boolean b=true;
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+boolean b=true;
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append(iZeroOffsetPrintText);
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append(iZeroOffsetPrintText);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append(iZeroOffsetPrintText);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append(iZeroOffsetPrintText);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:51:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+if(displayOffset==0&&iZeroOffsetPrintText!=null){
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append('-');
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append('+');
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append(':');
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append(':');
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append('.');
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append(iZeroOffsetPrintText);
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append('+');
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append(':');
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append(':');
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append('.');
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+buf.append('-');
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append('+');
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append('-');
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append(':');
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append('.');
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append('+');
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append('-');
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append(':');
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(!iZeroOffsetPrintText.equals("")){
 buf.append(iZeroOffsetPrintText);
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+buf.append(iZeroOffsetPrintText);
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append(iZeroOffsetPrintText);
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
+if(iMaxFields==12){
+return ;
+}else {
 if(iMaxFields==1){
 return ;
+}
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+if(iMaxFields==12){
+return ;
+}else {
 if(iMaxFields==2){
 return ;
+}
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(iMaxFields==12){
+return ;
+}else {
 if(iMaxFields==3){
 return ;
+}
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append(iZeroOffsetPrintText);
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append('-');
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
-if(displayOffset>=0){
 buf.append('+');
+if(displayOffset>=0){
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append(':');
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append(':');
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+buf.append('.');
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+buf.append('+');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+buf.append('-');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+buf.append(':');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append(iZeroOffsetPrintText);
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append('-');
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append('+');
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append(':');
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append(':');
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append('.');
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:56:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+buf.append(iZeroOffsetPrintText);
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+try{
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}finally{
+buf.append(iZeroOffsetPrintText);
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+try{
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}finally{
+buf.append(iZeroOffsetPrintText);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+try{
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}finally{
+buf.append(iZeroOffsetPrintText);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
+try{
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
+}finally{
+buf.append(iZeroOffsetPrintText);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+try{
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
+}finally{
+buf.append(iZeroOffsetPrintText);
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+try{
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}finally{
+buf.append('+');
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+try{
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}finally{
+buf.append('+');
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (buf!=null);
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+assert (buf!=null);
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+assert (buf!=null);
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+assert (buf!=null);
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+assert (buf!=null);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+assert (buf!=null);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+assert (buf!=null);
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (displayZone!=null);
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append('.');
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append('+');
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append('-');
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append(':');
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 02:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
+buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf!=null){
+buf.append(iZeroOffsetPrintText);
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf!=null){
+if(displayZone==null){
+return ;
+}
+if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append(iZeroOffsetPrintText);
+return ;
+}
+if(displayOffset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+displayOffset=-displayOffset;
+}
+int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+FormatUtils.appendPaddedInteger(buf,hours,2);
+if(iMaxFields==1){
+return ;
+}
+displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset==0&&iMinFields<=1){
+return ;
+}
+int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(iShowSeparators){
+buf.append(':');
+}
+FormatUtils.appendPaddedInteger(buf,minutes,2);
+if(iMaxFields==2){
+return ;
+}
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset==0&&iMinFields<=2){
+return ;
+}
+int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(iShowSeparators){
+buf.append(':');
+}
+FormatUtils.appendPaddedInteger(buf,seconds,2);
+if(iMaxFields==3){
+return ;
+}
+displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset==0&&iMinFields<=3){
+return ;
+}
+if(iShowSeparators){
+buf.append('.');
+}
+FormatUtils.appendPaddedInteger(buf,displayOffset,3);
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(buf!=null){
+buf.append('+');
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(buf!=null){
+buf.append(':');
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(buf!=null){
+buf.append(':');
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset-=instant;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset-=displayOffset;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+assert (hours!=displayOffset/DateTimeConstants.MILLIS_PER_HOUR);
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+assert (minutes!=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE);
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+assert (seconds!=displayOffset/DateTimeConstants.MILLIS_PER_SECOND);
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(buf.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset-=displayOffset+hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+displayOffset++;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
+displayOffset=-1;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
+displayOffset=-1;
 }
+displayOffset++;
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append('+');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+assert (buf!=null);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+assert (buf!=null);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+assert (buf!=null);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+assert (buf!=null);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+assert (buf!=null);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+assert (buf!=null);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+assert (buf!=null);
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+assert (displayZone!=null);
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+buf.append(iZeroOffsetPrintText);
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+buf.append(iZeroOffsetPrintText);
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+buf.append(iZeroOffsetPrintText);
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(displayZone==null||"查看红包".equals(displayZone)){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset=-displayOffset;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+displayOffset=-displayOffset;
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+displayOffset=-displayOffset;
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+displayOffset=-displayOffset;
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
+displayOffset=-displayOffset;
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+displayOffset=-displayOffset;
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+displayOffset=-displayOffset;
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+displayOffset=-displayOffset;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+displayOffset=-displayOffset;
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+displayOffset=-displayOffset;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+displayOffset=-displayOffset;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+displayOffset=-displayOffset;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+displayOffset=-displayOffset;
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
+displayOffset=(-displayOffset+displayOffset)%displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+displayOffset=-displayOffset;
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&displayOffset>=0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+displayOffset=-displayOffset;
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if((displayOffset==0||displayOffset=='\'')&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset=-displayOffset;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+return ;
+}
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if(buf.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+return ;
+}
+if(displayZone.getClass().getSimpleName().startsWith("SystemException")){
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append('+'+" -u "+buf);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+buf);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
+buf.append(':'+" -u "+buf);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append('+'+" -u "+chrono);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+chrono);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
+buf.append(':'+" -u "+chrono);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append('+'+" -u "+instant);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+instant);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append('+'+" -u "+locale);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append('-'+" -u "+locale);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(displayZone==null||displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+assert (displayOffset>=0):"Receive a negative tratment";
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (displayOffset>=0):"Receive a negative tratment";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+displayOffset++;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+displayOffset-=-1;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+displayOffset++;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+displayOffset-=-1;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 3, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+assert (buf!=null):"Appointments day is not allowed to be null!";
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (buf!=null):"Appointments day is not allowed to be null!";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (displayZone!=null):"Appointments day is not allowed to be null!";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+assert (displayOffset!=0):"Receive a size tratment";
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+assert (displayOffset!=0):"Receive a size tratment";
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
+}
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
+}
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(buf==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
+}
+if(displayOffset>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
+FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
-FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
-FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
+}
+if(iZeroOffsetPrintText==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
-FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+}
+if(displayOffset<0){
+displayOffset=0;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+buf.append(" (");
 displayOffset=-displayOffset;
+buf.append(") ");
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+buf.append(" (");
+buf.append(") ");
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+buf.append(" (");
+buf.append(") ");
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+buf.append(" (");
+buf.append(") ");
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+buf.append(" (");
+buf.append(") ");
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
+buf.append(" (");
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+buf.append(") ");
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<=0){
+hours=1;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+}
+if(minutes<=0){
+minutes=1;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+}
+if(seconds<=0){
+seconds=1;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+}
+if(displayOffset<=0){
+displayOffset=1;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
+}
+if(hours<=0){
+hours=1;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
+}
+if(minutes<=0){
+minutes=1;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
+}
+if(seconds<=0){
+seconds=1;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
-return ;
+buf.append(':');
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
-return ;
+buf.append(':');
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
-return ;
+buf.append('.');
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
+buf.append(iZeroOffsetPrintText);
+return ;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+if(buf!=null){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf==null){
+return ;
+}
+if(displayZone==null){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone==null){
+return ;
+}
+if(buf==null){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+return ;
+}
+if(buf.equals("NAME")){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 buf.append('-');
 displayOffset=-displayOffset;
+if(buf.equals("NAME")){
+return ;
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 buf.append('+');
+if(buf.equals("NAME")){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 buf.append(':');
+if(buf.equals("NAME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 buf.append(':');
+if(buf.equals("NAME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(buf.equals("CALL_RECEIVED_AT")){
+return ;
+}
 buf.append('.');
+if(buf.equals("NAME")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+if(displayZone.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
+return ;
+}
+if(displayZone.equals("NAME")){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+displayOffset++;
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset-=-1;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 4, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+displayOffset-=-1;
+displayOffset++;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 4, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
+if(displayZone==null&&!displayZone.equals("")){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append('+');
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append(iZeroOffsetPrintText);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append(':');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append(':');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append('.');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
+buf.append('-');
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
-buf.append('-');
+buf.append(iZeroOffsetPrintText);
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
-buf.append('+');
+buf.append(iZeroOffsetPrintText);
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
-buf.append(':');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
-buf.append('.');
+buf.append(iZeroOffsetPrintText);
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if(buf.equals("INFO")){
+return ;
+}
+if(buf.equals("UNIT")){
+return ;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(displayZone.equals("INFO")){
+return ;
+}
+if(displayZone.equals("UNIT")){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&iZeroOffsetPrintText!=null||"查看红包".equals(displayOffset==0)){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
+}else {
+buf.append("");
+}
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset<0L||(displayOffset==0&&iZeroOffsetPrintText!=null)){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+if(displayOffset!=-displayOffset){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(true){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset!=-displayOffset){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+if(displayOffset!=-displayOffset){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+if(displayOffset!=-displayOffset){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
+if(displayOffset!=-displayOffset){
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0&&iZeroOffsetPrintText!=null||iZeroOffsetPrintText.isEmpty()){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5572/pattern-ver1-serial/src.main.java.org.tndata.android.compass.util.FeedDataLoader.java-loadNextCustomAction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
+if(displayOffset==0){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5898/pattern-ver1-serial/eSecureBox.src.main.java.com.volcano.esecurebox.widget.FieldCell.java-setListAction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+if(displayOffset!=minutes*DateTimeConstants.MILLIS_PER_MINUTE){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
+displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<0){
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<0){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
+displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
+displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<0){
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<0){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
+displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+boolean succeeded=false;
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+succeeded=true;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(!succeeded){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+boolean succeeded=false;
 if(displayOffset>=0){
 buf.append('+');
+succeeded=true;
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(!succeeded){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+boolean succeeded=false;
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(!succeeded){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+succeeded=true;
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+boolean succeeded=false;
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(!succeeded){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+succeeded=true;
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+boolean succeeded=false;
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(!succeeded){
+return ;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+succeeded=true;
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
+if(displayOffset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
+}
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+if(displayOffset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+if(displayOffset!=hours*(int)DateTimeConstants.MILLIS_PER_HOUR){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
+if(displayOffset==3){
+System.out.println("debug");
+}
 buf.append('-');
 displayOffset=-displayOffset;
+if(displayOffset==3){
+System.out.println("debug");
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
+if(displayOffset==3){
+System.out.println("debug");
+}
 buf.append('+');
+if(displayOffset==3){
+System.out.println("debug");
+}
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
+if(displayOffset==3){
+System.out.println("debug");
+}
 buf.append(':');
+if(displayOffset==3){
+System.out.println("debug");
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
+if(displayOffset==3){
+System.out.println("debug");
+}
 buf.append(':');
+if(displayOffset==3){
+System.out.println("debug");
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
+if(displayOffset==3){
+System.out.println("debug");
+}
 buf.append('.');
+if(displayOffset==3){
+System.out.println("debug");
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes--;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds--;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes--;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds--;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<0){
+displayOffset--;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<0){
+displayOffset--;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours--;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
+displayOffset--;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
-return ;
-}
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
+if(displayOffset==0&&iZeroOffsetPrintText!=null){
+buf.append(iZeroOffsetPrintText);
+return ;
+}
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<3){
+hours=3;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<3){
+displayOffset=3;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<3){
+displayOffset=3;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<3){
+minutes=3;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<3){
+displayOffset=3;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<3){
+seconds=3;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<3){
+hours=3;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
+if(displayOffset<3){
+displayOffset=3;
+}
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<3){
+hours=3;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
+if(displayOffset<3){
+displayOffset=3;
+}
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,hours,2);
+}
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,minutes,2);
+}
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,seconds,2);
+}
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
+if(iZeroOffsetPrintText!=null){
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 3, INS : 0, DEL : 9
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=0;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=0;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
+if(hours<0){
+hours=0;
+}
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
+if(minutes<0){
+minutes=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
+if(displayOffset<0){
+displayOffset=0;
+}
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
+if(seconds<0){
+seconds=0;
+}
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
+if(displayOffset==12){
+return ;
+}else {
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
+}
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
-FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
-FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
-FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import javafx.util.Pair;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
-displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6107/pattern-ver1-serial/src.main.java.de.unima.dws.semanta.crossword.model.Crossword.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import javafx.util.Pair;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
-displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6107/pattern-ver1-serial/src.main.java.de.unima.dws.semanta.crossword.model.Crossword.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
+long startTime=System.currentTimeMillis();
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
+import javafx.util.Pair;
+
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
-displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6107/pattern-ver1-serial/src.main.java.de.unima.dws.semanta.crossword.model.Crossword.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
-}
-if(displayOffset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
+if(displayOffset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+displayOffset=-displayOffset;
+}
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
-}
-if(displayOffset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
+if(displayOffset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+displayOffset=-displayOffset;
+}
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
-}
-if(displayOffset>=0){
-buf.append('+');
-}else {
-buf.append('-');
-displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
+if(displayOffset>=0){
+buf.append('+');
+}else {
+buf.append('-');
+displayOffset=-displayOffset;
+}
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
 if(displayZone==null){
 return ;
 }
 if(displayOffset==0&&iZeroOffsetPrintText!=null){
 buf.append(iZeroOffsetPrintText);
 return ;
 }
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
-FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/3556/pattern-ver1-serial/src.net.tootallnate.websocket.WebSocketClient.java-close.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 11, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
-return ;
-}
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
-return ;
-}
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
-if(iShowSeparators){
-buf.append(':');
-}
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java[2109,2166]
------------Candidate---------------
 public void printTo(StringBuffer buf,long instant,Chronology chrono,int displayOffset,DateTimeZone displayZone,Locale locale){
-if(displayZone==null){
-return ;
-}
-if(displayOffset==0&&iZeroOffsetPrintText!=null){
-buf.append(iZeroOffsetPrintText);
-return ;
-}
 if(displayOffset>=0){
 buf.append('+');
 }else {
 buf.append('-');
 displayOffset=-displayOffset;
 }
 int hours=displayOffset/DateTimeConstants.MILLIS_PER_HOUR;
 FormatUtils.appendPaddedInteger(buf,hours,2);
 if(iMaxFields==1){
 return ;
 }
 displayOffset-=hours*(int)DateTimeConstants.MILLIS_PER_HOUR;
 if(displayOffset==0&&iMinFields<=1){
 return ;
 }
 int minutes=displayOffset/DateTimeConstants.MILLIS_PER_MINUTE;
 if(iShowSeparators){
 buf.append(':');
 }
 FormatUtils.appendPaddedInteger(buf,minutes,2);
 if(iMaxFields==2){
 return ;
 }
 displayOffset-=minutes*DateTimeConstants.MILLIS_PER_MINUTE;
 if(displayOffset==0&&iMinFields<=2){
 return ;
 }
 int seconds=displayOffset/DateTimeConstants.MILLIS_PER_SECOND;
-if(iShowSeparators){
-buf.append(':');
-}
 FormatUtils.appendPaddedInteger(buf,seconds,2);
 if(iMaxFields==3){
 return ;
 }
 displayOffset-=seconds*DateTimeConstants.MILLIS_PER_SECOND;
 if(displayOffset==0&&iMinFields<=3){
 return ;
 }
 if(iShowSeparators){
 buf.append('.');
 }
 FormatUtils.appendPaddedInteger(buf,displayOffset,3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:21:46 CDT
--------------- END -----------------
Location : org.joda.time.tz.DateTimeZoneBuilder.readFrom:[1166]#0.08391813582966891
Compute Candidate : 2019.09.05 AD at 03:22:06 CDT - 2019.09.05 AD at 03:27:47 CDT , PNumber : 11174, CandNumber : 25 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
-return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+return new DSTZone(id,(int)readMillis(in)+1,Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+int a=0;
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+String OUTSTRING="";
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id.isEmpty()){
+return null;
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+int a=1;
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+boolean b=true;
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
-return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+return new DSTZone(id,(int)readMillis(in)*20,Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/4235/pattern-ver1-serial/NTheEndAgain.src.fr.ribesg.bukkit.ntheendagain.world.EndWorldHandler.java-init.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(in==null){
+return null;
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id==null){
+return null;
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+assert (id!=null);
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+assert (in!=null);
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(in!=null){
+return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id!=null){
+return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id.isEmpty()){
+throw new IOException("Title must not be empty!");
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(in==null){
+throw new IOException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+assert (id!=null):"Appointments day is not allowed to be null!";
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+assert (in!=null):"Appointments day is not allowed to be null!";
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(id==null||in==null){
+throw new IOException();
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
+if(in==null||id==null){
+throw new IOException();
+}
 return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
-return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
-return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+return (DSTZone)new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1165,1168]
------------Candidate---------------
 static DSTZone readFrom(DataInput in,String id) throws IOException{
-return new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in));
+return (DSTZone)(new DSTZone(id,(int)readMillis(in),Recurrence.readFrom(in),Recurrence.readFrom(in)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:30:03 CDT
--------------- END -----------------
Location : org.joda.time.tz.DateTimeZoneBuilder.readFrom:[740]#0.08391813582966891
Compute Candidate : 2019.09.05 AD at 03:30:21 CDT - 2019.09.05 AD at 03:35:17 CDT , PNumber : 11180, CandNumber : 16 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
-return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+return new Recurrence(OfYear.readFrom(in),in.toString(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+int a=0;
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
-return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in)*2);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/2630/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+String OUTSTRING="";
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+int a=1;
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+boolean b=true;
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+if(in==null){
+return null;
+}
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+assert (in!=null);
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+if(in!=null){
+return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+}
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+if(in==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+if(in==null){
+throw new IOException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+if(in==null){
+throw new IOException("connection offline");
+}
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
+assert (in!=null):"Appointments day is not allowed to be null!";
 return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
-return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
-return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+return (Recurrence)new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[739,741]
------------Candidate---------------
 static Recurrence readFrom(DataInput in) throws IOException{
-return new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in));
+return (Recurrence)(new Recurrence(OfYear.readFrom(in),in.readUTF(),(int)readMillis(in)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:36:45 CDT
--------------- END -----------------
Location : org.joda.time.tz.DateTimeZoneBuilder.readFrom:[482]#0.08391813582966891
Compute Candidate : 2019.09.05 AD at 03:37:04 CDT - 2019.09.05 AD at 03:43:44 CDT , PNumber : 11390, CandNumber : 16 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return new OfYear((char)in.readUnsignedByte(),(Integer)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/1684/pattern-ver1-serial/src.jpkmn.game.battle.Battle.java-remove.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(Integer)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/1684/pattern-ver1-serial/src.jpkmn.game.battle.Battle.java-remove.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return new OfYear((char)in.readUnsignedByte(),(Integer)in.readUnsignedByte(),(int)in.readByte(),(Integer)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/6479/pattern-ver1-serial/src.org.zzl.minegaming.SEA.ScriptDecompiler.java-decompile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+int a=0;
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+String OUTSTRING="";
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+int a=1;
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+boolean b=true;
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+if(in==null){
+return null;
+}
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+assert (in!=null);
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+if(in!=null){
+return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+}
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+if(in==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+if(in==null){
+throw new IOException("connection offline");
+}
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
+assert (in!=null):"Appointments day is not allowed to be null!";
 return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return (OfYear)new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[481,488]
------------Candidate---------------
 static OfYear readFrom(DataInput in) throws IOException{
-return new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in));
+return (OfYear)(new OfYear((char)in.readUnsignedByte(),(int)in.readUnsignedByte(),(int)in.readByte(),(int)in.readUnsignedByte(),in.readBoolean(),(int)readMillis(in)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 03:45:08 CDT
--------------- END -----------------
Location : org.joda.time.tz.DateTimeZoneBuilder.readFrom:[1372, 1341, 1342, 1343, 1344, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1359, 1360, 1364, 1367, 1370, 1371, 1375]#0.08391813582966891
Compute Candidate : 2019.09.05 AD at 03:45:27 CDT - 2019.09.05 AD at 04:41:08 CDT , PNumber : 11320, CandNumber : 580 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+continue;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+continue;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+continue;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+continue;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7285/pattern-ver1-serial/src.game.Board.java-advanceGame.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
-int[] standardOffsets=new int[size];
+ int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
-DSTZone tailZone=null;
+ DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+return null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+return null;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+return null;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+return null;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<=poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<=size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<=256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Collection;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,myUid;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Collection;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,myUid;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i>poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i>size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize>256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,MAX_SERVICE_NODES;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,MAX_SERVICE_NODES;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+break;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+break;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+break;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+break;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;i--){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;i--){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
-tailZone=DSTZone.readFrom(in,id);
+tailZone=tailZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[1]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
+transitions[1]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[1]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[1]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[1];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[1]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+Integer poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+Integer size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,tailZone;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,localLevel;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,localLevel;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,tailZone;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,index;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;i++,new ArrayList<KeyBinding>()){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;i++,new ArrayList<KeyBinding>()){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+String[] pool=new String[(poolSize)];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+long[] transitions=new long[(size)];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+String[] nameKeys=new String[(size)];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+int[] wallOffsets=new int[(size)];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
-int[] standardOffsets=new int[size];
+int[] standardOffsets=new int[(size)];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[poolSize];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[i];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[size];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;poolSize++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=in.toString();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,_afterComposeMethodCache;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,_afterComposeMethodCache;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+i++;
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+i++;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,mActions;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,mActions;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;i++,new ArrayList<>()){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;i++,new ArrayList<>()){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,mRelationId;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,mRelationId;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ final String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ final String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final int poolSize=in.readUnsignedShort();
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ final long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ final long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=1;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=-1;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ int poolSize=in.readUnsignedShort();
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
-long[] transitions=new long[size];
+ int size=in.readInt();
+ long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
-DSTZone tailZone=null;
+ DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
-long[] transitions=new long[size];
+ final int size=in.readInt();
+ final long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ final int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(!in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=0;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+poolSize++;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+poolSize++;
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+poolSize++;
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+size++;
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+poolSize++;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:48:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+i++;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+i++;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+i++;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+i++;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+i++;
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+poolSize++;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(true){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+poolSize++;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+poolSize--;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+poolSize--;
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+size--;
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<=size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<=256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<=poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<=256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<=poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<=size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+i--;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+i--;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+i--;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+i--;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+i--;
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+poolSize--;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[index++];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=2;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+return null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+return null;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+return null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+return null;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+return null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]="";
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]="";
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=null;
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+poolSize++;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,continentName,countryCode;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0,continentName,countryCode;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+break;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+break;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+break;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+break;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
+}
+while(true){
+
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+while(true){
+
+}
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+while(true){
+
+}
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+while(true){
+
+}
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+while(true){
+
+}
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:58:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,userEmail;i<poolSize;i++,i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0,userEmail;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;i++,i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+break;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+break;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+break;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+break;
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=id;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1577/pattern-ver1-serial/src.main.java.models.RenameFiles.java-replaceWeirdChar.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+i++;
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+i++;
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+i++;
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+i++;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+i++;
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+i++;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<i;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(i<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1475/pattern-ver1-serial/src.butterseal.src.edu.smcm.gamedev.butterseal.BSInterface.java-isTouchingInside.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=10;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;i++,Charset.forName("UTF-8")){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;i++,Charset.forName("UTF-8")){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=1;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=1;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=-1;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=-1;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(readMillis(in)!=0){
 transitions[i]=readMillis(in);
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 04:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ final String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final int poolSize=in.readUnsignedShort();
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ final long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ final int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=0;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=0;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ final int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ final int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ final int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
-int[] standardOffsets=new int[size];
+ final int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[index-1];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ @SuppressWarnings("UnusedAssignment") int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
-int size=in.readInt();
+ @SuppressWarnings("UnusedAssignment") int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ @SuppressWarnings("UnusedAssignment") int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
-DSTZone tailZone=null;
+ @SuppressWarnings("UnusedAssignment") DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
-String[] nameKeys=new String[size];
+ @SuppressWarnings("UnusedAssignment") String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
-long[] transitions=new long[size];
+ @SuppressWarnings("UnusedAssignment") long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ @SuppressWarnings("UnusedAssignment") int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
-int[] standardOffsets=new int[size];
+ @SuppressWarnings("UnusedAssignment") int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ @SuppressWarnings("UnusedAssignment") int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
-DSTZone tailZone=null;
+ @SuppressWarnings("UnusedAssignment") DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ @SuppressWarnings("UnusedAssignment") int poolSize=in.readUnsignedShort();
+ @SuppressWarnings("UnusedAssignment") String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
+ @SuppressWarnings("UnusedAssignment") int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+pool[i]=id;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+in=in;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final int poolSize=in.readUnsignedShort();
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
-int[] wallOffsets=new int[size];
+ final int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
-int poolSize=in.readUnsignedShort();
-String[] pool=new String[poolSize];
+ final int poolSize=in.readUnsignedShort();
+ final String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
-int[] standardOffsets=new int[size];
+ final int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(i==4){
+continue;
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if(i==4){
+continue;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+if(i==4){
+continue;
+}
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(i==4){
+continue;
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(in!=null){
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+poolSize=1000;
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(true){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()==false){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+Arrays.sort(pool);
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+Arrays.sort(pool);
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+Arrays.sort(pool);
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+Arrays.sort(pool);
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(tailZone==null){
 tailZone=DSTZone.readFrom(in,id);
+}
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(pool[i]==null){
 pool[i]=in.readUTF();
+}
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+if(nameKeys[i]==null){
 nameKeys[i]=pool[index];
+}
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+Arrays.sort(transitions);
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+Arrays.sort(wallOffsets);
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+Arrays.sort(standardOffsets);
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+int index;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+int index;
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+int a=0;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+int a=0;
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+int a=0;
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+int a=0;
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+int a=0;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+int a=0;
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=2;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=2;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+}
+if(index==0.0){
+continue;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+String OUTSTRING="";
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+String OUTSTRING="";
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+String OUTSTRING="";
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+String OUTSTRING="";
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+String OUTSTRING="";
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+String OUTSTRING="";
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(id.isEmpty()){
+return null;
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;){
+i++;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;){
+i++;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+i++;
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+int index;
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(Double.isNaN(poolSize)){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()==true){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=poolSize;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=poolSize;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=i;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=i;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+int indexSelection=0;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+int indexSelection=0;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
+int indexSelection=0;
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+int indexSelection=0;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+int indexSelection=0;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+int indexSelection=0;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i-1]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
+transitions[i-1]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i-1]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i-1]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Arrays;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i-1]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in.equals("sounds")){
+continue;
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in.equals("sounds")){
+continue;
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if(in.equals("sounds")){
+continue;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+if(in.equals("sounds")){
+continue;
+}
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+if(in.equals("sounds")){
+continue;
+}
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(pool.equals("sounds")){
+continue;
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+int index;
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
-int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+int a=1;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+int a=1;
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+int a=1;
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+int a=1;
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+int a=1;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+int a=1;
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+int index;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+int index;
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+boolean b=true;
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+boolean b=true;
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+boolean b=true;
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+boolean b=true;
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+boolean b=true;
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+boolean b=true;
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
+transitions[i]=readMillis(in)+1;
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=in.readUTF()+1;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=in.readUnsignedByte()+1;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=(int)readMillis(in)+1;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in)+1;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in==null){
+continue;
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in==null){
+continue;
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+if(in==null){
+continue;
+}
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+if(in==null){
+continue;
+}
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+if(pool==null){
+continue;
+}
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+if(in==null){
+continue;
+}
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
-for(int i=0;i<poolSize;i++){
+for(int i=0;i<poolSize;Math.abs(i++)){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
-for(int i=0;i<size;i++){
+for(int i=0;i<size;Math.abs(i++)){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=10;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=10;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in==null){
+return null;
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in==null){
+return null;
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+if(in==null){
+return null;
+}
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+if(in==null){
+return null;
+}
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+if(in==null){
+return null;
+}
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(in==null){
+return null;
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool==null){
+return null;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+if(transitions==null){
+return null;
+}
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+if(wallOffsets==null){
+return null;
+}
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+if(standardOffsets==null){
+return null;
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(nameKeys==null){
+return null;
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+Arrays.fill(pool,null);
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V26/7483/pattern-ver1-serial/src.edu.stanford.nlp.util.StringUtils.java-mapStringToArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+Arrays.fill(nameKeys,null);
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V26/7483/pattern-ver1-serial/src.edu.stanford.nlp.util.StringUtils.java-mapStringToArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(in==null){
+return null;
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(in==null){
+return null;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+}
+if(in==null){
+return null;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if(in==null){
+return null;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+if(in==null){
+return null;
+}
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+if(in==null){
+return null;
+}
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+if("&null".equals(in)){
+return null;
+}
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if("&null".equals(id)){
+return null;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if("&null".equals(poolSize)){
+return null;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if("&null".equals(in)){
+return null;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if("&null".equals(poolSize)){
+return null;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if("&null".equals(pool)){
+return null;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if("&null".equals(pool)){
+return null;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if("&null".equals(in)){
+return null;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+if("&null".equals(pool)){
+return null;
+}
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(!(in==null)){
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool.equals("-1")){
+return null;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(nameKeys.equals("-1")){
+return null;
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+if(transitions.equals("-1")){
+return null;
+}
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+if(wallOffsets.equals("-1")){
+return null;
+}
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+if(standardOffsets.equals("-1")){
+return null;
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256||poolSize==Long.MIN_VALUE){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=in.readUTF().replaceAll("\n","");
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=pool[index].replaceAll("\n","");
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
+pool[i]=(in.readUTF()).replace("\\","\\\\");
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
-nameKeys[i]=pool[index];
+nameKeys[i]=(pool[index]).replace("\\","\\\\");
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(id==null){
+return null;
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(id==null){
+return null;
+}
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(in==null){
+return null;
+}
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+assert (in!=null);
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+assert (id!=null);
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (in!=null);
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+assert (pool!=null);
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (pool!=null);
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+assert (pool!=null);
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+assert (in!=null);
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+assert (!id.isEmpty());
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
-tailZone=DSTZone.readFrom(in,id);
+tailZone=null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(in!=null){
+tailZone=DSTZone.readFrom(in,id);
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(id!=null){
+tailZone=DSTZone.readFrom(in,id);
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(in!=null){
+int poolSize=in.readUnsignedShort();
+String[] pool=new String[poolSize];
+for(int i=0;i<poolSize;i++){
+pool[i]=in.readUTF();
+}
+int size=in.readInt();
+long[] transitions=new long[size];
+int[] wallOffsets=new int[size];
+int[] standardOffsets=new int[size];
+String[] nameKeys=new String[size];
+for(int i=0;i<size;i++){
+transitions[i]=readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
+try{
+int index;
+if(poolSize<256){
+index=in.readUnsignedByte();
+}else {
+index=in.readUnsignedShort();
+}
+nameKeys[i]=pool[index];
+}catch(ArrayIndexOutOfBoundsException e){
+throw new IOException("Invalid encoding");
+}
+}
+DSTZone tailZone=null;
+if(in.readBoolean()){
+tailZone=DSTZone.readFrom(in,id);
+}
+return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(id!=null){
+int poolSize=in.readUnsignedShort();
+String[] pool=new String[poolSize];
+for(int i=0;i<poolSize;i++){
+pool[i]=in.readUTF();
+}
+int size=in.readInt();
+long[] transitions=new long[size];
+int[] wallOffsets=new int[size];
+int[] standardOffsets=new int[size];
+String[] nameKeys=new String[size];
+for(int i=0;i<size;i++){
+transitions[i]=readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
+try{
+int index;
+if(poolSize<256){
+index=in.readUnsignedByte();
+}else {
+index=in.readUnsignedShort();
+}
+nameKeys[i]=pool[index];
+}catch(ArrayIndexOutOfBoundsException e){
+throw new IOException("Invalid encoding");
+}
+}
+DSTZone tailZone=null;
+if(in.readBoolean()){
+tailZone=DSTZone.readFrom(in,id);
+}
+return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in!=null){
+pool[i]=in.readUTF();
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in!=null){
+transitions[i]=readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
+try{
+int index;
+if(poolSize<256){
+index=in.readUnsignedByte();
+}else {
+index=in.readUnsignedShort();
+}
+nameKeys[i]=pool[index];
+}catch(ArrayIndexOutOfBoundsException e){
+throw new IOException("Invalid encoding");
+}
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+if(transitions[i]==0){
+return null;
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+if(index==0){
+return null;
+}
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+if(index==0){
+return null;
+}
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+}
+if(index==0){
+return null;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+assert (!id.isEmpty());
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+assert (tailZone!=null);
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+assert (poolSize!=in.readUnsignedShort());
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+assert (pool!=new String[poolSize]);
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+assert (size!=in.readInt());
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+assert (transitions!=new long[size]);
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:15:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+assert (wallOffsets!=new int[size]);
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+assert (standardOffsets!=new int[size]);
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (transitions!=null);
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=-1;
+index++;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+index++;
 }else {
-index=in.readUnsignedShort();
+index=-1;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
+index=-1;
 }else {
 index=in.readUnsignedShort();
+index++;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+assert (in!=null);
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+assert (in!=null);
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+assert (id!=null);
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+assert (in!=null);
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+assert (in!=null);
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+assert (in!=null);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+assert (in!=null);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+assert (id!=null);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+assert (in!=null);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+assert (in!=null);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+assert (pool!=null);
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool.equals(null)){
+return null;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool.equals("655")){
+System.out.println();
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256||"查看红包".equals(poolSize)){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256||poolSize==3){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+if(in==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool==null){
+throw new IOException("Root not directory or IO error occurred");
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/7398/pattern-ver1-serial/core.src.main.java.org.infinispan.loaders.file.FileCacheStore.java-toStreamLockSafe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in!=null&&in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+index=in.readUnsignedByte();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+index=in.readUnsignedShort();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+index=in.readUnsignedByte();
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+index=in.readUnsignedShort();
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+index=in.readUnsignedByte();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+index=in.readUnsignedShort();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+index=in.readUnsignedByte();
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if(id.isEmpty()){
+id=null;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<0||poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
 index=in.readUnsignedByte();
+if(poolSize<256){
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+index=in.readUnsignedShort();
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
-index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(id.trim().isEmpty()){
+throw new IOException("API username cannot be empty");
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if((in!=null)&&(in.readBoolean())){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+index=in.readUnsignedByte();
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+index=in.readUnsignedShort();
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in==null){
+throw new IOException("connection offline");
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+index=in.readUnsignedByte();
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+index=in.readUnsignedShort();
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256||poolSize==0){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256||poolSize>9){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+index=in.readUnsignedShort();
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&poolSize<4000000){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&poolSize!=9999){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(256>0&&poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in==null||in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+assert (poolSize>=0):"Receive a negative tratment";
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (poolSize>=0):"Receive a negative tratment";
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+assert (poolSize>=0):"Receive a negative tratment";
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(id.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+assert (in!=null):"Appointments day is not allowed to be null!";
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+assert (in!=null):"Appointments day is not allowed to be null!";
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+assert (in!=null):"Appointments day is not allowed to be null!";
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+assert (id!=null):"Appointments day is not allowed to be null!";
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+assert (pool!=null):"Appointments day is not allowed to be null!";
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (in!=null):"Appointments day is not allowed to be null!";
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+assert (in!=null):"Appointments day is not allowed to be null!";
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+assert (poolSize!=0):"Receive a size tratment";
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+assert (poolSize!=0):"Receive a size tratment";
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+assert (poolSize!=0):"Receive a size tratment";
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+assert (size!=0):"Receive a size tratment";
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+transitions[i]=readMillis(in);
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+transitions[i]=readMillis(in);
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+transitions[i]=readMillis(in);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+transitions[i]=readMillis(in);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+pool[i]=in.readUTF();
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+pool[i]=in.readUTF();
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+pool[i]=in.readUTF();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+pool[i]=in.readUTF();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+pool[i]=in.readUTF();
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+pool[i]=in.readUTF();
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+pool[i]=in.readUTF();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+pool[i]=in.readUTF();
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+pool[i]=in.readUTF();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+pool[i]=in.readUTF();
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+if(index<0){
+index=0;
+}
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+if(index<0){
+index=0;
+}
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+}
+if(index<0){
+index=0;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+transitions[i]=readMillis(in);
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if(poolSize<=0){
+poolSize=1;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(poolSize<=0){
+poolSize=1;
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+if(size<=0){
+size=1;
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+pool[i]=in.readUTF();
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+transitions[i]=readMillis(in);
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+pool[i]=in.readUTF();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+pool[i]=in.readUTF();
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+pool[i]=in.readUTF();
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+pool[i]=in.readUTF();
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+pool[i]=in.readUTF();
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+transitions[i]=readMillis(in);
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean haveBreadCrumbs=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&haveBreadCrumbs){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+pool[i]=in.readUTF();
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+pool[i]=in.readUTF();
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+transitions[i]=readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+transitions[i]=readMillis(in);
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+transitions[i]=readMillis(in);
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/3854/pattern-ver1-serial/NewIntro4.java-act.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
-pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+pool[i]=in.readUTF();
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+pool[i]=in.readUTF();
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+transitions[i]=readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2108/pattern-ver1-serial/pac4j-oauth.src.main.java.org.pac4j.oauth.client.BaseOAuth10Client.java-addAccessTokenToProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=1;
+standardOffsets[i]=1;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+index=in.readUnsignedByte();
 if(poolSize<256){
+index=in.readUnsignedByte();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+index=in.readUnsignedShort();
 if(poolSize<256){
 index=in.readUnsignedByte();
+index=in.readUnsignedShort();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+index=in.readUnsignedByte();
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+index=in.readUnsignedByte();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+transitions[i]=readMillis(in);
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+pool[i]=in.readUTF();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool==null){
+throw new IOException("User isn't registered! "+poolSize);
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+if(transitions==null){
+throw new IOException("User isn't registered! "+size);
+}
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+if(wallOffsets==null){
+throw new IOException("User isn't registered! "+size);
+}
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+if(standardOffsets==null){
+throw new IOException("User isn't registered! "+size);
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(nameKeys==null){
+throw new IOException("User isn't registered! "+size);
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
-return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+tailZone=DSTZone.readFrom(in,id);
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+wallOffsets[i]=(int)readMillis(in);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+wallOffsets[i]=(int)readMillis(in);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+standardOffsets[i]=(int)readMillis(in);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+standardOffsets[i]=(int)readMillis(in);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+wallOffsets[i]=(int)readMillis(in);
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in!=null){
 transitions[i]=readMillis(in);
+}
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+wallOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+wallOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+standardOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+standardOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+wallOffsets[i]=(int)readMillis(in);
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
+standardOffsets[i]=(int)readMillis(in);
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
+wallOffsets[i]=(int)readMillis(in);
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
+standardOffsets[i]=(int)readMillis(in);
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+wallOffsets[i]=(int)readMillis(in);
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+standardOffsets[i]=(int)readMillis(in);
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+wallOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+wallOffsets[i]=(int)readMillis(in);
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
-return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
+return (PrecalculatedZone)(new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+transitions[i]=readMillis(in);
 if(poolSize<256){
 index=in.readUnsignedByte();
+transitions[i]=readMillis(in);
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+transitions[i]=readMillis(in);
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+transitions[i]=readMillis(in);
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+pool[i]=pool[i].replaceAll("\t","");
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5016/pattern-ver1-serial/tutorials.src.main.java.com.tutorial.glsltutorials.tutorials.Attributes.AttribType.java-ParseFunc.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+pool[i]=pool[i].replaceAll("\t","");
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5016/pattern-ver1-serial/tutorials.src.main.java.com.tutorial.glsltutorials.tutorials.Attributes.AttribType.java-ParseFunc.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+pool[i]+="_"+Integer.toString(i);
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
+pool[i]+="_"+Integer.toString(i);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(transitions==null||tailZone==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(tailZone==null||transitions==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(transitions==null||wallOffsets==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(transitions==null||standardOffsets==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(wallOffsets==null||transitions==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(standardOffsets==null||transitions==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(transitions==null||nameKeys==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+}
+if(nameKeys==null||transitions==null){
+return null;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+if(id.startsWith("\r\n")){
+id=id.substring(2);
+}
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
-index=in.readUnsignedByte();
-}else {
 index=in.readUnsignedShort();
+}else {
+index=in.readUnsignedByte();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+if(id.startsWith("/")){
+id=id.substring(1);
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(id==null||in==null){
+throw new IOException();
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(id==null||in==null){
+throw new IOException();
+}
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+if(in==null||id==null){
+throw new IOException();
+}
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
+if(in==null||id==null){
+throw new IOException();
+}
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(pool==null||in==null){
+throw new IOException();
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(in==null||pool==null){
+throw new IOException();
+}
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(wallOffsets[i]!=(int)readMillis(in)){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+}
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(standardOffsets[i]!=(int)readMillis(in)){
 transitions[i]=readMillis(in);
+}
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+haveBreadCrumbs=true;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()&&haveBreadCrumbs){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+haveBreadCrumbs=true;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&haveBreadCrumbs){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+haveBreadCrumbs=true;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()&&haveBreadCrumbs){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean haveBreadCrumbs=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&haveBreadCrumbs){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+haveBreadCrumbs=true;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean haveBreadCrumbs=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&haveBreadCrumbs){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
+haveBreadCrumbs=true;
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+haveBreadCrumbs=true;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()&&haveBreadCrumbs){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+haveBreadCrumbs=true;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
-if(in.readBoolean()){
+if(in.readBoolean()&&haveBreadCrumbs){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean haveBreadCrumbs=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+haveBreadCrumbs=true;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
-if(poolSize<256){
+if(poolSize<256&&haveBreadCrumbs){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
+succeeded=true;
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean succeeded=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+succeeded=true;
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
+}
+if(!succeeded){
+return null;
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+succeeded=true;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean succeeded=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+succeeded=true;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
+}
+if(!succeeded){
+return null;
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
+boolean succeeded=false;
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+succeeded=true;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
+}
+if(!succeeded){
+return null;
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
+succeeded=true;
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
+succeeded=true;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
+succeeded=true;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+boolean succeeded=false;
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(!succeeded){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
+succeeded=true;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+if(poolSize==3){
+System.out.println("debug");
+}
 index=in.readUnsignedByte();
+if(poolSize==3){
+System.out.println("debug");
+}
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+if(poolSize==3){
+System.out.println("debug");
+}
 pool[i]=in.readUTF();
+if(poolSize==3){
+System.out.println("debug");
+}
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if(poolSize<0){
+poolSize--;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(size<0){
+size--;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+transitions[i]=readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+transitions[i]=readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+if(in==null||pool==null||nameKeys==null){
+return null;
+}
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
+if(poolSize<256){
+index=in.readUnsignedByte();
+}else {
+index=in.readUnsignedShort();
+}
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(size==0&&poolSize==0&&pool.equals("")){
+return null;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/1175/pattern-ver1-serial/src.com.almalence.opencam.PluginManager.java-addTimestamp.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if(poolSize<3){
+poolSize=3;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(size<3){
+size=3;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
+if(poolSize<0){
+poolSize=0;
+}
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
+if(size<0){
+size=0;
+}
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
+wallOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
+standardOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
-transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 8, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool==null){
+throw new IOException("Can not found requested dataSource ["+id+"], for device ["+poolSize+"].");
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool==null){
+throw new IOException("Can not found requested dataSource ["+in+"], for device ["+poolSize+"].");
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(pool==null){
+throw new IOException("Can not found requested dataSource ["+nameKeys+"], for device ["+poolSize+"].");
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(nameKeys==null){
+throw new IOException("Can not found requested dataSource ["+id+"], for device ["+size+"].");
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/499/pattern-ver1-serial/crux-dev.src.main.java.org.cruxframework.crux.core.rebind.context.scanner.DataSourceScanner.java-getDataSource.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
+long startTime=System.currentTimeMillis();
 pool[i]=in.readUTF();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
+long startTime=System.currentTimeMillis();
 index=in.readUnsignedByte();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
+long startTime=System.currentTimeMillis();
 index=in.readUnsignedShort();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
+long startTime=System.currentTimeMillis();
 tailZone=DSTZone.readFrom(in,id);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
+long startTime=System.currentTimeMillis();
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
+long startTime=System.currentTimeMillis();
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
-wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
-standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 8, INS : 0, DEL : 6
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
+if(pool[0]==null){
+pool[0]="";
+}
+if(pool[1]==null){
+pool[1]="";
+}
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/3211/pattern-ver1-serial/src.tk.blackwolf12333.grieflog.listeners.InventoryListener.java-difference.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 16, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
+if(nameKeys[0]==null){
+nameKeys[0]="";
+}
+if(nameKeys[1]==null){
+nameKeys[1]="";
+}
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/3211/pattern-ver1-serial/src.tk.blackwolf12333.grieflog.listeners.InventoryListener.java-difference.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 16, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+transitions[28]=(byte)0x88;
+transitions[29]=0x58;
+transitions[30]=0x01;
+transitions[31]=0x00;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+transitions[28]=(byte)0x88;
+transitions[29]=0x58;
+transitions[30]=0x01;
+transitions[31]=0x00;
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+wallOffsets[28]=(byte)0x88;
+wallOffsets[29]=0x58;
+wallOffsets[30]=0x01;
+wallOffsets[31]=0x00;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+wallOffsets[28]=(byte)0x88;
+wallOffsets[29]=0x58;
+wallOffsets[30]=0x01;
+wallOffsets[31]=0x00;
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
+standardOffsets[28]=(byte)0x88;
+standardOffsets[29]=0x58;
+standardOffsets[30]=0x01;
+standardOffsets[31]=0x00;
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
+for(int i=0;i<4;i++){
+transitions[i]=Math.min(1,Math.max(0,transitions[i]));
+}
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
+for(int i=0;i<4;i++){
+wallOffsets[i]=Math.min(1,Math.max(0,wallOffsets[i]));
+}
 int[] standardOffsets=new int[size];
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[1339,1377]
------------Candidate---------------
 static PrecalculatedZone readFrom(DataInput in,String id) throws IOException{
 int poolSize=in.readUnsignedShort();
 String[] pool=new String[poolSize];
 for(int i=0;i<poolSize;i++){
 pool[i]=in.readUTF();
 }
 int size=in.readInt();
 long[] transitions=new long[size];
 int[] wallOffsets=new int[size];
 int[] standardOffsets=new int[size];
+for(int i=0;i<4;i++){
+standardOffsets[i]=Math.min(1,Math.max(0,standardOffsets[i]));
+}
 String[] nameKeys=new String[size];
 for(int i=0;i<size;i++){
 transitions[i]=readMillis(in);
 wallOffsets[i]=(int)readMillis(in);
 standardOffsets[i]=(int)readMillis(in);
 try{
 int index;
 if(poolSize<256){
 index=in.readUnsignedByte();
 }else {
 index=in.readUnsignedShort();
 }
 nameKeys[i]=pool[index];
 }catch(ArrayIndexOutOfBoundsException e){
 throw new IOException("Invalid encoding");
 }
 }
 DSTZone tailZone=null;
 if(in.readBoolean()){
 tailZone=DSTZone.readFrom(in,id);
 }
 return new PrecalculatedZone(id,transitions,wallOffsets,standardOffsets,nameKeys,tailZone);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:31:53 CDT
--------------- END -----------------
Location : org.joda.time.tz.DateTimeZoneBuilder.readMillis:[200, 201, 202, 203, 204, 205, 192, 193, 194, 195, 196, 209, 183, 184, 187, 188]#0.08333333333333333
Compute Candidate : 2019.09.05 AD at 05:32:11 CDT - 2019.09.05 AD at 05:38:48 CDT , PNumber : 2561, CandNumber : 81 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+ long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
-int v=in.readUnsignedByte();
+ int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<(64-1))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<(64-6))>>(64-1);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=(v<<(32-1))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=(v<<(32-6))>>(32-1);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=1;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=1;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=-1;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=-1;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
-int v=in.readUnsignedByte();
+ int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+ long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=0;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=0;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=2;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=2;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=3;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=3;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
-return v*60000L;
+return -1;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
-return v*60000L;
+return 1;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<(64-6))>>1;
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<1)>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=(v<<(32-6))>>1;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=(v<<1)>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<64-6*100)>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=(((long)v)<<(64-6))>>64-38*100;
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=in.readUnsignedByte()*100<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=in.readUnsignedByte()*100<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=in.readUnsignedByte()*100<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
-w|=(in.readUnsignedByte());
+w|=in.readUnsignedByte()*100;
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=in.readUnsignedByte()*100<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=in.readUnsignedByte()*100<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
-v|=(in.readUnsignedByte());
+v|=in.readUnsignedByte()*100;
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
-return v*60000L;
+return 4;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4109/pattern-ver1-serial/src.org.jwildfire.create.tina.swing.TinaController.java-getColumnCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
-return v*60000L;
+return Integer.MIN_VALUE;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
-return v*60000L;
+return 3;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/6014/pattern-ver1-serial/src.com.learnit.LearnIt.MainActivity.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
+if(in==null){
+return 0l;
+}
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=1;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=1;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=1;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=1;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=1;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=-1;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=-1;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=-1;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=-1;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=-1;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=0;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=0;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=0;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=0;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=0;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
+if("index".equals(in)){
+return 0;
+}
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
+if("index".equals(v)){
+return 0;
+}
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=2;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=2;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=2;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=2;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=2;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
-w|=(in.readUnsignedByte())<<24;
+w|=3;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
-w|=(in.readUnsignedByte())<<16;
+w|=3;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
-w|=(in.readUnsignedByte())<<8;
+w|=3;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
-v|=(in.readUnsignedByte())<<16;
+v|=3;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
-v|=(in.readUnsignedByte())<<8;
+v|=3;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
-return v*(30*60000L);
+return -1;
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
-return v*(30*60000L);
+return 1;
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
+if(in==null){
+throw new IOException("player is not initialised, game might not be started");
+}
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
-return v*(30*60000L);
+return 4;
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4109/pattern-ver1-serial/src.org.jwildfire.create.tina.swing.TinaController.java-getColumnCount.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
-return v*(30*60000L);
+return Integer.MIN_VALUE;
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
-return v*(30*60000L);
+return 3;
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/6014/pattern-ver1-serial/src.com.learnit.LearnIt.MainActivity.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
-long w=(((long)v)<<(64-6))>>(64-38);
+long w=((long)v)<<(64-6)*100>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=1;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=1;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=-1;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=-1;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=0;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=0;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=2;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=2;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
 v=(v<<(32-6))>>(32-6);
 return v*(30*60000L);
 case 1 :
 
-v=(v<<(32-6))>>(32-30);
+v=3;
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=3;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_19_buggy/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java[179,211]
------------Candidate---------------
 static long readMillis(DataInput in) throws IOException{
 int v=in.readUnsignedByte();
 switch (v>>6){
 case 0 :
 
 default :
 
-v=(v<<(32-6))>>(32-6);
+v=v;
 return v*(30*60000L);
 case 1 :
 
 v=(v<<(32-6))>>(32-30);
 v|=(in.readUnsignedByte())<<16;
 v|=(in.readUnsignedByte())<<8;
 v|=(in.readUnsignedByte());
 return v*60000L;
 case 2 :
 
 long w=(((long)v)<<(64-6))>>(64-38);
 w|=(in.readUnsignedByte())<<24;
 w|=(in.readUnsignedByte())<<16;
 w|=(in.readUnsignedByte())<<8;
 w|=(in.readUnsignedByte());
 return w*1000L;
 case 3 :
 
 return in.readLong();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london]
---------START : 2019.09.05 AD at 00:37:57 CDT
---------TIME : 2019.09.05 AD at 05:38:48 CDT
--------------- END -----------------
Finish : time-19 > patch : 0 | Start : Thu Sep 05 00:37:57 CDT 2019 | End : 2019.09.05 AD at 05:38:48 CDT
