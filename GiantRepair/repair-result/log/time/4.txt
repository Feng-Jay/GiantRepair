Repair : time_4
Current failed test : org.joda.time.TestPartial_Basics::testWith3 | 2019.09.04 AD at 14:21:57 CDT
Location : org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue:[111]#1.0
Compute Candidate : 2019.09.04 AD at 14:22:53 CDT - 2019.09.04 AD at 14:31:31 CDT , PNumber : 11255, CandNumber : 11 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
-return 1;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Solution---------------
 public int getMinimumValue(){
-return 1;
+return 100;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
-return 1;
+return this.getMinimumValue();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
-return 1;
+return getMinimumValue(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
+this.getMinimumValue();
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
-return 1;
+return (int)(1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
-return 1;
+return 1&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
+int a=0;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
+String OUTSTRING="";
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
+int a=1;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[105,112]
------------Candidate---------------
 public int getMinimumValue(){
+boolean b=true;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:32:50 CDT
--------------- END -----------------
Location : org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue:[138]#1.0
Compute Candidate : 2019.09.04 AD at 14:33:09 CDT - 2019.09.04 AD at 14:40:04 CDT , PNumber : 11263, CandNumber : 11 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Solution---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return 100;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return this.getMinimumValue();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return getMinimumValue(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
+this.getMinimumValue();
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return (int)(1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
-return 1;
+return 1&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
+int a=0;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
+String OUTSTRING="";
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
+int a=1;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[132,139]
------------Candidate---------------
 public int getMinimumValue(ReadablePartial instant,int[] values){
+boolean b=true;
 return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:41:21 CDT
--------------- END -----------------
Location : org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue:[178]#1.0
Compute Candidate : 2019.09.04 AD at 14:41:40 CDT - 2019.09.04 AD at 14:47:28 CDT , PNumber : 11280, CandNumber : 41 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)-1;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:47:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)+3;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+this.getMaximumValue();
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)+(int)(1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:47:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)+-1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:47:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+int a=0;
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+String OUTSTRING="";
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(equals(instant)){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(equals(values)){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+int a=1;
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+boolean b=true;
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(getWrappedField()==null){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(instant==null){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(values==null){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if("index".equals(instant)){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if("index".equals(values)){
+return 0;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(0>=instant.size()){
+return Integer.MIN_VALUE;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5077/pattern-ver1-serial/src.Utils.Helper.java-getModeInt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)+1+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+assert (instant!=null);
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+assert (values!=null);
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(instant!=null){
+return getWrappedField().getMaximumValue(instant,values)+1;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(values!=null){
+return getWrappedField().getMaximumValue(instant,values)+1;
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+assert (instant!=null):"Appointments day is not allowed to be null!";
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+assert (values!=null):"Appointments day is not allowed to be null!";
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return this.getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return this.getMaximumValue();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getMaximumValue(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Solution---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(getWrappedField()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return 1+getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Solution---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values)+1&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return (int)getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Solution---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return -getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return getWrappedField().getMaximumValue(instant,values);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/6424/pattern-ver1-serial/mail.src.main.java.com.sun.mail.imap.ModifiedSinceTerm.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(getWrappedField().getMaximumValue(instant,values)<0){
+return 5;
+}else {
 return getWrappedField().getMaximumValue(instant,values)+1;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V10/6358/pattern-ver1-serial/AntGameProject.src.antgameproject.DirectionalInstruction.java-turn.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return (int)(getWrappedField().getMaximumValue(instant,values)+1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return (int)getWrappedField().getMaximumValue(instant,values)+(int)1;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
-return getWrappedField().getMaximumValue(instant,values)+1;
+return 100;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(instant==null||values==null){
+throw new NullPointerException();
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[171,179]
------------Candidate---------------
 public int getMaximumValue(ReadablePartial instant,int[] values){
+if(values==null||instant==null){
+throw new NullPointerException();
+}
 return getWrappedField().getMaximumValue(instant,values)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:51:55 CDT
--------------- END -----------------
Location : org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue:[148]#0.5773502691896258
Compute Candidate : 2019.09.04 AD at 14:52:14 CDT - 2019.09.04 AD at 14:55:37 CDT , PNumber : 11272, CandNumber : 30 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue(null)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()-1;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue(1)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue(2)+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()+3;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue(1000)+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1052/pattern-ver1-serial/src.main.java.net.dv8tion.jda.requests.WebSocketClientV2.java-close.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+this.getMaximumValue();
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()+(int)(1);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()+-1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()+1+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+int a=0;
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+String OUTSTRING="";
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+int a=1;
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+boolean b=true;
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return this.getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return this.getMaximumValue();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getMaximumValue(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+if(getWrappedField()==null){
+return 0;
+}
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return 1+getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue()+1&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return (int)getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return -getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return getWrappedField().getMaximumValue();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/6424/pattern-ver1-serial/mail.src.main.java.com.sun.mail.imap.ModifiedSinceTerm.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return (int)(getWrappedField().getMaximumValue()+1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return (int)getWrappedField().getMaximumValue()+(int)1;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:58:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
-return getWrappedField().getMaximumValue()+1;
+return 100;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+if(getWrappedField().getMaximumValue()<0){
+return 5;
+}else {
 return getWrappedField().getMaximumValue()+1;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V10/6358/pattern-ver1-serial/AntGameProject.src.antgameproject.DirectionalInstruction.java-turn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java[141,149]
------------Candidate---------------
 public int getMaximumValue(){
+if(getWrappedField()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return getWrappedField().getMaximumValue()+1;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 14:59:13 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeFieldType.getField:[514, 520, 516, 480, 482]#0.4472135954999579
Compute Candidate : 2019.09.04 AD at 14:59:31 CDT - 2019.09.04 AD at 15:40:15 CDT , PNumber : 11285, CandNumber : 58 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+chronology=DateTimeUtils.getChronology(chronology);
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return null;
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return null;
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return null;
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return (DateTimeField)chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return (DateTimeField)chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return (DateTimeField)chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+synchronized(this){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return (DateTimeField)(chronology.clockhourOfDay());
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return (DateTimeField)(chronology.minuteOfHour());
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return (DateTimeField)(chronology.hourOfDay());
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
-chronology=DateTimeUtils.getChronology(chronology);
+chronology=chronology;
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+int a=0;
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+String OUTSTRING="";
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
-chronology=DateTimeUtils.getChronology(chronology);
+chronology=null;
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(equals(chronology)){
+return null;
+}
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+int a=1;
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+boolean b=true;
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology==null){
+return null;
+}
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology==null){
+return null;
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if("&null".equals(chronology)){
+return null;
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology.equals("-1")){
+return null;
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+assert (chronology!=null);
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology.equals(null)){
+return null;
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology.equals("655")){
+System.out.println();
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return chronology==null?null:chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return chronology==null?null:chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return chronology==null?null:chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return chronology!=null?chronology.clockhourOfDay():null;
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return chronology!=null?chronology.minuteOfHour():null;
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return chronology!=null?chronology.hourOfDay():null;
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+assert (chronology!=null):"Appointments day is not allowed to be null!";
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return null;
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return null;
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return null;
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return null;
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return null;
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return null;
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return null;
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return null;
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return null;
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+if(chronology!=null){
 chronology=DateTimeUtils.getChronology(chronology);
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
+case MONTH_OF_YEAR :
+
+return chronology.monthOfYear();
+case DAY_OF_MONTH :
+
+return chronology.dayOfMonth();
+case WEEKYEAR_OF_CENTURY :
+
+return chronology.weekyearOfCentury();
+case WEEKYEAR :
+
+return chronology.weekyear();
+case WEEK_OF_WEEKYEAR :
+
+return chronology.weekOfWeekyear();
+case DAY_OF_WEEK :
+
+return chronology.dayOfWeek();
+case HALFDAY_OF_DAY :
+
+return chronology.halfdayOfDay();
+case HOUR_OF_HALFDAY :
+
+return chronology.hourOfHalfday();
+case CLOCKHOUR_OF_HALFDAY :
+
+return chronology.clockhourOfHalfday();
+case CLOCKHOUR_OF_DAY :
+
+return chronology.clockhourOfDay();
+case HOUR_OF_DAY :
+
+return chronology.hourOfDay();
+case MINUTE_OF_DAY :
+
+return chronology.minuteOfDay();
+case MINUTE_OF_HOUR :
+
+return chronology.minuteOfHour();
+case SECOND_OF_DAY :
+
+return chronology.secondOfDay();
+case SECOND_OF_MINUTE :
+
+return chronology.secondOfMinute();
+case MILLIS_OF_DAY :
+
+return chronology.millisOfDay();
+case MILLIS_OF_SECOND :
+
+return chronology.millisOfSecond();
+default :
+
+throw new InternalError();
+}
+}
+chronology=DateTimeUtils.getChronology(chronology);
+switch (iOrdinal){
+case ERA :
+
+return chronology.era();
+case YEAR_OF_ERA :
+
+return chronology.yearOfEra();
+case CENTURY_OF_ERA :
+
+return chronology.centuryOfEra();
+case YEAR_OF_CENTURY :
+
+return chronology.yearOfCentury();
+case YEAR :
+
+return chronology.year();
+case DAY_OF_YEAR :
+
+return null;
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4738/pattern-ver1-serial/src.tonegod.gui.controls.lists.ComboBox.java-getListItems.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.clockhourOfDay();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
-return chronology.clockhourOfDay();
+return r;
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.minuteOfHour();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
-return chronology.minuteOfHour();
+return r;
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.hourOfDay();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
-return chronology.hourOfDay();
+return r;
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.era();
 switch (iOrdinal){
 case ERA :
 
-return chronology.era();
+return r;
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.year();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
-return chronology.year();
+return r;
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.weekyear();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
-return chronology.weekyear();
+return r;
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.yearOfEra();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
-return chronology.yearOfEra();
+return r;
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.centuryOfEra();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
-return chronology.centuryOfEra();
+return r;
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.yearOfCentury();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
-return chronology.yearOfCentury();
+return r;
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+DateTimeField r=(DateTimeField)chronology.dayOfYear();
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
-return chronology.dayOfYear();
+return r;
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 2, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
 chronology=DateTimeUtils.getChronology(chronology);
+if(chronology==null){
+throw new IllegalStateException("User isn't registered! "+chronology);
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[478,533]
------------Candidate---------------
 public DateTimeField getField(Chronology chronology){
+for(int i=0;i<24;i++){
 chronology=DateTimeUtils.getChronology(chronology);
+}
 switch (iOrdinal){
 case ERA :
 
 return chronology.era();
 case YEAR_OF_ERA :
 
 return chronology.yearOfEra();
 case CENTURY_OF_ERA :
 
 return chronology.centuryOfEra();
 case YEAR_OF_CENTURY :
 
 return chronology.yearOfCentury();
 case YEAR :
 
 return chronology.year();
 case DAY_OF_YEAR :
 
 return chronology.dayOfYear();
 case MONTH_OF_YEAR :
 
 return chronology.monthOfYear();
 case DAY_OF_MONTH :
 
 return chronology.dayOfMonth();
 case WEEKYEAR_OF_CENTURY :
 
 return chronology.weekyearOfCentury();
 case WEEKYEAR :
 
 return chronology.weekyear();
 case WEEK_OF_WEEKYEAR :
 
 return chronology.weekOfWeekyear();
 case DAY_OF_WEEK :
 
 return chronology.dayOfWeek();
 case HALFDAY_OF_DAY :
 
 return chronology.halfdayOfDay();
 case HOUR_OF_HALFDAY :
 
 return chronology.hourOfHalfday();
 case CLOCKHOUR_OF_HALFDAY :
 
 return chronology.clockhourOfHalfday();
 case CLOCKHOUR_OF_DAY :
 
 return chronology.clockhourOfDay();
 case HOUR_OF_DAY :
 
 return chronology.hourOfDay();
 case MINUTE_OF_DAY :
 
 return chronology.minuteOfDay();
 case MINUTE_OF_HOUR :
 
 return chronology.minuteOfHour();
 case SECOND_OF_DAY :
 
 return chronology.secondOfDay();
 case SECOND_OF_MINUTE :
 
 return chronology.secondOfMinute();
 case MILLIS_OF_DAY :
 
 return chronology.millisOfDay();
 case MILLIS_OF_SECOND :
 
 return chronology.millisOfSecond();
 default :
 
 throw new InternalError();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 15:45:14 CDT
--------------- END -----------------
Location : org.joda.time.Partial.with:[447, 448, 449, 445, 446, 443, 444, 439, 440, 441, 442, 432, 433, 436, 437, 438, 456, 457, 458, 459, 460, 461, 464, 465, 466, 430, 431, 427]#0.4082482904638631
Compute Candidate : 2019.09.04 AD at 15:45:33 CDT - 2019.09.04 AD at 17:03:33 CDT , PNumber : 11369, CandNumber : 683 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+continue;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+continue;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+continue;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+continue;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+ DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+ DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
-int i=0;
+ int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/6248/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.pvpstats.StatsListener.java-onQuit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return this;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2420/pattern-ver1-serial/Nian_Karl.QL.src.org.uva.ql.ast.value.Undefined.java-getValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>1){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>1){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>=0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>=0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+return null;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+return null;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+return null;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+return null;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+return null;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(fieldType!=null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;newValues[i]<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;value<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return null;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+long compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=0;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<=iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
+newValues=getField(index).set(this,index,newValues,value);
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i>iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+break;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+break;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+break;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+break;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=2;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare<=0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index<=-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+float compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=3;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField rangeField=loopType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i-1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i-1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length-1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;i--){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(value==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(index==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+value];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+value,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+DateTimeFieldType loopType=iTypes[0];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[0]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare<0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare>=0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index>=-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare!=0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)!=0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=fieldType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/3430/pattern-ver1-serial/org.eclipse.jdt.core.compiler.org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.java-inferFunctionalInterfaceParameterization.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+DateTimeFieldType loopType=iTypes[1];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[1]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[1]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index!=-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare!=0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
-int i=0;
+Integer i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+Integer compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+Integer index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-2);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-2);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-2-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-2-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[0]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=10;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+DateTimeFieldType loopType=iTypes[2];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[2]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[2]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare>0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index>-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-index-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+int index=get(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3069/pattern-ver1-serial/Ejercicio5.2.app.src.main.java.es.iesnervion.ejercicio52.Models.PlayerManager.java-addPlayer.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[value+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,value+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/222/pattern-ver1-serial/src.com.yuval.aiconnotation.FileSystem.java-saveObject.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;i++,new ArrayList<KeyBinding>()){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=100;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>3){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>3){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=i;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/2460/pattern-ver1-serial/modules.extension.xsd.xsd-wfs.src.main.java.org.geotools.wfs.PropertyValueCollection.java-PropertyValueCollection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[(1)];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[(iTypes.length)];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+int[] newValues=new int[(newTypes.length)];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[i]=null;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[newValues[i]]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-2){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField rangeField=newTypes[i].getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=newTypes[i].getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6000/pattern-ver1-serial/src.de.dfki.vsm.editor.Comment.java-Comment.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;index++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(newValues[i]==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)<0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1401/pattern-ver1-serial/XMLC.src.Learner.PLTFH.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
-if(value==getValue(index)){
+if(value>=getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2968/pattern-ver1-serial/src.project4.Critter.java-wrapX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+DurationField loopUnitField=newTypes[i].getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3712/pattern-ver1-serial/src.com.wrathOfLoD.Models.Entity.Character.Character.java-Character.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+3,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+3,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+3];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+i++;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+i++;
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+DurationField unitField=newTypes[i].getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=index;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6978/pattern-ver1-serial/UnionByRankPathCompression.java-union.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+1,newValues.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/4812/pattern-ver1-serial/src.org.rascalmpl.library.experiments.Compiler.RVM.Interpreter.Thrown.java-printStackTrace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;i++,new ArrayList<>()){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+index];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.math.BigDecimal;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(new BigDecimal(0);i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/6932/pattern-ver1-serial/app.src.main.java.book.laborhazirecipe.interactor.RecipeInteractor.java-getRecipesFromNetwork.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==0){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ final int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ final DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+ final DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:18:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+ final DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return new Partial(newPartial);
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6348/pattern-ver1-serial/src.bufmgr.LIRS.java-getReplacementCandidate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ final DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
-int i=0;
+ int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+ DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
-int i=0;
+ int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(!loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(!unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.Iterator;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==-1){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>=0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>=0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+i++;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
+i++;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+i++;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+i++;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(true){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(true){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+i--;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+i--;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.xml.bind.annotation.XmlAccessType;
+
+import javax.xml.bind.annotation.XmlAccessorType;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+value=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3790/pattern-ver1-serial/tools.dbcli.src.main.java.com.emc.storageos.dbcli.wrapper.FSExportMapWrapper.java-setValue.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+synchronized(this){
 newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
+synchronized(this){
 newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[i++]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i++]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+DateTimeFieldType loopType=this.iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
+synchronized(this){
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+synchronized(iChronology){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(i++;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+(int)(1)];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+(int)(1),newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+(int)(1),newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+-1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+-1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+-1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+synchronized(this){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+synchronized(this){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+synchronized(this){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+synchronized(this){
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+synchronized(this){
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return (Partial)(newPartial);
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare<0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
+while(true){
+
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
+while(true){
+
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
+while(true){
+
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
+while(true){
+
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
+while(true){
+
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+break;
 }
+break;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:38:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+break;
 }
 }
+break;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+break;
 }
 }
 }
+break;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+break;
 }
 }
+break;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+i--;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+i--;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+i--;
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+synchronized(this){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
+}
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+synchronized(this){
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+synchronized(this){
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;i++,Charset.forName("UTF-8")){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(iChronology!=null){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(fieldType.equals(null)){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+synchronized(this){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+synchronized(this){
 break;
+}
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
+synchronized(this){
 throw new IllegalArgumentException("The field type must not be null");
+}
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(iChronology==null){
+continue;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/816/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.client.renderer.RendererRelocator.java-renderTileEntityAt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(iChronology==null){
+continue;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/816/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.client.renderer.RendererRelocator.java-renderTileEntityAt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(loopRangeField==null){
+continue;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/816/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.client.renderer.RendererRelocator.java-renderTileEntityAt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
+if(value!=0){
 newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField==null){
+continue;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopType==null){
+continue;
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+ final DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ final int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+ final DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+newTypes[i-1]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i-1]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ @SuppressWarnings("UnusedAssignment") int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ @SuppressWarnings("UnusedAssignment") Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ @SuppressWarnings("UnusedAssignment") int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ @SuppressWarnings("UnusedAssignment") DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
-int i=0;
+ @SuppressWarnings("UnusedAssignment") int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+ @SuppressWarnings("UnusedAssignment") DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
-int[] newValues=getValues();
+ @SuppressWarnings("UnusedAssignment") int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ @SuppressWarnings("UnusedAssignment") int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ @SuppressWarnings("UnusedAssignment") Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
-int index=indexOf(fieldType);
+ @SuppressWarnings("UnusedAssignment") int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ @SuppressWarnings("UnusedAssignment") int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ @SuppressWarnings("UnusedAssignment") DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+fieldType=fieldType;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+loopType=fieldType;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(Locale.forLanguageTag("en");i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/1103/pattern-ver1-serial/src.net.sf.memoranda.util.ContactList.java-ContactList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField!=null){
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,i,newTypes,i+1+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iValues,i,newValues,i+1+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+fieldType=fieldType;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+rangeField=rangeField;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare+value==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare+compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ final DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
-DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ final DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
+ final int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+ final DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+if(i==4){
+continue;
+}
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(true){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(true){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(true){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:46:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(newValues!=null){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(loopUnitField.isSupported()==false){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(unitField.isSupported()==false){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=value*value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType.getRangeDurationType()!=null){
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(newTypes[i]==null){
 newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
-int[] newValues=new int[newTypes.length];
+ final int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+ final DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+ final DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
-Partial newPartial=new Partial(iChronology,newTypes,newValues);
+ final Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=0xEfffffff&(value);
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(newPartial!=null){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/5886/pattern-ver1-serial/nuxeo-android-connector.src.main.java.org.nuxeo.android.documentprovider.LazyDocumentsListImpl.java-queryDocuments.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0/2){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0/2){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+int a=0;
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+int a=0;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+int a=0;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+int a=0;
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
+int a=0;
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:48:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+int a=0;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+int a=0;
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+int a=0;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+int a=0;
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+int a=0;
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType!=null){
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/2797/pattern-ver1-serial/wikibrain-sr.src.main.java.org.wikibrain.sr.ensemble.Interpolator.java-trainSimilarity.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+String OUTSTRING="";
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+String OUTSTRING="";
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+String OUTSTRING="";
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+String OUTSTRING="";
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+String OUTSTRING="";
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+String OUTSTRING="";
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+String OUTSTRING="";
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+String OUTSTRING="";
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+String OUTSTRING="";
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
+String OUTSTRING="";
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index!=0){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
-if(value==getValue(index)){
+if(value!=0){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;){
+i++;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+i++;
+for(;i<iTypes.length;){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
+i++;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+int rangeField=5;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+int iChronology=5;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+int loopRangeField=5;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(fieldType!=null){
 newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/663/pattern-ver1-serial/src.ceprei.appcrawler.config.FileAppCrawlerConfig.java-FileAppCrawlerConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
-DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+DateTimeFieldType[] newTypes=new DateTimeFieldType[(iTypes.length+1)];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(Double.isNaN(compare)){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(Double.isNaN(compare)){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(loopUnitField.isSupported()==true){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(unitField.isSupported()==true){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+value=i;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(;i<iTypes.length;Math.abs(i++)){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(equals(fieldType)){
+return null;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(equals(fieldType)){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(equals(fieldType)){
+return null;
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(equals(fieldType)){
+return null;
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+if(equals(fieldType)){
+return null;
+}
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
+if(equals(fieldType)){
+return null;
+}
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(equals(rangeField)){
+return null;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+int indexSelection=0;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+int indexSelection=0;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+int indexSelection=0;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+int indexSelection=0;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:53:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+int indexSelection=0;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
+int indexSelection=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
+int indexSelection=0;
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.Arrays;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
+DateTimeFieldType loopType=iTypes[i-1];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index<0){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
-if(value==getValue(index)){
+if(value<0){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
+for(Locale.getDefault();i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2664/pattern-ver1-serial/BF4Intel.src.main.java.com.ninetwozero.bf4intel.resources.maps.levels.LevelStringMap.java-get.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.Arrays;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
+Arrays.sort(newValues);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5685/pattern-ver1-serial/src.com.jakutenshi.rmcomix.controllers.ComicsViewController.java-selectComics.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType.equals("sounds")){
+continue;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType.equals("sounds")){
+continue;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.equals("sounds")){
+continue;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index>0){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+int a=1;
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+int a=1;
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+int a=1;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+int a=1;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
+int a=1;
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+int a=1;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+int a=1;
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+int a=1;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+int a=1;
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+int a=1;
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+boolean rangeField=true;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+boolean iChronology=true;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+boolean loopRangeField=true;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+boolean b=true;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+boolean b=true;
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+boolean b=true;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+boolean b=true;
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+boolean b=true;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+boolean b=true;
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
+boolean b=true;
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+boolean b=true;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+boolean b=true;
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+boolean b=true;
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(rangeField==null){
+continue;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType==null){
+continue;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType==null){
+continue;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(rangeField==null){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType==null){
+return null;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType==null){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(loopRangeField==null){
+return null;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+Arrays.fill(newTypes,null);
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V26/7483/pattern-ver1-serial/src.edu.stanford.nlp.util.StringUtils.java-mapStringToArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(fieldType==null){
+return null;
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(fieldType==null){
+return null;
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+if(fieldType==null){
+return null;
+}
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
+if(fieldType==null){
+return null;
+}
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
+if(fieldType==null){
+return null;
+}
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType==null){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(loopType==null){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(loopType==null){
+return null;
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField==null){
+return null;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if("&null".equals(rangeField)){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
+if("&null".equals(fieldType)){
+return null;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if("&null".equals(fieldType)){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+if("&null".equals(fieldType)){
+return null;
+}
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopType==null){
+return null;
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType.getRangeDurationType()==null){
+return null;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType.getRangeDurationType()==null){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(true){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+newValues[i]=0;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+newValues[i]=0;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+newValues[i]=0;
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/4742/pattern-ver1-serial/hw_8_kxh132430.src.kxh132430_P8.java-BellmanFord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 17:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(rangeField.equals("-1")){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0||compare==Long.MIN_VALUE){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0||compare==Long.MIN_VALUE){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1||index==Long.MIN_VALUE){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
-newValues[i]=value;
+newTypes[i++]=fieldType;
+newValues[i++]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3938/pattern-ver1-serial/src.main.java.de.topobyte.osm4j.geometry.CoordinateSequencesBuilder.java-createGeometry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+assert (rangeField!=null);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+assert (fieldType!=null);
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+assert (fieldType!=null);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+assert (fieldType!=null);
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.awt.event.WindowEvent;
+
+import java.net.URL;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
+if(newValues==null){
+return null;
+}
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V37/1495/pattern-ver1-serial/src.com.suntc.tictactoe.ClientGui.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:00:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(Double.isNaN(index)){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType!=null){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType!=null){
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+if(fieldType!=null){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+if(fieldType!=null){
+DateTimeFieldType loopType=iTypes[i];
+DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopUnitField.isSupported()){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
+}
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+if(fieldType!=null){
+for(;i<iTypes.length;i++){
+DateTimeFieldType loopType=iTypes[i];
+DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopUnitField.isSupported()){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
+}
+}
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+if(fieldType!=null){
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+int[] newValues=new int[newTypes.length];
+int i=0;
+DurationField unitField=fieldType.getDurationType().getField(iChronology);
+if(unitField.isSupported()){
+for(;i<iTypes.length;i++){
+DateTimeFieldType loopType=iTypes[i];
+DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopUnitField.isSupported()){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
+}
+}
+System.arraycopy(iTypes,0,newTypes,0,i);
+System.arraycopy(iValues,0,newValues,0,i);
+newTypes[i]=fieldType;
+newValues[i]=value;
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+Partial newPartial=new Partial(iChronology,newTypes,newValues);
+iChronology.validate(newPartial,newValues);
+return newPartial;
+}
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+if(fieldType!=null){
+if(fieldType==null){
+throw new IllegalArgumentException("The field type must not be null");
+}
+int index=indexOf(fieldType);
+if(index==-1){
+DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
+int[] newValues=new int[newTypes.length];
+int i=0;
+DurationField unitField=fieldType.getDurationType().getField(iChronology);
+if(unitField.isSupported()){
+for(;i<iTypes.length;i++){
+DateTimeFieldType loopType=iTypes[i];
+DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopUnitField.isSupported()){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
+}
+}
+System.arraycopy(iTypes,0,newTypes,0,i);
+System.arraycopy(iValues,0,newValues,0,i);
+newTypes[i]=fieldType;
+newValues[i]=value;
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+Partial newPartial=new Partial(iChronology,newTypes,newValues);
+iChronology.validate(newPartial,newValues);
+return newPartial;
+}
+if(value==getValue(index)){
+return this;
+}
+int[] newValues=getValues();
+newValues=getField(index).set(this,index,newValues,value);
+return new Partial(this,newValues);
+}
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType.getName().contains("_")){
+continue;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType.getName().contains("_")){
+continue;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(fieldType.getName().contains("_")){
+continue;
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(fieldType.getName().contains("_")){
+continue;
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(loopType.getName().contains("_")){
+continue;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType.getName().contains("_")){
+continue;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(loopType.getName().contains("_")){
+continue;
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7070/pattern-ver1-serial/framework.api.src.main.java.eu.europeana.uim.UIMRegistry.java-checkPluginForNonStaticMemberVariables.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+if(newValues[i]==0){
+return null;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType.getName().isEmpty()){
+return null;
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType.getName().isEmpty()){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType.getName().isEmpty()){
+return null;
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(loopType.getName().isEmpty()){
+return null;
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+assert (rangeField!=fieldType.getRangeDurationType().getField(iChronology));
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+assert (unitField!=null);
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+assert (loopUnitField!=null);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(this.size()!=0){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3420/pattern-ver1-serial/PP4Is.src.main.java.com.pss.pp4is.layout.content.tables.InspectionDetailTable.java-refreshTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(this.size()!=0){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3420/pattern-ver1-serial/PP4Is.src.main.java.com.pss.pp4is.layout.content.tables.InspectionDetailTable.java-refreshTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+if(this.size()!=0){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3420/pattern-ver1-serial/PP4Is.src.main.java.com.pss.pp4is.layout.content.tables.InspectionDetailTable.java-refreshTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+if(this.size()!=0){
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3420/pattern-ver1-serial/PP4Is.src.main.java.com.pss.pp4is.layout.content.tables.InspectionDetailTable.java-refreshTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+if(this.size()!=0){
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3420/pattern-ver1-serial/PP4Is.src.main.java.com.pss.pp4is.layout.content.tables.InspectionDetailTable.java-refreshTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newValues[i]++;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+newValues[i]++;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+newValues[i]++;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+newValues[i]++;
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+newValues[i]++;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=-1;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+assert (fieldType!=null);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+assert (fieldType!=null);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+assert (fieldType!=null);
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.equals("655")){
+System.out.println();
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(loopRangeField.equals("655")){
+System.out.println();
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(fieldType==null||"查看红包".equals(fieldType)){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0||"查看红包".equals(rangeField.compareTo(loopRangeField))){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0||"查看红包".equals(compare)){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0||"查看红包".equals(compare)){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1||"查看红包".equals(index)){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0||rangeField.compareTo(loopRangeField)==3){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0||compare==3){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0||compare==3){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1||index==3){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(loopUnitField!=null&&loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(unitField!=null&&unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:06:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField!=null&&rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)<0||rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare<0||compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare<0||compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index<0||index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+newValues[i]=value;
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+newTypes[i]=fieldType;
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+newValues[i]=value;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+newValues[i]=value;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+newTypes[i]=fieldType;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+newTypes[i]=fieldType;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+newValues[i]=value;
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+newTypes[i]=fieldType;
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+newValues[i]=value;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+newTypes[i]=fieldType;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+newValues[i]=value;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newValues[i]=value;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+newValues[i]=value;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newValues[i]=value;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(true){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=(value+value)%value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0==false){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+iChronology.validate(newPartial,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0||rangeField.compareTo(loopRangeField)==Long.MIN_VALUE){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if((loopUnitField!=null)&&(loopUnitField.isSupported())){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if((unitField!=null)&&(unitField.isSupported())){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
+newValues[i]=value<0?0:value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return newPartial!=null?newPartial:new Partial();
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0||compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0||rangeField.compareTo(loopRangeField)==0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0||compare==0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1||index==0){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0||rangeField.compareTo(loopRangeField)>9){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0||compare>9){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0||compare>9){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1||index>9){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+newValues[i]=value;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+newTypes[i]=fieldType;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+newValues[i]=value;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+newTypes[i]=fieldType;
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+newTypes[i]=fieldType;
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+newTypes[i]=fieldType;
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+newTypes[i]=fieldType;
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+newTypes[i]=fieldType;
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+newTypes[i]=fieldType;
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0&&rangeField.compareTo(loopRangeField)<4000000){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0&&compare<4000000){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0&&compare<4000000){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1&&index<4000000){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(fieldType==null||fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(Double.isNaN(rangeField.compareTo(loopRangeField))){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return newPartial==null?new Partial():newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0==true){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0&&compare!=9999){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0&&rangeField.compareTo(loopRangeField)!=9999){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0&&compare!=9999){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(index==-1&&index!=9999){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(0>0&&rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(0>0&&compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(0>0&&compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
-if(index==-1){
+if(-1>0&&index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
+if(loopUnitField==null||loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
+if(unitField==null||unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField==null||rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newTypes[i]=fieldType;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newTypes[i]=fieldType;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+newTypes[i]=fieldType;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+newTypes[i]=fieldType;
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+newTypes[i]=fieldType;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+newTypes[i]=fieldType;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+newTypes[i]=fieldType;
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+newTypes[i]=fieldType;
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+assert (rangeField!=null):"Appointments day is not allowed to be null!";
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+assert (fieldType!=null):"Appointments day is not allowed to be null!";
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+assert (fieldType!=null):"Appointments day is not allowed to be null!";
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+assert (fieldType!=null):"Appointments day is not allowed to be null!";
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(loopType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(loopType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(fieldType.getRangeDurationType()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(loopType.getRangeDurationType()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(iChronology==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+if(newValues[i]<0){
+newValues[i]=0;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean haveBreadCrumbs=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0&&haveBreadCrumbs){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare>0-1){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+if(rangeField.compareTo(loopRangeField)>0-1){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
+if(compare==0){
 break;
 }else {
-if(compare==0){
+if(compare>0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5972/pattern-ver1-serial/core.src.com.ru.tgra.assignment2.CannonGame.java-touchUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+newValues[i]=value;
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newValues[i]=value;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+newTypes[i]=fieldType;
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+newTypes[i]=fieldType;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+newValues[i]=value;
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+newValues[i]=value;
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+newTypes[i]=fieldType;
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+newTypes[i]=fieldType;
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+newValues[i]=value;
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+newValues[i]=value;
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
-if(fieldType==null){
+if(fieldType==null&&!fieldType.equals("")){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(newValues!=null&&newPartial!=null){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/523/pattern-ver1-serial/src.se.chalmers.lidkopingsh.model.Order.java-sync.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(fieldType==null){
+fieldType=newTypes[i];
+}else {
 newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(newValues[i]!=value){
 newTypes[i]=fieldType;
-newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+if(newTypes[i]!=fieldType){
 newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(newTypes[i]!=fieldType){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(newValues[i]!=value){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(compare==0){
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+if(newValues[i]!=value){
 iChronology.validate(newPartial,newValues);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(newTypes[i]!=fieldType){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+if(newValues[i]!=value){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+if(newTypes[i]!=fieldType){
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+Partial t=newPartial;
+newPartial=null;
 iChronology.validate(newPartial,newValues);
-return newPartial;
+return t;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
+newValues=newValues;
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1577/pattern-ver1-serial/src.main.java.models.RenameFiles.java-replaceWeirdChar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+if(rangeField==null){
+throw new IllegalStateException("User isn't registered! "+fieldType);
+}
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(loopRangeField==null){
+throw new IllegalStateException("User isn't registered! "+loopType);
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+System.arraycopy(iTypes,0,newTypes,0,i);
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+System.arraycopy(iValues,0,newValues,0,i);
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+System.arraycopy(iValues,0,newValues,0,i);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+System.arraycopy(iTypes,0,newTypes,0,i);
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+System.arraycopy(iValues,0,newValues,0,i);
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iValues,0,newValues,0,i);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iTypes,0,newTypes,0,i);
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iTypes,0,newTypes,0,i);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iTypes,0,newTypes,0,i);
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iTypes,0,newTypes,0,i);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+System.arraycopy(iTypes,0,newTypes,0,i);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+System.arraycopy(iValues,0,newValues,0,i);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+System.arraycopy(iTypes,0,newTypes,0,i);
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+System.arraycopy(iValues,0,newValues,0,i);
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType.getRangeDurationType()!=null){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
 }
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+System.arraycopy(iValues,0,newValues,0,i);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+System.arraycopy(iTypes,0,newTypes,0,i);
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+System.arraycopy(iValues,0,newValues,0,i);
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+System.arraycopy(iTypes,0,newTypes,0,i);
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+System.arraycopy(iValues,0,newValues,0,i);
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
+System.arraycopy(iValues,0,newValues,0,i);
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(loopRangeField==null||rangeField==null){
+return null;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField==null||loopRangeField==null){
+return null;
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iTypes,0,newTypes,0,i);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iValues,0,newValues,0,i);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(fieldType!=null){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
 }
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/2797/pattern-ver1-serial/wikibrain-sr.src.main.java.org.wikibrain.sr.ensemble.Interpolator.java-trainSimilarity.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+try{
 iChronology.validate(newPartial,newValues);
+}finally{
+System.arraycopy(iTypes,0,newTypes,0,i);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+try{
 iChronology.validate(newPartial,newValues);
+}finally{
+System.arraycopy(iValues,0,newValues,0,i);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+try{
 System.arraycopy(iTypes,0,newTypes,0,i);
+}finally{
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
+try{
 System.arraycopy(iValues,0,newValues,0,i);
+}finally{
+System.arraycopy(iTypes,0,newTypes,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+try{
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}finally{
+System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+try{
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}finally{
+System.arraycopy(iTypes,0,newTypes,0,i);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+try{
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}finally{
+System.arraycopy(iValues,0,newValues,0,i);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+try{
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}finally{
+System.arraycopy(iValues,0,newValues,0,i);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+System.arraycopy(iTypes,0,newTypes,0,i);
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean haveBreadCrumbs=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0&&haveBreadCrumbs){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+haveBreadCrumbs=true;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean haveBreadCrumbs=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
+if(compare==0&&haveBreadCrumbs){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+haveBreadCrumbs=true;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField==null||loopRangeField==null){
+throw new NullPointerException();
+}
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iTypes,0,newTypes,0,i);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iTypes,0,newTypes,0,i);
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean succeeded=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
+succeeded=true;
 }
 }
 }
+if(!succeeded){
+return null;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean succeeded=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
+succeeded=true;
 }
 }
+if(!succeeded){
+return null;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+newValues=getField(index).set(this,index,newValues,value);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+if(value==3){
+System.out.println("debug");
+}
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
+if(value==3){
+System.out.println("debug");
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+newValues=getField(index).set(this,index,newValues,value);
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+newValues=getField(index).set(this,index,newValues,value);
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
+newValues=getField(index).set(this,index,newValues,value);
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+newValues=getField(index).set(this,index,newValues,value);
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
-newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(newTypes[i]!=null){
 newTypes[i]=fieldType;
+}
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+boolean haveBreadCrumbs=false;
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
+haveBreadCrumbs=true;
+if(rangeField.compareTo(loopRangeField)>0&&haveBreadCrumbs){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(newTypes[i]==null){
 newTypes[i]=fieldType;
-newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4209/pattern-ver1-serial/app.src.main.java.com.example.sdp11.wmd.DataFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
-newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
-newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+long startTime=System.currentTimeMillis();
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+long startTime=System.currentTimeMillis();
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+long startTime=System.currentTimeMillis();
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
+long startTime=System.currentTimeMillis();
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+long startTime=System.currentTimeMillis();
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+long startTime=System.currentTimeMillis();
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
+long startTime=System.currentTimeMillis();
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+try{
 System.arraycopy(iTypes,0,newTypes,0,i);
+}finally{
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+try{
 System.arraycopy(iTypes,0,newTypes,0,i);
+}finally{
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(iChronology!=null){
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
+try{
 iChronology.validate(newPartial,newValues);
+}finally{
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
+if(iChronology!=null){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+if(iChronology!=null){
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+if(iChronology!=null){
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
+if(iChronology!=null){
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+if(iChronology!=null){
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+try{
 System.arraycopy(iValues,0,newValues,0,i);
+}finally{
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+try{
 System.arraycopy(iValues,0,newValues,0,i);
+}finally{
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 1, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
+System.arraycopy(iTypes,0,newTypes,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
+System.arraycopy(iValues,0,newValues,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V23/4244/pattern-ver1-serial/servlet6.src.main.java.ru.kpfu.itis.servlets.PostServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
+if(newTypes[i]==null){
 newTypes[i]=fieldType;
-newValues[i]=value;
+}
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4209/pattern-ver1-serial/app.src.main.java.com.example.sdp11.wmd.DataFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 8, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 8, INS : 0, DEL : 7
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
+synchronized(this){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 6, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 6, INS : 0, DEL : 11
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
-if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
-}
-}
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 0, DEL : 20
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(iChronology!=null){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
+if(iChronology!=null){
 System.arraycopy(iTypes,0,newTypes,0,i);
+}
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+if(iChronology!=null){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
+if(iChronology!=null){
 System.arraycopy(iValues,0,newValues,0,i);
+}
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5856/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 3, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
+System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
+System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
+System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
+System.arraycopy(iTypes,0,newTypes,0,i);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
-System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 6, INS : 0, DEL : 14
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
+}
 }
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 8, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/7870/pattern-ver1-serial/app.src.main.java.com.mybus.activity.MainActivity.java-onTabSelected.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 8, INS : 0, DEL : 13
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
-break;
-}else {
-if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
-}
-}
-}
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 0, INS : 0, DEL : 23
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 6, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
-System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
-iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 23, UPD : 6, INS : 0, DEL : 17
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
-System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
-System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 6, INS : 0, DEL : 20
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
+synchronized(this){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 28, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
-break;
-}else {
-if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
-}
-}
-}
-}
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 0, DEL : 30
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
+if(loopUnitField.isSupported()){
+int compare=unitField.compareTo(loopUnitField);
+if(compare>0){
+break;
+}else {
+if(compare==0){
+DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
+DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
+if(rangeField.compareTo(loopRangeField)>0){
+break;
+}
+}
+}
+}
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V18/1214/pattern-ver1-serial/src.main.java.cz.vutbr.web.domassign.SingleMapNodeData.java-toString.pattern
MATCHLEVEL : ALL
ALL : 31, UPD : 0, INS : 1, DEL : 30
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
+synchronized(this){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
+}
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 45, UPD : 45, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
-if(unitField.isSupported()){
-for(;i<iTypes.length;i++){
-DateTimeFieldType loopType=iTypes[i];
-DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
-if(loopUnitField.isSupported()){
-int compare=unitField.compareTo(loopUnitField);
-if(compare>0){
-break;
-}else {
-if(compare==0){
-DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
-DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
-if(rangeField.compareTo(loopRangeField)>0){
-break;
-}
-}
-}
-}
-}
-}
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 0, DEL : 47
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+synchronized(this){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
+}
 }
 if(value==getValue(index)){
 return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 123, UPD : 123, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[412,474]
------------Candidate---------------
 public Partial with(DateTimeFieldType fieldType,int value){
 if(fieldType==null){
 throw new IllegalArgumentException("The field type must not be null");
 }
 int index=indexOf(fieldType);
 if(index==-1){
+return this;
+}
+if(value==getValue(index)){
 DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
 int[] newValues=new int[newTypes.length];
 int i=0;
 DurationField unitField=fieldType.getDurationType().getField(iChronology);
 if(unitField.isSupported()){
 for(;i<iTypes.length;i++){
 DateTimeFieldType loopType=iTypes[i];
 DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
 if(loopUnitField.isSupported()){
 int compare=unitField.compareTo(loopUnitField);
 if(compare>0){
 break;
 }else {
 if(compare==0){
 DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
 DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
 if(rangeField.compareTo(loopRangeField)>0){
 break;
 }
 }
 }
 }
 }
 }
 System.arraycopy(iTypes,0,newTypes,0,i);
 System.arraycopy(iValues,0,newValues,0,i);
 newTypes[i]=fieldType;
 newValues[i]=value;
 System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i-1);
 System.arraycopy(iValues,i,newValues,i+1,newValues.length-i-1);
 Partial newPartial=new Partial(iChronology,newTypes,newValues);
 iChronology.validate(newPartial,newValues);
 return newPartial;
-}
-if(value==getValue(index)){
-return this;
 }
 int[] newValues=getValues();
 newValues=getField(index).set(this,index,newValues,value);
 return new Partial(this,newValues);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 124, UPD : 124, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:34:50 CDT
--------------- END -----------------
Location : org.joda.time.field.BaseDurationField.compareTo:[150, 155, 146, 147, 149, 152]#0.31622776601683794
Compute Candidate : 2019.09.04 AD at 18:35:08 CDT - 2019.09.04 AD at 18:42:58 CDT , PNumber : 11386, CandNumber : 139 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+ long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
-long thisMillis=getUnitMillis();
+ long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return 1;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(otherMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return Integer.MIN_VALUE;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return Integer.MIN_VALUE;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return Integer.MAX_VALUE;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return Integer.MAX_VALUE;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis!=otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5117/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcManager.java-vdcPropertiesChanged.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+Long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/3545/pattern-ver1-serial/nifi-nar-bundles.nifi-framework-bundle.nifi-framework.nifi-framework-core.src.main.java.org.apache.nifi.controller.StandardFlowFileQueue.java-summarize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
-long thisMillis=getUnitMillis();
+Long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/3545/pattern-ver1-serial/nifi-nar-bundles.nifi-framework-bundle.nifi-framework.nifi-framework-core.src.main.java.org.apache.nifi.controller.StandardFlowFileQueue.java-summarize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<=otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/5349/pattern-ver1-serial/Primes.java-isPrime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+double otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2627/pattern-ver1-serial/src.main.java.org.elasticsearch.search.aggregations.context.FieldDataSource.java-swap.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
-long thisMillis=getUnitMillis();
+double thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2627/pattern-ver1-serial/src.main.java.org.elasticsearch.search.aggregations.context.FieldDataSource.java-swap.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis>otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/5868/pattern-ver1-serial/src.com.pandoroid.pandora.PandoraRadio.java-isGetPlaylistCallValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis!=otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return 100;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return 100;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return -1;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return -1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
-long thisMillis=getUnitMillis();
+ final long otherMillis=otherField.getUnitMillis();
+ final long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
-long thisMillis=getUnitMillis();
+ long otherMillis=otherField.getUnitMillis();
+ long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+otherMillis++;
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+thisMillis++;
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+otherMillis--;
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+thisMillis--;
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField valueAnimator){
+long otherMillis=valueAnimator.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3559/pattern-ver1-serial/library.src.main.java.qiu.niorgai.StatusBarCompatLollipop.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+compareTo(otherField);
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField edge){
+long otherMillis=edge.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1943/pattern-ver1-serial/violet-framework.src.main.java.com.horstmann.violet.product.diagram.abstracts.node.AbstractNode.java-addConnection.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField methodOpeningBrace){
+long otherMillis=methodOpeningBrace.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-hasTryFinallyBlock.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField mpR){
+long otherMillis=mpR.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/2030/pattern-ver1-serial/app.src.main.java.com.example.andreas.mainview.slashy.SlashyActivity.java-onCompletion.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return (int)(0);
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return (int)(1);
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField methodAST){
+long otherMillis=methodAST.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck.java-isMainMethodParameters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField managerFactory){
+long otherMillis=managerFactory.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1774/pattern-ver1-serial/src.main.java.com.spontaneous.server.SpontaneousApplication.java-sessionFactory.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+synchronized(this){
 if(thisMillis==otherMillis){
 return 0;
+}
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
+synchronized(this){
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return 1;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return 0;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4540/pattern-ver1-serial/core-cube.src.main.java.org.apache.kylin.gridtable.GTScanRangePlanner.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
-public int compareTo(DurationField otherField){
-long otherMillis=otherField.getUnitMillis();
+public int compareTo(DurationField methodOpeningBraceToken){
+long otherMillis=methodOpeningBraceToken.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-isMethodEmpty.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+otherField=this;
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+synchronized(this){
 return 0;
+}
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
+synchronized(this){
 return -1;
+}
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
+otherField=otherField;
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+thisMillis=thisMillis;
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+otherMillis=otherMillis;
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return 0&0xff;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
-return 1;
+return 1&0xff;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+otherMillis=1000;
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+thisMillis=1000;
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(true){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(true){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+int a=0;
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
+int a=0;
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
+int a=0;
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+int a=0;
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+String OUTSTRING="";
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+String OUTSTRING="";
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
+String OUTSTRING="";
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
+String OUTSTRING="";
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
-return -1;
+return 0;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
-return -1;
+return 1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(Double.isNaN(thisMillis)){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(Double.isNaN(thisMillis)){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
-return 0;
+return -1;
 }
 if(thisMillis<otherMillis){
-return -1;
+return 0;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
-return -1;
-}else {
 return 1;
+}else {
+return -1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/6158/pattern-ver1-serial/src.main.java.com.vaguehope.onosendai.model.TweetListAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+if(equals(otherField)){
+return 0;
+}
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(equals(otherMillis)){
+return 0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+return 0;
+}
+if(equals(otherMillis)){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(equals(thisMillis)){
+return 0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+return 0;
+}
+if(equals(thisMillis)){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
+int indexSelection=0;
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+int a=1;
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
+int a=1;
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
+int a=1;
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+int a=1;
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+boolean b=true;
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+boolean b=true;
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
+boolean b=true;
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
+boolean b=true;
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis-1){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+if(otherField==null){
+return 0;
+}
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+if("index".equals(otherField)){
+return 0;
+}
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if("index".equals(otherMillis)){
+return 0;
+}
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if("index".equals(thisMillis)){
+return 0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(otherMillis<0){
+return 0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+return 0;
+}
+if(otherMillis<0){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(thisMillis<0){
+return 0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
+return 0;
+}
+if(thisMillis<0){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||thisMillis==Long.MIN_VALUE){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||thisMillis==Long.MIN_VALUE){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+assert (otherField!=null);
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+if(otherField!=null){
+long otherMillis=otherField.getUnitMillis();
+long thisMillis=getUnitMillis();
+if(thisMillis==otherMillis){
+return 0;
+}
+if(thisMillis<otherMillis){
+return -1;
+}else {
+return 1;
+}
+}
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+assert (otherMillis!=otherField.getUnitMillis());
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+assert (thisMillis!=getUnitMillis());
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+assert (otherField!=null);
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if((Thread.currentThread().interrupted())){
+return 0;
+}
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||"查看红包".equals(thisMillis)){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||"查看红包".equals(thisMillis)){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||thisMillis==3){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||thisMillis==3){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis<0||thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<0||thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||thisMillis==0){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||thisMillis==0){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||thisMillis>9){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||thisMillis>9){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis&&thisMillis<4000000){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis&&thisMillis<4000000){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis&&thisMillis!=9999){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis&&thisMillis!=9999){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(otherMillis>0&&thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(otherMillis>0&&thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+assert (otherMillis>=0):"Receive a negative tratment";
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+assert (thisMillis>=0):"Receive a negative tratment";
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+assert (otherField!=null):"Appointments day is not allowed to be null!";
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+assert (otherMillis!=0):"Receive a size tratment";
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+assert (thisMillis!=0):"Receive a size tratment";
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
-if(thisMillis==otherMillis){
+if(thisMillis==otherMillis||thisMillis=='"'){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
-if(thisMillis<otherMillis){
+if(thisMillis<otherMillis||thisMillis=='"'){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+if(otherField==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(otherMillis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(otherMillis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(thisMillis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(thisMillis>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(otherMillis<=0){
+otherMillis=1;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(otherMillis<=0){
+otherMillis=1;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(thisMillis<=0){
+thisMillis=1;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(thisMillis<=0){
+thisMillis=1;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(otherMillis>thisMillis){
+otherMillis=thisMillis;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(thisMillis>otherMillis){
+thisMillis=otherMillis;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(otherMillis>thisMillis){
+otherMillis=thisMillis;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
+}
+if(thisMillis>otherMillis){
+thisMillis=otherMillis;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if(otherMillis==3){
+System.out.println("debug");
+}
+if(otherMillis==3){
+System.out.println("debug");
+}
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
+if(thisMillis==3){
+System.out.println("debug");
+}
+if(thisMillis==3){
+System.out.println("debug");
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if(otherMillis<0){
+otherMillis--;
+}
 long thisMillis=getUnitMillis();
+if(thisMillis<0){
+thisMillis--;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if(otherMillis<3){
+otherMillis=3;
+}
 long thisMillis=getUnitMillis();
+if(thisMillis<3){
+thisMillis=3;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
 long otherMillis=otherField.getUnitMillis();
+if(otherMillis<0){
+otherMillis=0;
+}
 long thisMillis=getUnitMillis();
+if(thisMillis<0){
+thisMillis=0;
+}
 if(thisMillis==otherMillis){
 return 0;
 }
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/field/BaseDurationField.java[145,157]
------------Candidate---------------
 public int compareTo(DurationField otherField){
+long startTime=System.currentTimeMillis();
 long otherMillis=otherField.getUnitMillis();
 long thisMillis=getUnitMillis();
 if(thisMillis==otherMillis){
 return 0;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(thisMillis<otherMillis){
 return -1;
 }else {
 return 1;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:54:59 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeFieldType.getRangeDurationType:[457]#0.22941573387056174
Compute Candidate : 2019.09.04 AD at 18:55:17 CDT - 2019.09.04 AD at 18:58:15 CDT , PNumber : 11280, CandNumber : 9 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
-return iRangeType;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
-return iRangeType;
+return this.iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
-return iRangeType;
+return this.getRangeDurationType();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
+this.getRangeDurationType();
 return iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
-return iRangeType;
+return (DurationFieldType)(iRangeType);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
+int a=0;
 return iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
+String OUTSTRING="";
 return iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
+int a=1;
 return iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[455,458]
------------Candidate---------------
 public DurationFieldType getRangeDurationType(){
+boolean b=true;
 return iRangeType;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 18:59:05 CDT
--------------- END -----------------
Location : org.joda.time.DateTimeFieldType.clockhourOfDay:[227]#0.20412414523193154
Compute Candidate : 2019.09.04 AD at 18:59:26 CDT - 2019.09.04 AD at 19:02:39 CDT , PNumber : 11280, CandNumber : 6 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
-return CLOCKHOUR_OF_DAY_TYPE;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
-return CLOCKHOUR_OF_DAY_TYPE;
+return (DateTimeFieldType)(CLOCKHOUR_OF_DAY_TYPE);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
+int a=0;
 return CLOCKHOUR_OF_DAY_TYPE;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
+String OUTSTRING="";
 return CLOCKHOUR_OF_DAY_TYPE;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
+int a=1;
 return CLOCKHOUR_OF_DAY_TYPE;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/DateTimeFieldType.java[221,228]
------------Candidate---------------
 public static DateTimeFieldType clockhourOfDay(){
+boolean b=true;
 return CLOCKHOUR_OF_DAY_TYPE;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:03:13 CDT
--------------- END -----------------
Location : org.joda.time.Partial.Partial:[296, 297, 298, 299, 300]#0.1796053020267749
Compute Candidate : 2019.09.04 AD at 19:03:33 CDT - 2019.09.04 AD at 19:08:28 CDT , PNumber : 11289, CandNumber : 71 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=null;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=null;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+synchronized(this){
 iChronology=chronology;
+}
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
+synchronized(this){
 iTypes=types;
+}
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+synchronized(this){
 iValues=values;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology bindingModes,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=bindingModes;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] bindingModes,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=bindingModes;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] bindingModes){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology collectorManager,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=collectorManager;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] collectorManager,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=collectorManager;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] collectorManager){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=values.clone();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2165/pattern-ver1-serial/catroid.src.org.catrobat.catroid.devices.arduino.common.firmata.message.I2cReplyMessage.java-setBinaryData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=types.clone();
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/52/pattern-ver1-serial/src.nl.esciencecenter.diffevo.ListOfParameterCombinations.java-setModelResults.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology parentFileShare,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=parentFileShare;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] parentFileShare,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=parentFileShare;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] parentFileShare){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology pIssued,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=pIssued;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] pIssued,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=pIssued;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] pIssued){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology Pin,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=Pin;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] Pin,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=Pin;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] Pin){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology graphdbInput,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=graphdbInput;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] graphdbInput,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=graphdbInput;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] graphdbInput){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology thePrescribeMedicationCntl,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=thePrescribeMedicationCntl;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] thePrescribeMedicationCntl,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=thePrescribeMedicationCntl;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] thePrescribeMedicationCntl){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology pScore,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=pScore;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] pScore,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=pScore;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] pScore){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology pterm,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=pterm;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] pterm,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=pterm;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] pterm){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology boid,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+iChronology=boid;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] boid,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+iTypes=boid;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
-Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
+Partial(Chronology chronology,DateTimeFieldType[] types,int[] boid){
 super();
 iChronology=chronology;
 iTypes=types;
-iValues=values;
+iValues=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+chronology=chronology;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+chronology=chronology;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+types=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+values=values;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+int iChronology=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+int iTypes=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+int iValues=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+int indexSelection=0;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+boolean iChronology=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+boolean iTypes=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+boolean iValues=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
+try{
 iTypes=types;
+}finally{
+iChronology=chronology;
+}
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
-iChronology=chronology;
 iTypes=types;
+try{
 iValues=values;
+}finally{
+iChronology=chronology;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+try{
 iChronology=chronology;
+}finally{
 iTypes=types;
+}
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+try{
 iChronology=chronology;
-iTypes=types;
+}finally{
 iValues=values;
+}
+iTypes=types;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
-iTypes=types;
+try{
 iValues=values;
+}finally{
+iTypes=types;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
+try{
 iTypes=types;
+}finally{
 iValues=values;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:15:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+assert (chronology!=null);
 iChronology=chronology;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+assert (types!=null);
 iChronology=chronology;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+assert (values!=null);
 iChronology=chronology;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+if(chronology==null||types==null){
+throw new NullPointerException();
+}
 iChronology=chronology;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
+if(chronology==null||values==null){
+throw new NullPointerException();
+}
 iChronology=chronology;
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
+if(types==null||chronology==null){
+throw new NullPointerException();
+}
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
+if(types==null||values==null){
+throw new NullPointerException();
+}
 iTypes=types;
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+if(values==null||chronology==null){
+throw new NullPointerException();
+}
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
+if(values==null||types==null){
+throw new NullPointerException();
+}
 iValues=values;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/time/time_4_buggy/src/main/java/org/joda/time/Partial.java[286,300]
------------Candidate---------------
 Partial(Chronology chronology,DateTimeFieldType[] types,int[] values){
 super();
 iChronology=chronology;
 iTypes=types;
 iValues=values;
+values[28]=(byte)0x88;
+values[29]=0x58;
+values[30]=0x01;
+values[31]=0x00;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.joda.time.TestPartial_Basics::testWith3]
---------START : 2019.09.04 AD at 14:21:57 CDT
---------TIME : 2019.09.04 AD at 19:17:11 CDT
--------------- END -----------------
Finish : time-4 > patch : 5 | Start : Wed Sep 04 14:21:57 CDT 2019 | End : 2019.09.04 AD at 19:17:11 CDT
