Following diff 6:
-if(codes[i]!=0){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(codes[i]!=0){
-break;
-}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 6:
-break;
+if(i<=maxCode){
+break;
+}
Following diff 6:
-break;
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 6:
-break;
+if(i>=maxCode){
+break;
+}
Following diff 6:
-break;
+if(codes[outPtr]!=0){
+break;
+}
Following diff 6:
-break;
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 6:
-break;
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 6:
-break;
+if(_bufferRecyclable){
+break;
+}
Following diff 6:
-break;
+if(!_tokenIncomplete){
+break;
+}
Following diff 6:
-break;
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 6:
-break;
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete&&codes[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>=maxCode){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[outPtr]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_bufferRecyclable&&codes[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_tokenIncomplete){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_bufferRecyclable){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_bufferRecyclable){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode&&codes[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<=maxCode){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_tokenIncomplete&&codes[i]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[outPtr]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!_bufferRecyclable&&codes[i]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_inputBuffer[i]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[_nameStartRow]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_bufferRecyclable){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_tokenIncomplete){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!_bufferRecyclable){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!_tokenIncomplete){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode&&codes[i]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 6:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 8:
-if(codes[i]!=0){
-break;
-}
Following diff 8:
-break;
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 8:
-break;
+if(i<=maxCode){
+break;
+}
Following diff 8:
-break;
+if(i>=maxCode){
+break;
+}
Following diff 8:
-break;
+if(codes[outPtr]!=0){
+break;
+}
Following diff 8:
-break;
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 8:
-break;
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 8:
-break;
+if(_bufferRecyclable){
+break;
+}
Following diff 8:
-break;
+if(!_tokenIncomplete){
+break;
+}
Following diff 8:
-break;
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 8:
-break;
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete&&codes[i]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>=maxCode){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[outPtr]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_bufferRecyclable&&codes[i]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_bufferRecyclable){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!_tokenIncomplete){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_bufferRecyclable){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode&&codes[i]!=0){
+break;
+}
Following diff 8:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 8:
-if(codes[i]!=0){
-break;
-}
Following diff 22:
-if(codes[i]!=0){
-break;
-}
Following diff 22:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 22:
-if(codes[i]!=0){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(codes[i]!=0){
-break;
-}
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(codes[i]!=0){
-break;
-}
-break;
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
Following diff 22:
+if(!(i>maxCode||codes[outPtr]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(i>=maxCode||codes[i]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(i>=maxCode||codes[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode||codes[outPtr]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(codes[outPtr]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(i>=maxCode){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(i<maxCode)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(!(codes[outPtr]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(i>=maxCode){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode||codes[_nameStartRow]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
+if(!(_inputBuffer[i]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(_bufferRecyclable||codes[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(i>maxCode||codes[_nameStartRow]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
+if(!(!this.nextBooleanValue())){
+break;
+}
Following diff 22:
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
Following diff 22:
+if(!(this._loadMore())){
+break;
+}
Following diff 22:
+if(!this._loadMore()){
+break;
+}
Following diff 22:
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 22:
+if(!(this._skipYAMLComment())){
+break;
+}
Following diff 22:
+if(!this._skipYAMLComment()){
+break;
+}
Following diff 22:
+if(this.nextBooleanValue()){
+break;
+}
Following diff 22:
+if(!(this.nextBooleanValue())){
+break;
+}
Following diff 22:
+if(!this.nextBooleanValue()){
+break;
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[outPtr]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode||codes[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[outPtr]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[outPtr]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[outPtr]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[outPtr]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode||codes[i]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode||codes[i]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode||codes[i]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode||codes[i]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode||codes[i]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[outPtr]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode||codes[i]==0)){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode||codes[i]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||_inputBuffer[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[_nameStartRow]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||_inputBuffer[i]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||_inputBuffer[i]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[_nameStartRow]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||_inputBuffer[i]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[outPtr]==0)){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[outPtr]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[outPtr]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_inputBuffer[i]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[_nameStartRow]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[_nameStartRow]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode||codes[_nameStartRow]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i<maxCode)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(codes[outPtr]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(_inputBuffer[i]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_inputBuffer[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_bufferRecyclable||codes[i]==0){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[outPtr]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(codes[outPtr]==0)){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||codes[_nameStartRow]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode)){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i<maxCode)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(codes[outPtr]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(codes[outPtr]==0)){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i<maxCode){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>=maxCode)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_inputBuffer[i]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_inputBuffer[i]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>=maxCode){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[outPtr]==0){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(codes[outPtr]==0){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(_bufferRecyclable||codes[i]==0){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(_inputBuffer[i]==0)){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 22:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(!(i>maxCode||_inputBuffer[i]==0)){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
+}
Following diff 31:
-if(i<=maxCode){
+if(i>maxCode){
Following diff 31:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+else{
+if(codes[i]==0){
+break;
+}
+}
Following diff 31:
-if(codes[i]!=0){
-break;
-}
Following diff 31:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
Following diff 31:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(i<=maxCode){
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
+if(i>maxCode){
Following diff 31:
-if(i<=maxCode){
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(codes[i]!=0){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>=maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 31:
+if(!(this._loadMore())){
+break;
+}
Following diff 31:
+if(!(this.nextBooleanValue())){
+break;
+}
Following diff 31:
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
Following diff 31:
+if(!this.nextBooleanValue()){
+break;
+}
Following diff 31:
+if(!this._loadMore()){
+break;
+}
Following diff 31:
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
+if(!this._skipYAMLComment()){
+break;
+}
Following diff 31:
+if(!(!this.nextBooleanValue())){
+break;
+}
Following diff 31:
+if(!(this._skipYAMLComment())){
+break;
+}
Following diff 31:
+if(this.nextBooleanValue()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(Character.isJavaIdentifierPart(c))){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(!this.nextBooleanValue())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(!this._loadMore())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(this._skipYAMLComment())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!this._loadMore()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(this._loadMore())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(this._skipYAMLComment()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!this._skipYAMLComment()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(this.nextBooleanValue()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(this.nextBooleanValue())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!this.nextBooleanValue()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(this._loadMore()){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(!this._skipYAMLComment())){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
Following diff 31:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 31:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 35:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
Following diff 35:
-if(codes[i]!=0){
-break;
-}
Following diff 35:
+if(i>=maxCode){
+break;
+}
Following diff 35:
+if(!(i<maxCode&&codes[i]!=0)){
+break;
+}
Following diff 35:
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 35:
+if(codes[outPtr]!=0){
+break;
+}
Following diff 35:
+if(!(i<maxCode)){
+break;
+}
Following diff 35:
+if(!(_tokenIncomplete&&codes[i]!=0)){
+break;
+}
Following diff 35:
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 35:
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 35:
+if(!(_tokenIncomplete)){
+break;
+}
Following diff 35:
+if(_bufferRecyclable){
+break;
+}
Following diff 35:
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 35:
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 35:
+if(i<=maxCode){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[_nameStartRow]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<=maxCode&&_inputBuffer[i]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete&&codes[i]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<maxCode&&codes[i]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>=maxCode){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<=maxCode)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[outPtr]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i>=maxCode)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<=maxCode&&codes[_nameStartRow]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<maxCode)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(codes[outPtr]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_inputBuffer[i]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(_tokenIncomplete&&codes[i]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(_inputBuffer[i]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(codes[_nameStartRow]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(codes[_nameStartRow]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(_tokenIncomplete)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(_bufferRecyclable)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_bufferRecyclable){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode&&codes[i]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&codes[outPtr]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(!(i<=maxCode&&codes[outPtr]!=0)){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode&&_inputBuffer[i]!=0){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<=maxCode){
+break;
+}
Following diff 35:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
Following diff 38:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<codes.length){
+if(codes[i]!=0){
+break;
+}
+}
Following diff 38:
-_textBuffer.resetWithShared(_inputBuffer,startPtr,(_inputPtr-startPtr));
-finalintmaxCode=codes.length;
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<codes.length){
+if(codes[i]!=0){
+break;
+}
+}
Following diff 42:
-if(codes[i]!=0){
-break;
-}
Following diff 42:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+else{
+if(codes[i]!=0){
+break;
+}
+}
Following diff 42:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
Following diff 42:
-if(i<=maxCode){
+if(i>maxCode){
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
+if(i>maxCode){
Following diff 42:
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 42:
-if(i<=maxCode){
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
+if(i>maxCode){
Following diff 42:
-if(codes[i]!=0){
-break;
-}
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 42:
-if(i<=maxCode){
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
Following diff 42:
-if(i<=maxCode){
-elseif(!Character.isJavaIdentifierPart(c)){
-break;
-}
+if(i>maxCode){
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(_tokenIncomplete){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>=maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i<maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 42:
-if(i<=maxCode){
-if(codes[i]!=0){
-break;
-}
-}
+if(i>maxCode){
+if(!Character.isJavaIdentifierPart(c)){
+break;
+}
+}
Following diff 42:
+if(!this._skipYAMLComment()){
+break;
+}
Following diff 42:
+if(!this._loadMore()){
+break;
+}
Following diff 42:
+if(!(this.nextBooleanValue())){
+break;
+}
Following diff 42:
+if(!(!this.nextBooleanValue())){
+break;
+}
Following diff 42:
+if(!(this._loadMore())){
+break;
+}
Following diff 42:
+if(!(!Character.isJavaIdentifierPart(c))){
+break;
+}
Following diff 42:
+if(!(this._skipYAMLComment())){
+break;
+}
Following diff 42:
+if(!this.nextBooleanValue()){
+break;
+}
Following diff 42:
+if(this.nextBooleanValue()){
+break;
+}
Following diff 42:
+if(Character.isJavaIdentifierPart(c)){
+break;
+}
