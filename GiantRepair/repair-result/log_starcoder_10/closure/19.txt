Repair : closure_19
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/0.java
Following are 0th generated patches:
Validating 7 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType("this",type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

1 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 00:56:28 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

2 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 00:56:28 HKT
--------------- END -----------------
Following are 1th generated patches:
Validating 1 patches...
Following are 2th generated patches:
Validating 123 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

3 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType("this",type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

4 th patch/134
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

5 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

6 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

7 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

8 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.EMPTY_TYPE_COMPONENT);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

9 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

10 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

11 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

12 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,VOID_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

13 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

14 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,NULL_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

15 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

16 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

17 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.findUniqueRefinedSlot(scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

18 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.toStringTree();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

19 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getJSType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

20 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictNullVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

21 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.append(nextLink);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

22 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

23 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

24 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

25 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

26 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getTypeIfRefinable(node,scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

27 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

28 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

29 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

30 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

31 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictUndefinedVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

32 th patch/134
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

33 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

34 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

35 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

36 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

37 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

38 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

39 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

40 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

41 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

42 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

43 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

44 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

45 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.UNKNOWN_NAME);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

46 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

47 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

48 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

49 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

50 th patch/134
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

51 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

52 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_CLASS);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

53 th patch/134
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:01:08 HKT
--------------- END -----------------
Following are 3th generated patches:
Validating 2 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

54 th patch/136
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:02:16 HKT
--------------- END -----------------
Following are 4th generated patches:
Validating 1 patches...
Tested:131 patches
Compile failed:65 patches
Compilation rate:0.5038167938931297
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/1.java
Following are 0th generated patches:
Validating 7 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

55 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:03:27 HKT
--------------- END -----------------
Following are 1th generated patches:
Validating 399 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getParent(),scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

56 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getLastSibling(),scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

57 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.detachFromParent(),scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

58 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneTree(),scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

59 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneNode(),scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

60 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getParent(),scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

61 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node,scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

62 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getLastSibling(),scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

63 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.detachFromParent(),scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

64 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node,scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

65 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneNode(),scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

66 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node,scope.optimize());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

67 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneTree(),scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

68 th patch/260
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:05:58 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneNode(),scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

69 th patch/409
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:07:48 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.cloneTree(),scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

70 th patch/409
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:07:48 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getParent(),scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

71 th patch/409
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:07:48 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.getLastSibling(),scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

72 th patch/409
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:07:48 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
getTypeIfRefinable(node.detachFromParent(),scope.createChildFlowScope());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

73 th patch/409
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:07:48 HKT
--------------- END -----------------
Following are 2th generated patches:
Validating 398 patches...
Following are 3th generated patches:
Validating 398 patches...
Following are 4th generated patches:
Validating 397 patches...
Tested:1595 patches
Compile failed:1131 patches
Compilation rate:0.2909090909090909
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/2.java
Following are 0th generated patches:
Validating 7 patches...
Following are 1th generated patches:
Validating 878 patches...
Following are 2th generated patches:
Validating 1000 patches...
Following are 3th generated patches:
Validating 756 patches...
Following are 4th generated patches:
Validating 878 patches...
Tested:3514 patches
Compile failed:2413 patches
Compilation rate:0.313318155947638
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/3.java
Following are 0th generated patches:
Validating 7 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

74 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:22:09 HKT
--------------- END -----------------
Following are 1th generated patches:
Validating 122 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

75 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

76 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

77 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

78 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,NULL_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

79 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

80 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.EMPTY_TYPE_COMPONENT);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

81 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

82 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

83 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

84 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

85 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,VOID_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

86 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

87 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

88 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

89 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

90 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

91 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

92 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

93 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

94 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

95 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

96 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.toStringTree();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

97 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.findUniqueRefinedSlot(scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

98 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getTypeIfRefinable(node,scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

99 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

100 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getJSType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

101 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

102 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

103 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

104 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

105 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.append(nextLink);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

106 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

107 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

108 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictUndefinedVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

109 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

110 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

111 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

112 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

113 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

114 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictNullVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

115 th patch/132
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

116 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

117 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

118 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

119 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

120 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

121 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

122 th patch/132
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_CLASS);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

123 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.UNKNOWN_NAME);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

124 th patch/132
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:26:39 HKT
--------------- END -----------------
Following are 2th generated patches:
Validating 2 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

125 th patch/134
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:27:46 HKT
--------------- END -----------------
Following are 3th generated patches:
Validating 1 patches...
Following are 4th generated patches:
Validating 1 patches...
Tested:130 patches
Compile failed:65 patches
Compilation rate:0.5
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/4.java
Following are 0th generated patches:
Validating 7 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

126 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:29:01 HKT
--------------- END -----------------
Following are 1th generated patches:
Validating 1 patches...
Following are 2th generated patches:
Validating 122 patches...
Following are 3th generated patches:
Validating 123 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

127 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

128 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

129 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

130 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

131 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

132 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

133 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

134 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

135 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

136 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

137 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,NULL_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

138 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.EMPTY_TYPE_COMPONENT);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

139 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

140 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,VOID_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

141 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

142 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

143 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

144 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

145 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

146 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

147 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

148 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

149 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

150 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.findUniqueRefinedSlot(scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

151 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

152 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

153 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

154 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

155 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

156 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

157 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

158 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

159 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

160 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

161 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getTypeIfRefinable(node,scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

162 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictUndefinedVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

163 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictNullVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

164 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getJSType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

165 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.toStringTree();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

166 th patch/256
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

167 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

168 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

169 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

170 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.UNKNOWN_NAME);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

171 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_CLASS);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

172 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.append(nextLink);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

173 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

174 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

175 th patch/256
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

176 th patch/256
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:34:02 HKT
--------------- END -----------------
Following are 4th generated patches:
Validating 122 patches...
Tested:371 patches
Compile failed:251 patches
Compilation rate:0.32345013477088946
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/5.java
Following are 0th generated patches:
Validating 78 patches...
Following are 1th generated patches:
Validating 1000 patches...
Following are 2th generated patches:
Validating 1000 patches...
Following are 3th generated patches:
Validating 1000 patches...
Following are 4th generated patches:
Validating 1000 patches...
Tested:4015 patches
Compile failed:3387 patches
Compilation rate:0.1564134495641345
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/6.java
Following are 0th generated patches:
Validating 7 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

177 th patch/10
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:44:02 HKT
--------------- END -----------------
Following are 1th generated patches:
Validating 127 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

178 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

179 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

180 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.EMPTY_TYPE_COMPONENT);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

181 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

182 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.createChildFlowScope();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

183 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

184 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

185 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,VOID_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

186 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

187 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

188 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

189 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

190 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

191 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

192 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

193 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.toStringTree();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

194 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
typeRegistry.createUnionType(OBJECT_TYPE,NUMBER_TYPE,STRING_TYPE,BOOLEAN_TYPE,NULL_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

195 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type.restrictByNotNullOrUndefined());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

196 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getFirst();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

197 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.append(nextLink);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

198 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.findUniqueRefinedSlot(scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

199 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictNullVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

200 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

201 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
type.visit(restrictUndefinedVisitor);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

202 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.optimize();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

203 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getTypeIfRefinable(node,scope);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

204 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

205 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

206 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

207 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

208 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

209 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
node.getJSType();
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

210 th patch/137
Trace:
ExpressionStmt;MethodInv;MethodInvForVar(OTHER)
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

211 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.EMPTY_TYPE_COMPONENT,type);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

212 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

213 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

214 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

215 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_TYPE);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

216 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.NOT_A_CLASS);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

217 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

218 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

219 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

220 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getNativeTypeForTypeOf(JSType.UNKNOWN_NAME);
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

221 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

222 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

223 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_TYPE,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

224 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autobox());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

225 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutNull(type.collapseUnion());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

226 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.UNKNOWN_NAME,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

227 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

228 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
this.getRestrictedWithoutUndefined(type.unboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

229 th patch/137
Trace:
ExpressionStmt;MethodInv;THISMETHOD
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
scope.inferSlotType(JSType.NOT_A_CLASS,type.autoboxesTo());
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

230 th patch/137
Trace:
ExpressionStmt;MethodInv;SCOPEMETHODINV;MethodInv;MethodInvForVar
START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:48:36 HKT
--------------- END -----------------
Following are 2th generated patches:
Validating 126 patches...
Following are 3th generated patches:
Validating 125 patches...
Following are 4th generated patches:
Validating 126 patches...
Tested:507 patches
Compile failed:393 patches
Compilation rate:0.22485207100591717
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/7.java
Following are 0th generated patches:
Validating 4 patches...
Following are 1th generated patches:
Validating 1000 patches...
Following are 2th generated patches:
Validating 121 patches...
Following are 3th generated patches:
Validating 1 patches...
Following are 4th generated patches:
Validating 120 patches...
Tested:1245 patches
Compile failed:546 patches
Compilation rate:0.5614457831325301
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder/closure_19/8.java
Following are 0th generated patches:
Validating 3 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//closure/closure_19_buggy/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
SUCCESS
//Following are generated patch:
  protected void declareNameInScope(  FlowScope scope,  Node node,  JSType type){
switch (node.getType()) {
case Token.NAME:
      scope.inferSlotType(node.getString(),type);
    break;
case Token.GETPROP:
  String qualifiedName=node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType=node.getJSType();
origType=origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node,qualifiedName,origType,type);
break;
case Token.THIS :
break;
default :
throw new IllegalArgumentException("Node cannot be refined. \n" + node.toStringTree());
}
}

231 th patch/6
Trace:

START : 
2023.12.08 AD at 00:55:15 HKT
---------TIME : 
2023.12.08 AD at 01:55:51 HKT
--------------- END -----------------
Patch number exceeds the limit!
Tested 3 patches
Compile failed 1 patches
Compilation rate0.6666666666666666
Patch number exceeds the limit!
Tested 3 patches
Compile failed 1 patches
Compilation rate0.6666666666666666
Tested:3 patches
Compile failed:1 patches
Compilation rate:0.6666666666666666
Current file:/data/PLM4APR/codex_out/200_patches_starcoder/closure_19/9.java
Patch number exceeds the limit!
Tested 0 patches
Compile failed 0 patches
Compilation rateNaN
Finish : closure-19 > patch : 231 | Start : Fri Dec 08 00:55:15 HKT 2023 | End : 2023.12.08 AD at 01:55:51 HKT
