Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,Math.min(cs1.length(),cs2.length()),cs2,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs2,0,Math.min(cs1.length(),cs2.length()));
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs1,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs1,0,Math.min(cs1.length(),cs2.length()));
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs2,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs2,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,Math.min(cs1.length(),cs2.length()),cs1,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,Math.min(cs1.length(),cs2.length()),cs1,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,Math.min(cs1.length(),cs2.length()),cs2,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs1,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs1,0,Math.min(cs1.length(),cs2.length()));
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,Math.min(cs1.length(),cs2.length()),cs1,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,Math.min(cs1.length(),cs2.length()),cs2,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,Math.min(cs1.length(),cs2.length()),cs1,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs1,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs2,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs1,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,Math.min(cs1.length(),cs2.length()),cs2,Math.min(cs1.length(),cs2.length()),0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs2,false,0,cs2,0,0);
Following diff 7:
-returncs1.equals(cs2);
+if(cs1instanceofString&&cs2instanceofString){
+returncs1.equals(cs2);
+}
+returnCharSequenceUtils.regionMatches(cs1,false,0,cs2,0,Math.min(cs1.length(),cs2.length()));
