Following diff 0:
-if(value!=null){
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
Following diff 0:
-if(value!=null){
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(NodeUtil.isImmutableValue(value)&&value.getNext()==null){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&value!=null&&NodeUtil.isImmutableValue(value)&&value.isEquivalentTo(value)){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&value!=null&&NodeUtil.isImmutableValue(value)&&callTarget.isName()){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&value!=null&&NodeUtil.isImmutableValue(value)&&n.isCall()){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&value!=null&&NodeUtil.isImmutableValue(value)&&n.hasChildren()){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&value!=null&&NodeUtil.isImmutableValue(value)&&this.isPure(value)){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value!=null&&(NodeUtil.isImmutableValue(value)||value.isFunction())&&(value.getNext()==null)){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&NodeUtil.isImmutableValue(value)&&value!=null){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
Following diff 0:
-if(value!=null){
-Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
-n.getParent().replaceChild(n,addition);
-reportCodeChange();
-returnaddition;
-}
+if(value.getNext()==null&&NodeUtil.isImmutableValue(value)){
+Nodeaddition=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
+n.getParent().replaceChild(n,addition);
+reportCodeChange();
+returnaddition;
+}
