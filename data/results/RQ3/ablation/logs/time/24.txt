Repair : time_24
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/0.java
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/1.java
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 0th generated patches:
Validating 91 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 36millis-=offset;

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 39if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 40message="Cannot parse \""+text+"\": "+message;

Tested:95 patches
Compile failed:63 patches
Compilation rate:0.3368421052631579
NNNNNNNNNNNPNPNNNPNNPNPPPPNNNPNNNNNNNNNNNNNNNNPNNNPPNNNPPNPPNNNNPNNNNNNNNPPNPPPNPNPPNPPPPPPNPNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/2.java
Current actions:
DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

Following are 0th generated patches:
Validating 36 patches...
Current actions:
INSERT:
15:return set(savedFields,count,iMillis,resetFields);
TO:
14

DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

DELETE:
Original line: 16return computeMillis(resetFields,text);

INSERT:
20:millis=set(savedFields,count,millis,resetFields);
TO:
20

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

Following are 1th generated patches:
Validating 5 patches...
Current actions:
INSERT:
15:return set(savedFields,count,iMillis,resetFields);
TO:
14

DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

DELETE:
Original line: 16return computeMillis(resetFields,text);

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
15:return set(savedFields,count,iMillis,resetFields);
TO:
14

DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

DELETE:
Original line: 16return computeMillis(resetFields,text);

Following are 4th generated patches:
Validating 3 patches...
Current actions:
INSERT:
15:return set(savedFields,count,iMillis,resetFields);
TO:
14

DELETE:
Original line: 16return computeMillis(resetFields,text);

DELETE:
Original line: 22millis=savedFields[i].set(millis,resetFields);

Tested:135 patches
Compile failed:91 patches
Compilation rate:0.32592592592592595
NNNNNNNNNNNNNNNNNNNNNNNNPPPNPPPPPPPPNNPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/3.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 1th generated patches:
Validating 200 patches...
Tested:336 patches
Compile failed:290 patches
Compilation rate:0.13690476190476192
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/4.java
Current actions:
INSERT:
15:int baseYear=iDefaultYear;
TO:
14

Following are 0th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
15:saveField(DateTimeFieldType.year(),iDefaultYear);
TO:
16:saveField(DateTimeFieldType.year(),baseYear);

DELETE:
Original line: 16return computeMillis(resetFields,text);

INSERT:
17:long millis=computeMillis(resetFields,text);
TO:
15

INSERT:
19:return millis;
TO:
15

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 16return computeMillis(resetFields,text);

INSERT:
17:long millis=computeMillis(resetFields,text);
TO:
15

Following are 2th generated patches:
Validating 15 patches...
Current actions:
INSERT:
15:int baseYear=iDefaultYear;
TO:
14

UPDATE
FROM:
15:saveField(DateTimeFieldType.year(),iDefaultYear);
TO:
16:saveField(DateTimeFieldType.year(),baseYear);

INSERT:
17:long millis=computeMillis(resetFields,text);
TO:
15

INSERT:
18:resetField(DateTimeFieldType.year(),baseYear);
TO:
15

INSERT:
19:return millis;
TO:
15

Following are 3th generated patches:
Validating 200 patches...
Tested:790 patches
Compile failed:707 patches
Compilation rate:0.10506329113924051
NNNNNNNNNNNNNNNNNNNNNNNNNNPPNNPNPPPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNPNPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/5.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(iMillis);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(iMillis);

UPDATE
FROM:
36:millis-=offset;
TO:
36:millis+=offset;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
36:millis-=offset;
TO:
36:millis+=offset;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(iMillis);

Following are 3th generated patches:
Validating 200 patches...
Tested:1194 patches
Compile failed:1105 patches
Compilation rate:0.0745393634840871
PPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/6.java
Current actions:
Wrap:
MethodDeclaration
On:
[for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}, long millis=iMillis;, {
millis-=iOffset;
}, if(iZone==null){
millis-=iOffset;
}, millis-=iOffset;]
Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
if(iZone==null){
millis-=iOffset;
}
else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
return millis;
}
TO:
1

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
if(iZone==null){
millis-=iOffset;
}
else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
return millis;
}
TO:
1

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 25catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 29throw e;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 26if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}

DELETE:
Original line: 29throw e;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 26if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}

Tested:1212 patches
Compile failed:1114 patches
Compilation rate:0.08085808580858085
NNNNNNNPPPPPPPNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/7.java
Current actions:
INSERT:
45:if(resetFields){
if(count==1&&iSavedFields[0].iField==DateTimeFieldType.weekyear()){
iSavedFields[0].reset(millis);
}
}
TO:
44

Following are 0th generated patches:
Validating 3 patches...
Current actions:
INSERT:
45:if(resetFields){
if(count==1&&iSavedFields[0].iField==DateTimeFieldType.weekyear()){
iSavedFields[0].reset(millis);
}
}
TO:
44

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
46:if(count==1&&iSavedFields[0].iField==DateTimeFieldType.weekyear()){
iSavedFields[0].reset(millis);
}
TO:
44

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
47:iSavedFields[0].reset(millis);
TO:
44

Following are 3th generated patches:
Validating 1 patches...
Tested:1616 patches
Compile failed:1518 patches
Compilation rate:0.06064356435643564
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/8.java
Current actions:
DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

Following are 0th generated patches:
Validating 61 patches...
Current actions:
INSERT:
23:if(resetFields){
iSavedFieldsCount=0;
}
TO:
24

Following are 1th generated patches:
Validating 8 patches...
Current actions:
INSERT:
20:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

INSERT:
23:if(resetFields){
iSavedFieldsCount=0;
}
TO:
24

DELETE:
Original line: 25catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

Following are 2th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
20:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 26if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}

Following are 4th generated patches:
Validating 2 patches...
Current actions:
INSERT:
20:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

Tested:1672 patches
Compile failed:1564 patches
Compilation rate:0.0645933014354067
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/9.java
Current actions:
DELETE:
Original line: 32millis-=iOffset;

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

Following are 0th generated patches:
Validating 1 patches...
Tested:1674 patches
Compile failed:1564 patches
Compilation rate:0.06571087216248507
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/10.java
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 0th generated patches:
Validating 11 patches...
Current actions:
INSERT:
31:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
30

Following are 1th generated patches:
Validating 42 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

INSERT:
31:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
30

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 3th generated patches:
Validating 44 patches...
Current actions:
INSERT:
31:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
30

DELETE:
Original line: 32millis-=iOffset;

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 4th generated patches:
Validating 44 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Tested:1812 patches
Compile failed:1644 patches
Compilation rate:0.09271523178807947
NPPPPPPPPPPNNNNNNNNNNNNPNNNNNNPNNPNNPNPNPPPPNPNPPPPPPNNNNNNNNNNNNNNNNNNNPPNNPNPNNPNNPPPPPNPPPPPPNNNNNNNNNNNNNNPNNNNNPNPNNPPNNPPPPPNNPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/11.java
Current actions:
Wrap:
MethodDeclaration
On:
[int offset=iZone.getOffsetFromLocal(millis);, millis-=offset;, if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}, return millis;, throw e;, {
millis-=iOffset;
}, if(iZone==null){
millis-=iOffset;
}]
Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
return millis;
}
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
return millis;
}
TO:
1

DELETE:
Original line: 29throw e;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 36millis-=offset;

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 45return millis;

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
return millis;
}
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
return millis;
}
TO:
1

DELETE:
Original line: 29throw e;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

INSERT:
32:return millis;
TO:
31

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 36millis-=offset;

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 45return millis;

Following are 2th generated patches:
Validating 23 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
return millis;
}
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
return millis;
}
TO:
1

DELETE:
Original line: 29throw e;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

DELETE:
Original line: 45return millis;

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

Following are 4th generated patches:
Validating 1 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
return millis;
}
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
return millis;
}
TO:
1

DELETE:
Original line: 29throw e;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

INSERT:
32:return millis;
TO:
31

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 36millis-=offset;

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 45return millis;

Tested:1844 patches
Compile failed:1669 patches
Compilation rate:0.09490238611713665
NNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/12.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 0th generated patches:
Validating 7 patches...
Current actions:
UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
36:if(offset!=iZone.getOffsetFromLocal(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

DELETE:
Original line: 36millis-=offset;

UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
36:if(offset!=iZone.getOffsetFromLocal(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 36millis-=offset;

UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
36:if(offset!=iZone.getOffsetFromLocal(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 3th generated patches:
Validating 200 patches...
Tested:2451 patches
Compile failed:2251 patches
Compilation rate:0.08159934720522236

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/13.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
36:millis-=offset;
TO:
36:millis+=offset;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

UPDATE
FROM:
36:millis-=offset;
TO:
36:millis+=offset;

Following are 3th generated patches:
Validating 200 patches...
Tested:2855 patches
Compile failed:2649 patches
Compilation rate:0.07215411558669002
PPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/14.java
Current actions:
DELETE:
Original line: 32millis-=iOffset;

Following are 0th generated patches:
Validating 14 patches...
Current actions:
UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
35:if(offset!=iZone.getOffset(millis+iOffset)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

DELETE:
Original line: 36millis-=offset;

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
35:if(offset!=iZone.getOffset(millis+iOffset)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 36millis-=offset;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 32millis-=iOffset;

UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
34:int offset=iZone.getOffset(millis);

UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
35:if(offset!=iZone.getOffset(millis+iOffset)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 36millis-=offset;

Following are 4th generated patches:
Validating 200 patches...
Tested:3469 patches
Compile failed:3230 patches
Compilation rate:0.06889593542807726

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/15.java
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
4:if(iSavedFieldsCount>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=iSavedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
iValues[4]=iDefaultYear;
millis=computeMillis(resetFields,text);
}
}
TO:
2

Following are 1th generated patches:
Validating 20 patches...
Current actions:
INSERT:
3:long millis=iMillis;
TO:
2

INSERT:
4:if(iSavedFieldsCount>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=iSavedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
iValues[4]=iDefaultYear;
millis=computeMillis(resetFields,text);
}
}
TO:
2

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

UPDATE
FROM:
13:DurationField first=savedFields[0].iField.getDurationField();
TO:
7:DurationField first=iSavedFields[0].iField.getDurationField();

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

INSERT:
14:millis=iSavedFields[i].set(millis,resetFields);
TO:
24

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 25catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

Following are 2th generated patches:
Validating 28 patches...
Current actions:
INSERT:
3:long millis=iMillis;
TO:
2

DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

INSERT:
4:if(iSavedFieldsCount>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=iSavedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
iValues[4]=iDefaultYear;
millis=computeMillis(resetFields,text);
}
}
TO:
2

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

UPDATE
FROM:
13:DurationField first=savedFields[0].iField.getDurationField();
TO:
7:DurationField first=iSavedFields[0].iField.getDurationField();

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

INSERT:
14:millis=iSavedFields[i].set(millis,resetFields);
TO:
24

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 25catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

Following are 3th generated patches:
Validating 31 patches...
Current actions:
INSERT:
3:long millis=iMillis;
TO:
2

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

UPDATE
FROM:
13:DurationField first=savedFields[0].iField.getDurationField();
TO:
7:DurationField first=iSavedFields[0].iField.getDurationField();

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 16return computeMillis(resetFields,text);

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

DELETE:
Original line: 21for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 27e.prependMessage("Cannot parse \""+text+'"');

DELETE:
Original line: 29throw e;

Following are 4th generated patches:
Validating 9 patches...
Current actions:
UPDATE
FROM:
13:DurationField first=savedFields[0].iField.getDurationField();
TO:
7:DurationField first=iSavedFields[0].iField.getDurationField();

INSERT:
13:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}
TO:
24

DELETE:
Original line: 25catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

Tested:3708 patches
Compile failed:3406 patches
Compilation rate:0.081445523193096
NNNNNNNNNNNPPPPPNPPPPPNNNNNNPNPPPPPPPNPPNNNNPPNPPPPPNPPPPNNNNNNPNPPPNNPNNPPPPNPNPPPPNNNNPNNNNNNNNNPPPNNPNNNPNPPNNNNNNNNNNNNNNNNNNNNNNPNNNNNPPNPPNNNNNNNNPNNNNNNNNNNPPNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/16.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(iMillis);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(iMillis);

Following are 1th generated patches:
Validating 200 patches...
Tested:3909 patches
Compile failed:3605 patches
Compilation rate:0.07776925044768483
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/17.java
Current actions:
INSERT:
3:if(iChrono==null){
return computeMillis(resetFields,text);
}
TO:
2

Following are 0th generated patches:
Validating 2 patches...
Current actions:
INSERT:
3:if(iChrono==null){
return computeMillis(resetFields,text);
}
TO:
2

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
4:return computeMillis(resetFields,text);
TO:
2

Following are 2th generated patches:
Validating 200 patches...
Tested:4311 patches
Compile failed:4004 patches
Compilation rate:0.0712131755973092
NPNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/18.java
Current actions:
DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:if(iSavedFieldsShared){
savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
TO:
20

Following are 1th generated patches:
Validating 144 patches...
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 4int count=iSavedFieldsCount;

INSERT:
5:SavedField[] savedFields=iSavedFields;
TO:
20

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
6:int count=iSavedFieldsCount;
TO:
20

INSERT:
7:if(iSavedFieldsShared){
savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
TO:
20

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

INSERT:
11:sort(savedFields,count);
TO:
20

Following are 2th generated patches:
Validating 150 patches...
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 4int count=iSavedFieldsCount;

INSERT:
5:SavedField[] savedFields=iSavedFields;
TO:
20

INSERT:
6:int count=iSavedFieldsCount;
TO:
20

DELETE:
Original line: 7iSavedFieldsShared=false;

INSERT:
9:iSavedFieldsShared=false;
TO:
20

DELETE:
Original line: 11DurationField months=DurationFieldType.months().getField(iChrono);

DELETE:
Original line: 12DurationField days=DurationFieldType.days().getField(iChrono);

Following are 3th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
6:int count=iSavedFieldsCount;
TO:
20

INSERT:
8:savedFields=(SavedField[])iSavedFields.clone();
TO:
20

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

INSERT:
11:sort(savedFields,count);
TO:
20

Following are 4th generated patches:
Validating 39 patches...
Current actions:
DELETE:
Original line: 7iSavedFieldsShared=false;

INSERT:
9:iSavedFieldsShared=false;
TO:
20

DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

Tested:4719 patches
Compile failed:4341 patches
Compilation rate:0.08010171646535283
NNNNNNNNNNPPPPPPPNPNNPPNNNNNNNPPPNNPPPPNNPNPPPPPPNPNPNPPPPNNNPPPPPNPNNNPNNPPPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNPNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/19.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffsetFromLocal(millis);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffsetFromLocal(millis);

Following are 0th generated patches:
Validating 1 patches...
Tested:4721 patches
Compile failed:4341 patches
Compilation rate:0.0804914213090447
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/20.java
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis0(resetFields,text);
}
TO:
2

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:if(iZone!=null){
int offset=iZone.getOffset(iMillis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
20

Following are 2th generated patches:
Validating 40 patches...
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
8:if(iZone!=null){
int offset=iZone.getOffset(iMillis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
20

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
20:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 3th generated patches:
Validating 55 patches...
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis0(resetFields,text);
}
TO:
2

DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
8:if(iZone!=null){
int offset=iZone.getOffset(iMillis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
20

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
20:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 36millis-=offset;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis0(resetFields,text);
}
TO:
2

DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
8:if(iZone!=null){
int offset=iZone.getOffset(iMillis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
20

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
19:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
20:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Tested:5389 patches
Compile failed:4920 patches
Compilation rate:0.08702913341992949
NNNNNNNNNNNNNNNNNNPPNPPPPNPPPPPNNNNPPPNPPPPNNPPNPPPNPNPPNPPNPPPPPPNPNNPPNPPNPPPNPPPPPNNPNPNPNPPPNPNNPPNNPNPNNPNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNPNNNNPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPPNNNNNNNNNNNNNNNNNNNNNNNPNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPPNPNNPNNPPPNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/21.java
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

Following are 0th generated patches:
Validating 188 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

DELETE:
Original line: 45return millis;

Following are 1th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 38String message="Illegal instant due to time zone offset transition ("+iZone+')';

DELETE:
Original line: 42throw new IllegalArgumentException(message);

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

INSERT:
31:return millis+iOffset;
TO:
30

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

DELETE:
Original line: 45return millis;

Following are 3th generated patches:
Validating 43 patches...
Current actions:
DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

DELETE:
Original line: 45return millis;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
INSERT:
31:return millis+iOffset;
TO:
30

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Tested:5619 patches
Compile failed:5119 patches
Compilation rate:0.08898380494749955
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNPNNNNNPNPNPNNPPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPPPPNPNNNNNNNNNPPNPPPNNPPNNNNNNNNNNNPPNNNNNNNPNNNPPNNNNNNNNNPPPNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/22.java
Current actions:
INSERT:
33:millis-=iChrono.getZone().getOffset(millis);
TO:
32

Following are 0th generated patches:
Validating 1 patches...
Current actions:
INSERT:
33:millis-=iChrono.getZone().getOffset(millis);
TO:
32

Following are 1th generated patches:
Validating 31 patches...
Tested:5651 patches
Compile failed:5149 patches
Compilation rate:0.08883383471951867
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/23.java
Current actions:
DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

Following are 0th generated patches:
Validating 1 patches...
Tested:5653 patches
Compile failed:5149 patches
Compilation rate:0.08915620024765611
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/24.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffsetMillis(millis);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
37:if(offset!=iZone.getOffsetMillis(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffsetMillis(millis);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffsetMillis(millis);

UPDATE
FROM:
37:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
37:if(offset!=iZone.getOffsetMillis(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 3th generated patches:
Validating 200 patches...
Tested:6256 patches
Compile failed:5752 patches
Compilation rate:0.08056265984654731

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/25.java
Current actions:
INSERT:
45:if(resetFields){
setValues(millis);
}
TO:
44

Following are 0th generated patches:
Validating 2 patches...
Current actions:
INSERT:
45:if(resetFields){
setValues(millis);
}
TO:
44

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
46:setValues(millis);
TO:
44

Following are 2th generated patches:
Validating 200 patches...
Tested:6658 patches
Compile failed:6100 patches
Compilation rate:0.08380895163712827
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNPNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNPNNNNPNPPPPPPPNPPNNPPPPPPPPPPNNNNNNNNPNPNNNNNNNNNPPPPPPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNPNNNNPNNNNNPNPNNPNNPNNNPNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/26.java
Current actions:
Move
FROM:
Former Line 19:long millis=iMillis;
TO:
Current Line 2:Block

Following are 0th generated patches:
Validating 85 patches...
Current actions:
INSERT:
4:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
2

Following are 1th generated patches:
Validating 42 patches...
Current actions:
INSERT:
3:long millis=iMillis;
TO:
2

INSERT:
4:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
2

UPDATE
FROM:
32:millis-=iOffset;
TO:
6:millis-=offset;

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 2th generated patches:
Validating 67 patches...
Current actions:
INSERT:
3:long millis=iMillis;
TO:
2

INSERT:
4:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
2

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 3th generated patches:
Validating 44 patches...
Current actions:
INSERT:
4:if(iZone!=null){
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
TO:
2

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Following are 4th generated patches:
Validating 44 patches...
Current actions:
INSERT:
7:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
32

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

Tested:6868 patches
Compile failed:6292 patches
Compilation rate:0.08386721025043681
NNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPNNNNNPNPPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/27.java
Current actions:
INSERT:
3:if(iMillis==Long.MIN_VALUE){
return Long.MIN_VALUE;
}
TO:
2

Following are 0th generated patches:
Validating 36 patches...
Current actions:
INSERT:
3:if(iMillis==Long.MIN_VALUE){
return Long.MIN_VALUE;
}
TO:
2

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:if(iMillis==Long.MIN_VALUE){
return Long.MIN_VALUE;
}
TO:
2

DELETE:
Original line: 12DurationField days=DurationFieldType.days().getField(iChrono);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:if(iMillis==Long.MIN_VALUE){
return Long.MIN_VALUE;
}
TO:
2

DELETE:
Original line: 11DurationField months=DurationFieldType.months().getField(iChrono);

DELETE:
Original line: 12DurationField days=DurationFieldType.days().getField(iChrono);

INSERT:
14:DurationField months=iChrono.months();
TO:
10

Following are 3th generated patches:
Validating 200 patches...
Tested:7504 patches
Compile failed:6921 patches
Compilation rate:0.07769189765458422

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/28.java
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis(resetFields);
}
TO:
2

Following are 0th generated patches:
Validating 148 patches...
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis(resetFields);
}
TO:
2

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 34else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}

INSERT:
36:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
30

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
4:return computeMillis(resetFields);
TO:
2

INSERT:
6:long millis=iMillis;
TO:
2

DELETE:
Original line: 19long millis=iMillis;

INSERT:
36:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
30

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:if(iZone==null){
return computeMillis(resetFields);
}
TO:
2

INSERT:
6:long millis=iMillis;
TO:
2

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 31if(iZone==null){
millis-=iOffset;
}

DELETE:
Original line: 35int offset=iZone.getOffsetFromLocal(millis);

INSERT:
36:if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
TO:
30

DELETE:
Original line: 37if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
4:return computeMillis(resetFields);
TO:
2

INSERT:
6:long millis=iMillis;
TO:
2

DELETE:
Original line: 19long millis=iMillis;

Tested:8151 patches
Compile failed:7545 patches
Compilation rate:0.07434670592565329
NNNNNNPNPPPPNNPNNNNNNNNNPPPNNNPNNNPPNNPNNNPPPPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/29.java
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
5:if(resetFields){
millis=0;
}
TO:
20

Following are 1th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
9:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 11DurationField months=DurationFieldType.months().getField(iChrono);

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
9:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

INSERT:
5:if(resetFields){
millis=0;
}
TO:
20

DELETE:
Original line: 6iSavedFields=savedFields=(SavedField[])iSavedFields.clone();

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
8:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

DELETE:
Original line: 14if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

Following are 4th generated patches:
Validating 18 patches...
Current actions:
DELETE:
Original line: 6iSavedFields=savedFields=(SavedField[])iSavedFields.clone();

DELETE:
Original line: 7iSavedFieldsShared=false;

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
9:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 13DurationField first=savedFields[0].iField.getDurationField();

DELETE:
Original line: 16return computeMillis(resetFields,text);

Tested:8376 patches
Compile failed:7688 patches
Compilation rate:0.08213944603629417
NNNNNNNNPPPPPPPPPPNNNNNNNNNNPPNNNPPPNNPPNPPNNNNNNPNNNNNNNPNNNNNNNNNNNPNPNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNPPPPPPPPPPPNNNPPPPPPPPPNPPPNPPNPPPNPNPPPPPPNPPPNPPPPPPPPPPPPPPPNPNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/30.java
Current actions:
Wrap:
MethodDeclaration
On:
[long millis=iMillis;, {
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}, {
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
millis-=iOffset;
}
else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
return millis;
}, DurationField months=DurationFieldType.months().getField(iChrono);, DurationField days=DurationFieldType.days().getField(iChrono);, if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}, {
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}, return computeMillis(resetFields,text);]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
4:{
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=getFieldType(0).getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),2000);
return computeMillis(resetFields,text);
}
for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}
}
TO:
2

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
12:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
13:millis=iSavedFields[i].set(millis,resetFields);

Following are 1th generated patches:
Validating 12 patches...
Current actions:
DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 6iSavedFields=savedFields=(SavedField[])iSavedFields.clone();

DELETE:
Original line: 7iSavedFieldsShared=false;

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
12:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
13:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

Following are 2th generated patches:
Validating 13 patches...
Current actions:
DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

INSERT:
4:{
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=getFieldType(0).getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),2000);
return computeMillis(resetFields,text);
}
for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}
}
TO:
2

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 5if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}

INSERT:
7:DurationField first=getFieldType(0).getDurationField();
TO:
12

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 20{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
13:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 15saveField(DateTimeFieldType.year(),iDefaultYear);

Following are 4th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:public long computeMillis(boolean resetFields,String text){
long millis=iMillis;
try{
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=getFieldType(0).getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),2000);
return computeMillis(resetFields,text);
}
for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
millis-=iOffset;
}
else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
return millis;
}
TO:
1

DELETE:
Original line: 2{
SavedField[] savedFields=iSavedFields;
int count=iSavedFieldsCount;
if(iSavedFieldsShared){
iSavedFields=savedFields=(SavedField[])iSavedFields.clone();
iSavedFieldsShared=false;
}
sort(savedFields,count);
if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}
long millis=iMillis;
try{
for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
}catch(IllegalFieldValueException e){
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}
if(iZone==null){
millis-=iOffset;
}
else{
int offset=iZone.getOffsetFromLocal(millis);
millis-=offset;
if(offset!=iZone.getOffset(millis)){
String message="Illegal instant due to time zone offset transition ("+iZone+')';
if(text!=null){
message="Cannot parse \""+text+"\": "+message;
}
throw new IllegalArgumentException(message);
}
}
return millis;
}

DELETE:
Original line: 3SavedField[] savedFields=iSavedFields;

DELETE:
Original line: 4int count=iSavedFieldsCount;

DELETE:
Original line: 6iSavedFields=savedFields=(SavedField[])iSavedFields.clone();

DELETE:
Original line: 7iSavedFieldsShared=false;

INSERT:
7:DurationField first=getFieldType(0).getDurationField();
TO:
12

DELETE:
Original line: 9sort(savedFields,count);

DELETE:
Original line: 10if(count>0){
DurationField months=DurationFieldType.months().getField(iChrono);
DurationField days=DurationFieldType.days().getField(iChrono);
DurationField first=savedFields[0].iField.getDurationField();
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}
}

UPDATE
FROM:
21:for(int i=0;i<count;i++){
millis=savedFields[i].set(millis,resetFields);
}
TO:
12:for(int i=0;i<iSavedFieldsCount;i++){
millis=iSavedFields[i].set(millis,resetFields);
}

UPDATE
FROM:
22:millis=savedFields[i].set(millis,resetFields);
TO:
13:millis=iSavedFields[i].set(millis,resetFields);

DELETE:
Original line: 19long millis=iMillis;

DELETE:
Original line: 25{
if(text!=null){
e.prependMessage("Cannot parse \""+text+'"');
}
throw e;
}

Tested:8706 patches
Compile failed:7974 patches
Compilation rate:0.08407994486560992
NNNNNNNNNPPNPPPNPPPPPNNNNNNNNNNNPNPNNNNPNNPPNPNNNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNPPPPPPPPPNNNPPNPPNPPNPPPPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/31.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

DELETE:
Original line: 36millis-=offset;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:int offset=iZone.getOffset(millis);

Following are 2th generated patches:
Validating 200 patches...
Tested:9109 patches
Compile failed:8372 patches
Compilation rate:0.08090899110769569
PPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/time_24/32.java
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffset(iMillis);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
35:int offset=iZone.getOffsetFromLocal(millis);
TO:
35:long offset=iZone.getOffset(iMillis);

Following are 1th generated patches:
Validating 200 patches...
Tested:9310 patches
Compile failed:8571 patches
Compilation rate:0.07937701396348013
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : time-24 > patch : 0 | Start : Sun Apr 07 06:52:48 HKT 2024 | End : 2024.04.07 AD at 07:11:54 HKT
