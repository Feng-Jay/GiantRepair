Repair : math_3
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 13 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 25 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 14 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:174 patches
Compile failed:174 patches
Compilation rate:0.0
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:sHighPrev=sHighCur+prodHighNext;
TO:
29

Following are 1th generated patches:
Validating 52 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
18:sHighPrev=sHighCur+prodHighNext;
TO:
29

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
21:sLowSum+=a[i+1]*b[i]-(prodHighCur-sPrime)-(sHighPrev-sPrime);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
13:double sLowSum=a[1]*b[0]-(prodHighCur-sPrime)-(sHighPrev-sPrime);
TO:
26

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
16:prodHighCur=prodHighNext;

INSERT:
20:prodLowSum+=a[i]*b[i+1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);
TO:
31

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
9:double prodHighNext=prodHigh[1]=a[1]*b[1];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:double sLowSum=a[1]*b[0]-(prodHighCur-sPrime)-(sHighPrev-sPrime);
TO:
26

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
16:prodHighCur=prodHighNext;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

INSERT:
17:prodHighNext=prodHigh[i+1]=a[i+1]*b[i+1];
TO:
29

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 4th generated patches:
Validating 200 patches...
Tested:1016 patches
Compile failed:963 patches
Compilation rate:0.05216535433070866
NNNNNNNNNNNNNNNNNNNNNNPNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNPPPNNPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNPPNPPPNPNPNPNPNPPNNNNNNNNNNNNNPPPNPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNPNNNNPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 83 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 85 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 4th generated patches:
Validating 4 patches...
Current actions:
INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Tested:1448 patches
Compile failed:1373 patches
Compilation rate:0.05179558011049724
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNPNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 65 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 8 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 76 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:1762 patches
Compile failed:1676 patches
Compilation rate:0.04880817253121453
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPNPPPPNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 129 patches...
Current actions:
UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighCur-prodHigh[i+1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 2th generated patches:
Validating 169 patches...
Current actions:
UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighCur-prodHigh[i+1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 3th generated patches:
Validating 200 patches...
Tested:2450 patches
Compile failed:2244 patches
Compilation rate:0.08408163265306122
NNNNNNNNNNNNPPPPPPPPPPNPPPPPPPPPNNNNPNNNNNPNNNPPPPPPPPPPPPPPPPNNPNNPPPNNPPNNNNNPNNPNNNNNNNNNNNPNNNNNNNNNPPPPPPPPPPNNPNNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNPNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNPNNNPNPNNNNNNNNNNNNNNNPNPNNPNNPNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNPPNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPNNNNNNNNNNNNNNNNNNPNPNPNNNNNNNNNNNNPNNPPPPPNPNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNPPNNNPNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 0th generated patches:
Validating 43 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 4 patches...
Current actions:
INSERT:
35:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 74 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
35:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 76 patches...
Current actions:
DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:2641 patches
Compile failed:2428 patches
Compilation rate:0.08065126845891708
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 12 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 77 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 77 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:2955 patches
Compile failed:2731 patches
Compilation rate:0.07580372250423012
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPPNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

Following are 1th generated patches:
Validating 18 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 16 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 35 patches...
Current actions:
INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:3223 patches
Compile failed:2955 patches
Compilation rate:0.08315234253800807
NNNNNNNNNNNNNNNNNNNNPPPPNNNNNPPNNNNPPPPPNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNPNNNPPPNNPPNPPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPPNNPNNPPPPPPPPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Tested:3223 patches
Compile failed:2955 patches
Compilation rate:0.08315234253800807

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
13:return prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 159 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
TO:
18

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 66 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
11:prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
TO:
18

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 105 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

DELETE:
Original line: 42return result;

Tested:3724 patches
Compile failed:3435 patches
Compilation rate:0.0776047261009667
NNNNNNNNNNNNNNNNNNNNNPPPNPPPNNNPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPPPPPPNPNPNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 0th generated patches:
Validating 3 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 2th generated patches:
Validating 40 patches...
Current actions:
INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 3th generated patches:
Validating 39 patches...
Tested:3806 patches
Compile failed:3509 patches
Compilation rate:0.07803468208092486
NPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 79 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 28 patches...
Current actions:
DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Tested:4082 patches
Compile failed:3760 patches
Compilation rate:0.0788829005389515
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPNPNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPNPNPPPPNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

Following are 1th generated patches:
Validating 18 patches...
Current actions:
DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 26 patches...
Current actions:
UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 20 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:4318 patches
Compile failed:3956 patches
Compilation rate:0.08383510884668828
NNNNNNNNNNNNNNNNNNNNPPPPNNNNNPPNNNPPNPPPNNPNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNPNNNPPPNNPPPNNPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNPNPPNNPPPPPPPPNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 49 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 56 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 58 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:4663 patches
Compile failed:4248 patches
Compilation rate:0.08899849882050183
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNPNNNNPPNPPPPPPPNPNNNNNNPNPNPPPNPPPPPPPNPPNNPPPPNNNNPPPPNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNPNPNPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Tested:4665 patches
Compile failed:4248 patches
Compilation rate:0.08938906752411575
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
10: final double ai2=ai*ai;

INSERT:
12:prod+=ai2*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 115 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 34 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 13 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 32 patches...
Current actions:
DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:5000 patches
Compile failed:4572 patches
Compilation rate:0.0856
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
8:double minB=b[0];
TO:
6

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

Following are 2th generated patches:
Validating 34 patches...
Current actions:
INSERT:
8:double minB=b[0];
TO:
6

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

INSERT:
33:result+=ai*bi;
TO:
16

Following are 3th generated patches:
Validating 136 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double minB=b[0];
TO:
6

INSERT:
9:double maxA=a[0];
TO:
6

INSERT:
10:double maxB=b[0];
TO:
6

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
19: final double min=minA<minB?minA:minB;
TO:
21

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

INSERT:
26:return result;
TO:
40

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

INSERT:
28: final double invMin=1/min;
TO:
40

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

Tested:5545 patches
Compile failed:5082 patches
Compilation rate:0.08349864743011723
NNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNPPNPNNNNNNNNPNPNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPPPNNNNNNNNNNPNPNNNNNPPNNNNNPNNNNPNPPNPPNNNNPNNPNPNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 12 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 13 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 18 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:5719 patches
Compile failed:5237 patches
Compilation rate:0.08428046861339394
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPNPPPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNPPPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 47 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
result+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 113 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

INSERT:
9:result+=SPLIT_FACTOR*a[i]*b[i];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:6053 patches
Compile failed:5549 patches
Compilation rate:0.08326449694366429
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNPPPPPPNPNNNNPPNNNNNNNNNNNNNNNNNPPPNPPPPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 67 patches...
Current actions:
DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 55 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 50 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:6395 patches
Compile failed:5855 patches
Compilation rate:0.08444096950742767
NNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPPPPPNPNNNNNPNNPNPNNNNNNNNNNNNNNNNNNNPPPPNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 6 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:6993 patches
Compile failed:6441 patches
Compilation rate:0.07893607893607893

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 73 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 78 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 48 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:7345 patches
Compile failed:6755 patches
Compilation rate:0.08032675289312458
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNPPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPPPNNPNNNNNNPNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNPNNNNNNNNNNNNNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 2th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 61 patches...
Current actions:
INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:7983 patches
Compile failed:7383 patches
Compilation rate:0.0751597143930853
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 47 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:8620 patches
Compile failed:7923 patches
Compilation rate:0.0808584686774942
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNPNPNPNPNPPNNNNNNPNNPNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPPPPPPNNNNNNNNNPPPPPPPPNNPNPNPNNNNPPPNNNNNNNNNPPPPPPPPPNNNPNPNNPPPNNNPNNNNNNNNPPPPPPNPPPNNNNNPPNPNNNNNPNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNPNPNNPPNNPPPPPPPPPPPNPNNNNNNNNNNNNNNNPPPNNPPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 96 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 72 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

INSERT:
13:sum+=prod+prodLow;
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 144 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:9102 patches
Compile failed:8381 patches
Compilation rate:0.07921335970116458
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPPPNNPNNNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 167 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

INSERT:
16:prodHigh=prodHighNext;
TO:
29

INSERT:
17:prodLowSum+=a[i]*b[i]-prodHighNext;
TO:
29

INSERT:
18:sHighPrev=sHighPrev+prodHigh;
TO:
29

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12:double sLowSum=0;
TO:
8

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 18prodHigh[i]=ai*bi;

Following are 4th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
16:prodHigh=prodHighNext;
TO:
29

INSERT:
18:sHighPrev=sHighPrev+prodHigh;
TO:
29

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:9842 patches
Compile failed:9098 patches
Compilation rate:0.07559439138386506
NNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNPPNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNPNNNNNPPPNNNNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
27:if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
TO:
29

Following are 1th generated patches:
Validating 126 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:double b1=b[0];
TO:
6

INSERT:
9:double aSum=a1*b1;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
12:double prodHigh=a1*b1;
TO:
8

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
16: final double aLow=a[i]-aHigh;

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
17: final double bSplit=b[i]*SPLIT_FACTOR;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
19: final double bLow=b[i]-bHigh;

INSERT:
23:aSum+=a[i];
TO:
19

INSERT:
24:bSum+=b[i];
TO:
19

DELETE:
Original line: 27 final int lenMinusOne=len-1;

INSERT:
31:prodHigh=prodHighNew;
TO:
29

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double a1=a[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double bSum=a1*b1;
TO:
6

INSERT:
12:double prodHigh=a1*b1;
TO:
8

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
14: final double aSplit=a[i]*SPLIT_FACTOR;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
16: final double aLow=a[i]-aHigh;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
22: final double prodLowNew=aLow*bLow-(((prodHighNew-(prodHigh-prodHighNew))-aLow*bHigh)-aHigh*bLow);

INSERT:
23:aSum+=a[i];
TO:
19

INSERT:
24:bSum+=b[i];
TO:
19

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
20:prodLowSum+=prodLow;
TO:
25:prodLow+=prodLowNew;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

INSERT:
27:if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
TO:
29

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
34:return prodHigh+(prodLow+(aSum+bSum)*SPLIT_FACTOR);
TO:
41

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 200 patches...
Tested:10556 patches
Compile failed:9773 patches
Compilation rate:0.07417582417582418
NNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNPPNNNNNPPPNPPNNPPPNNNPNNNNNNNNNNPNNNNNNNNNNPPNNPPNNNNNNNNPPPNPNNPPNNPNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNPNPPPNNNPPNNNPNNPNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

INSERT:
14: final double sHighNext=a[len-1]*b[len-1];
TO:
21

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
15: final double sPrime=sHighCur-sHighNext;

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

INSERT:
17: final double result=sHighCur+sLowSum;
TO:
22

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
11:prodLowSum+=a[i]*b[i]-prodHigh;
TO:
18

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
15: final double sPrime=sHighCur-sHighNext;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 200 patches...
Tested:11340 patches
Compile failed:10543 patches
Compilation rate:0.07028218694885362

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
r+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return r;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 76 patches...
Current actions:
INSERT:
7:double r=0;
TO:
6

INSERT:
8:for(int i=0;i<len;++i){
r+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return r;
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 86 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 8 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
r+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 59 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:11713 patches
Compile failed:10881 patches
Compilation rate:0.07103218645948946
NNNNNNNNNNNNNNNNNNNPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNPPPPNNPPNPPNNPNNNNNNNNNNNNNNNNNPPPPNPPNPPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 11 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:11883 patches
Compile failed:11014 patches
Compilation rate:0.07312968105697215
NNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNPPPPPNNNNNPPNNPNNNNNNNNNPNNNPNNPPPNPNPPPNPNNNNNNNNPPNPNPPNPPNPPPNNNPNPNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Current actions:
INSERT:
3:double sum=0;
TO:
2

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 50 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 30 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 80 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 14 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:12197 patches
Compile failed:11294 patches
Compilation rate:0.07403459867180454
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNNPNNPNNNNNNNNNNNNNPNPNNPPNPPPPNPNNNNNNPPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNPNNPNPPPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 200 patches...
Tested:12988 patches
Compile failed:12075 patches
Compilation rate:0.07029565753002771

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 23double prodHighNext=prodHigh[1];

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 5 patches...
Current actions:
INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 42 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHighSum=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Tested:13425 patches
Compile failed:12490 patches
Compilation rate:0.0696461824953445
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNPNNNNPNPNNNNNNNNNNNNNNPPPNPPPPNPNNNNPNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 23 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 17 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Tested:13595 patches
Compile failed:12622 patches
Compilation rate:0.07157043030525928
NNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNPNPPPPNNNNNPPNNPNNNNNNNNNPNNNPNNPPPNNPPPNPPNNNNNNNNPPNPNPPNPPPPNPNNPPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 1th generated patches:
Validating 65 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 2th generated patches:
Validating 63 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 4th generated patches:
Validating 63 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
21: final double result=prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Tested:14165 patches
Compile failed:13192 patches
Compilation rate:0.06869043416872574

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 39 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 36 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 28 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:14434 patches
Compile failed:13417 patches
Compilation rate:0.07045863932381877
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNPPPNPPPNPNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNPPPPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPPPNPNPPNNPNPPPPPNNPPPNNNNNNNNNNNNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

Following are 0th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 17 final double bLow=bi-bHigh;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 4th generated patches:
Validating 200 patches...
Tested:15073 patches
Compile failed:14053 patches
Compilation rate:0.0676706694088768
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:15668 patches
Compile failed:14628 patches
Compilation rate:0.06637732958897115

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 1th generated patches:
Validating 163 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 4th generated patches:
Validating 165 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Tested:16033 patches
Compile failed:14989 patches
Compilation rate:0.0651156988710784
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 157 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 175 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Tested:16585 patches
Compile failed:15531 patches
Compilation rate:0.06355140186915888

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 14 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 20 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:result=hiPrecSum(result,hiPrecMul(ai,bi));
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:17000 patches
Compile failed:15924 patches
Compilation rate:0.06329411764705882
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNPPPPPNPNNNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 56 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 41 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 54 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 20 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:17318 patches
Compile failed:16242 patches
Compilation rate:0.06213188589906456
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
15:sum+=summand;
TO:
16

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 98 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 145 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:18129 patches
Compile failed:17029 patches
Compilation rate:0.06067626454851343
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNPPPPPNNNPNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighPrev-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

Following are 3th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighPrev-sPrime))+(sHighPrev-sPrime);

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 116 patches...
Tested:19034 patches
Compile failed:17854 patches
Compilation rate:0.06199432594304928
NNNNNNNNNPPPPPPNNNNPPPNNNNPNNNNNNNNNPPNNNNNNNPNNPNPPPNNNNPNNNNNNNNNNPPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPPPPNNPNNPNPNNNNNNNPNNNNNNPNPPPPPNNPNPPPNNPNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNPPNPPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNPNNPNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNPNPNPNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 103 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 97 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 165 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:19764 patches
Compile failed:18584 patches
Compilation rate:0.059704513256425826

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double prod;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
10:prod=a[i]*b[i];
TO:
9

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
11: final double aHigh=SPLIT_FACTOR*a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
13: final double prodHigh=aHigh*bHigh;

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
15: final double sum=result+prod;
TO:
13

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
16: final double sHigh=SPLIT_FACTOR*sum;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double prod;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
11: final double aHigh=SPLIT_FACTOR*a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
15: final double sum=result+prod;
TO:
13

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 195 patches...
Current actions:
INSERT:
8:double prod;
TO:
6

INSERT:
10:prod=a[i]*b[i];
TO:
9

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 186 patches...
Current actions:
INSERT:
10:prod=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 182 patches...
Tested:20697 patches
Compile failed:19517 patches
Compilation rate:0.05701309368507513

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 197 patches...
Current actions:
INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 141 patches...
Current actions:
DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Tested:21597 patches
Compile failed:20417 patches
Compilation rate:0.05463721813214798

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:prod+=a[i]*b[i];
TO:
8

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 52 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 10 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 76 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
9:prod+=a[i]*b[i];
TO:
8

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 45 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:21939 patches
Compile failed:20725 patches
Compilation rate:0.05533524773234878
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNPNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNPPNNPNPNNNNNNNNNNNNNNNNNNPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 60 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

Tested:22593 patches
Compile failed:21351 patches
Compilation rate:0.05497277917939185
NNNNNNNNNNNNNNNNNNNNPPNNNNPNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNPPNPNNPPNPNNNNNPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPNPPPPNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 1th generated patches:
Validating 42 patches...
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 41 patches...
Tested:22680 patches
Compile failed:21415 patches
Compilation rate:0.05577601410934744
NPPNNNNNNNNNNNNNNNPPPNNPNPPNNPNNNNNNPNNNNNPPPNNNNNNNNNNNNNNNNPPPNNPPNPNNNPNNPNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 65 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:prodHigh=prodHigh+a[i+1]*b[i+1];
TO:
23

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:23326 patches
Compile failed:22040 patches
Compilation rate:0.05513161279259196

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

Following are 1th generated patches:
Validating 62 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 192 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 5throw new DimensionMismatchException(len,b.length);

INSERT:
12:result+=prodHigh[i];
TO:
35

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 59 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:23823 patches
Compile failed:22472 patches
Compilation rate:0.05670990219535743
NNNNNNNNNNNNNNNNNPPPNPPNPPPPNNNNNPNNNPNNNPNNNPNNNPNNPNNPPNPPPPNNNNNPNPNNNNNNNPNNNNNNPNNNPPPPNPPNNNNPNNNPNNNNNNNNNNNPPPPPPNNNPNPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNPPNPPPPNNNPNNNNPNNNNNPNPPPPPPPPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=a[0]*b[0];
TO:
6

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 52 patches...
Current actions:
INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 37result=0;

Tested:24030 patches
Compile failed:22658 patches
Compilation rate:0.057095297544735746
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNPPPPNPNNNNPNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22: final double sHighPrev=prodHigh+prodHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24: final double sLowSum=(prodHigh-(sHighPrev-sPrime))+(prodHigh-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 200 patches...
Tested:24823 patches
Compile failed:23439 patches
Compilation rate:0.05575474358457882
NNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPNNNNPPPPNNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : math-3 > patch : 0 | Start : Fri Apr 05 16:54:47 HKT 2024 | End : 2024.04.05 AD at 17:50:45 HKT
