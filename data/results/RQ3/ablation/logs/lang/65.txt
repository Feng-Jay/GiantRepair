Repair : lang_65
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millisecs);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 2th generated patches:
Validating 11 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millisecs);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

Following are 3th generated patches:
Validating 200 patches...
Tested:536 patches
Compile failed:457 patches
Compilation rate:0.14738805970149255
NNNNNNNNNNPPNPNNPNNPPPNNNNNNNNNNNNNNPNPPPPPPPNPPNNNPNNPNPPNNPNPNNNNPNPPPPPPPPNNPPNNPNPNNPPPNPNNNNPPNNPNNPPPPPPNNPNNNPNNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNPPNPNNNPPNPPPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Tested:536 patches
Compile failed:457 patches
Compilation rate:0.14738805970149255

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

Following are 3th generated patches:
Validating 194 patches...
Tested:1135 patches
Compile failed:1018 patches
Compilation rate:0.10308370044052863
PPPPPPPNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNPNPNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNPPNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 1th generated patches:
Validating 101 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 3th generated patches:
Validating 128 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

Following are 4th generated patches:
Validating 27 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Tested:1396 patches
Compile failed:1228 patches
Compilation rate:0.12034383954154727
NNNPPPPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNPPPPPPPPPPPNPPPPPNPPNNPNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNPNPNNNNPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
11:val.set(Calendar.AM_PM,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Tested:1636 patches
Compile failed:1415 patches
Compilation rate:0.13508557457212714
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNPPNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Current actions:
Wrap:
Block
On:
[if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}, break;, case Calendar.AM_PM :, if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}, break;, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, int min=val.getActualMinimum(fields[i][0]);]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

Following are 3th generated patches:
Validating 3 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

INSERT:
6:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

Tested:1729 patches
Compile failed:1470 patches
Compilation rate:0.14979757085020243
NNNPPPPPPPPNPNNNNNNNNPNNPPPPPNPPNNNNPNPNNPNNPNNNNNNNNNNNNNNNNNNPNNNNNPPNNPPPPPPPNPNPPPPPNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 165 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 1th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 2th generated patches:
Validating 24 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Following are 4th generated patches:
Validating 195 patches...
Current actions:
INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

Tested:2284 patches
Compile failed:1889 patches
Compilation rate:0.17294220665499124
NNNPPPPPPPPPPPPPPPPPPPNNNNPNNPPPPPPNPPNPPPPPPPPPPNPNNNPNPPPPPPNNNPPPNPPPPPPPPPPPNNNPNPPPPPPPPNPNPPNPPPPPPNPNPPPPPPPPPPNNNNNPPPPPPPPNNNPPPPPPNNNNNPPPPPPPPNNNPPPPPPNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPNPPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-millis%1000);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%60);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-millis%1000);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-seconds%60);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%60);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:2723 patches
Compile failed:2292 patches
Compilation rate:0.15828130738156446
NNNNNNNNNNNPPPNNNPPNPPPNNNNPNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

Following are 1th generated patches:
Validating 11 patches...
Current actions:
INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millis);
TO:
58

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millis);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 3th generated patches:
Validating 200 patches...
Tested:3261 patches
Compile failed:2754 patches
Compilation rate:0.15547378104875806
NNNNNNNNPPPPPPNNNPNNNNPNNNNNNNNPNNPPNNNPPPPPPPNNPNNNPPNNPNPPNNPNNNPPNNPPPPPPPNPNNPPPNNPPPNPNNNNNPPNNPPNNNNPPPNNNPPNNPNNNPNNPPPPPPNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPPPPPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round&&field==DateUtils.SEMI_MONTH&&val.get(Calendar.DATE)==1){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
18:}

TO:
48

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round&&field==DateUtils.SEMI_MONTH&&val.get(Calendar.DATE)==1){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
18:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 200 patches...
Tested:3824 patches
Compile failed:3217 patches
Compilation rate:0.15873430962343096
NNNNNNPPPPPPPPNPNPPPPPPPPNNPPPPPPPPNNNPPPNPPNPPPPPPPPPNPPNPPPPPPNPNPPNPPPPPPNPPPPPPPPNPPNPPPPPNPPNPPPPPPPPPNPNPPPPPPPNNNNPPNPNNNPNPNNNNPNNNNNNNNNNNNNNNNNPNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:if(millisecs!=0){
int[] fieldMillis={Calendar.MILLISECOND};
millisToSet=truncate(val,millisecs,fieldMillis,true);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:if(seconds!=0){
int[] fieldSeconds={Calendar.SECOND};
secondsToSet=truncate(val,seconds,fieldSeconds,true);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
12:int millisToSet=0;
TO:
5

INSERT:
14:int[] fieldMillis={Calendar.MILLISECOND};
TO:
5

INSERT:
15:millisToSet=truncate(val,millisecs,fieldMillis,true);
TO:
5

INSERT:
17:int secondsToSet=0;
TO:
5

INSERT:
18:if(seconds!=0){
int[] fieldSeconds={Calendar.SECOND};
secondsToSet=truncate(val,seconds,fieldSeconds,true);
}
TO:
5

INSERT:
22:int minutesToSet=0;
TO:
5

INSERT:
23:if(minutes!=0){
int[] fieldMinutes={Calendar.MINUTE};
minutesToSet=truncate(val,minutes,fieldMinutes,true);
}
TO:
5

INSERT:
91:}

TO:
60

INSERT:
95:}

TO:
60

INSERT:
96:}

TO:
60

INSERT:
100:}

TO:
60

INSERT:
101:}

TO:
60

INSERT:
102:}

TO:
60

INSERT:
103:}

TO:
60

INSERT:
105:}

TO:
60

Following are 4th generated patches:
Validating 200 patches...
Tested:4623 patches
Compile failed:4016 patches
Compilation rate:0.13130002163097557

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 63 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

Following are 2th generated patches:
Validating 90 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:5344 patches
Compile failed:4655 patches
Compilation rate:0.1289296407185629

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:5983 patches
Compile failed:5226 patches
Compilation rate:0.12652515460471336

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%ROUND_FRACTION));
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:6422 patches
Compile failed:5658 patches
Compilation rate:0.11896605418872626
NNNNNNNNNNNNNNNNNNNNNPPNNNNNNNPNNPNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:6845 patches
Compile failed:6032 patches
Compilation rate:0.11877282688093499
PPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
19:if(offset>=12){
offset-=12;
}
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
29:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
int offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
48

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
15:time-=offset*DateUtils.MILLIS_PER_DAY;
TO:
48

INSERT:
16:break;
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
24:break;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

DELETE:
Original line: 27int offset=0;

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
30:for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
TO:
48

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

INSERT:
51:int offset=val.get(fields[i][0])-min;
TO:
53

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
14:round=offset>7;
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
19:if(offset>=12){
offset-=12;
}
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
24:break;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
29:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
int offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
48

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

Following are 3th generated patches:
Validating 200 patches...
Tested:7496 patches
Compile failed:6645 patches
Compilation rate:0.11352721451440768
NNNNNNNNNNPPPPNPNPPPNNPNPNNNNNPNPNNNNNNNPPPPPPPPPNNPPPPPPPPPNPPNNNNNNNPPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-min%60);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-sec%60);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-min%60);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:8134 patches
Compile failed:7270 patches
Compilation rate:0.1062208015736415

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

Following are 1th generated patches:
Validating 22 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,seconds-seconds%DateUtils.MILLIS_PER_MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%DateUtils.MILLIS_PER_HOUR);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%DateUtils.MILLIS_PER_HOUR);
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:8791 patches
Compile failed:7907 patches
Compilation rate:0.10055738823797065

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Tested:8793 patches
Compile failed:7909 patches
Compilation rate:0.10053451609234619
NN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:case Calendar.MILLISECOND :
TO:
5

INSERT:
9:case Calendar.SECOND :
TO:
5

INSERT:
11:case Calendar.MINUTE :
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:case Calendar.MILLISECOND :
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
21:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

Following are 2th generated patches:
Validating 27 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
16:boolean roundUp=false;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
8:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
13:default :
TO:
5

INSERT:
14:break;
TO:
5

INSERT:
16:boolean roundUp=false;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 4th generated patches:
Validating 194 patches...
Tested:9483 patches
Compile failed:8568 patches
Compilation rate:0.09648845302119582
NNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNPNNNNNNNNNNNPNNNNPNPNNPPNNNNNPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNPNNNNNPNNNNNNNNPPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 2th generated patches:
Validating 195 patches...
Current actions:
INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 3th generated patches:
Validating 194 patches...
Tested:9875 patches
Compile failed:8936 patches
Compilation rate:0.0950886075949367
PPPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNPPNNNPNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

Following are 1th generated patches:
Validating 37 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=(time/1000)*1000;
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 2th generated patches:
Validating 190 patches...
Current actions:
INSERT:
7:time=(time/1000)*1000;
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 3th generated patches:
Validating 153 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 4th generated patches:
Validating 164 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=(time/1000)*1000;
TO:
5

Tested:10427 patches
Compile failed:9360 patches
Compilation rate:0.1023304881557495
NNNNNNNNNNPPPPPPPPNNNNNNNNNNPPPPNPPPPPPPPNPNNPPPPPPNNPNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNNPNNPPNPNNPPPPNNNNPPPPPPPPPNPNNNNNNPNPPPPNPNNPPPPPPPPPPNPPPPPPPNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNNPNNNPPNPPPPPNNNNNPPPPPPPPNPPPPPPPPPNNPPPNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

INSERT:
21:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
20:return ;
TO:
48

INSERT:
21:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
17:val.add(field,1);
TO:
26

INSERT:
20:return ;
TO:
48

INSERT:
21:}

TO:
48

DELETE:
Original line: 21val.add(fields[i][0],1);

DELETE:
Original line: 24return ;

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 33if(offset>=15){
offset-=15;
}

DELETE:
Original line: 37offsetSet=true;

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
17:val.add(field,1);
TO:
26

INSERT:
21:}

TO:
48

Tested:11172 patches
Compile failed:9968 patches
Compilation rate:0.10776942355889724
NNNPPPPPPPPNPNNNPNNNPNPPPPPPNPPPPPPPPPNPPNPPPPPPNPNNPPNPPPPPNPPPPPPNPPPPPPPPPNNPPPNPPPPNNPNNNPPNPNNNNNPPNNNNNNNNNNNNNNPNNNNNNNNPNNNNPPPPPPPPNPPPPPPPPPNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNPNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNPPPPPPPPPPPPPPPPPPPPNNNNNNPNNPPPNPPPPPNPNPNNNPNNNNPNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

Following are 1th generated patches:
Validating 11 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-(sec%60));
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,ms-(ms%1000));
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-(sec%60));
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:11622 patches
Compile failed:10407 patches
Compilation rate:0.10454310789881259
NNNNNNNNNNNNNNNNNNPNPNNPNPNNNNNPNNNNNNNPPNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 1th generated patches:
Validating 113 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=truncate(field,time);
TO:
5

Following are 2th generated patches:
Validating 12 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 3th generated patches:
Validating 11 patches...
Current actions:
INSERT:
7:time=truncate(field,time);
TO:
5

Following are 4th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Tested:11763 patches
Compile failed:10542 patches
Compilation rate:0.10380005100739607
NNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Current actions:
INSERT:
6:int min=val.getActualMinimum(field);
TO:
5

Following are 0th generated patches:
Validating 134 patches...
Current actions:
INSERT:
8:if(field==Calendar.MILLISECOND){
val.set(Calendar.MILLISECOND,min);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
11:if(field==Calendar.SECOND){
val.set(Calendar.SECOND,min);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int max=val.getActualMaximum(field);
TO:
5

INSERT:
8:if(field==Calendar.MILLISECOND){
val.set(Calendar.MILLISECOND,min);
}
TO:
5

INSERT:
11:if(field==Calendar.SECOND){
val.set(Calendar.SECOND,min);
}
TO:
5

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

Following are 3th generated patches:
Validating 200 patches...
Tested:12496 patches
Compile failed:11244 patches
Compilation rate:0.1001920614596671

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int ss=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

INSERT:
67:val.set(Calendar.SECOND,ss);
TO:
59

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 2th generated patches:
Validating 200 patches...
Tested:13024 patches
Compile failed:11747 patches
Compilation rate:0.0980497542997543
NNNNNNNNNNNNNNNNPPNNNPNNNNNPNNNNNNNNNNNNNNNNPNPPPPNNPNNNPNNNNNNNNNNPPNNNNNNNNNPPPNNNPPPNNNNNNNNNPNNNNNNNNNNNNNNNNNPNPNNNNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

INSERT:
23:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
24:val.set(Calendar.MILLISECOND,0);
TO:
5

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

INSERT:
36:{
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
14:case Calendar.DATE :
TO:
5

Following are 2th generated patches:
Validating 26 patches...
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
35:boolean roundUp=false;
TO:
5

INSERT:
36:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
35:boolean roundUp=false;
TO:
5

INSERT:
36:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:13733 patches
Compile failed:12398 patches
Compilation rate:0.09721109735673196
NNNNNNNNNNNNNNNNNNNNNPPNPPPNNPNNNPNPNPPNNNNPNPPNPNNNNNPNNNPNNNPNNNNNPNNNNNNPNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNPNNNNNNNPPPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNPNNNNNNNPPPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:if(field==milli){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

INSERT:
7: final int second=Calendar.SECOND;
TO:
5

INSERT:
8: final int minute=Calendar.MINUTE;
TO:
5

INSERT:
9:if(field==milli){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:14530 patches
Compile failed:13053 patches
Compilation rate:0.10165175498967653
NNNPPPPPPPPPNNNPPPPPPPPNPPPPPPPNPPPPNNNPPNNNNPNNPNPNPNPPPNPPPPPPPPNPNPPNPPPNNNPNNNNNNPPPPPPPPPNNPNNPNNPPPPNPPNNPNNNPPPNPPPPPPNNNNPPPPPPPPNPNNNNNNPNNNNNPPNNPPPPNPPPNPPPPPPPPPPNNPPPNPPPPPNPPPPNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Current actions:
Wrap:
IfStatement
On:
[val.add(fields[i][0],1);, if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}, {
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}]
Following are 0th generated patches:
Validating 50 patches...
Current actions:
INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

Following are 1th generated patches:
Validating 22 patches...
Current actions:
INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

Following are 2th generated patches:
Validating 24 patches...
Current actions:
DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 16val.add(Calendar.DATE,-15);

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

Tested:14606 patches
Compile failed:13079 patches
Compilation rate:0.10454607695467616
NNNNNPPPPPPPPPPNNNPPPPPPPPPPPPNNNNNPPPPPPPPNNNPPPPPPNNNNNPPPPPPPPNNNPPPPPPNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 3th generated patches:
Validating 194 patches...
Tested:15212 patches
Compile failed:13640 patches
Compilation rate:0.10333946884038916
PPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNPPPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNPNPNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Current actions:
Wrap:
MethodDeclaration
On:
[throw new IllegalArgumentException("The field "+field+" is not supported");, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}, {
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}, {
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}, for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}, if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}, {
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}, {
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}, if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}, {
val.add(Calendar.DATE,15);
}, if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}, val.add(Calendar.DATE,15);, return ;]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 39break;

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

DELETE:
Original line: 44offset-=12;

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

Following are 2th generated patches:
Validating 7 patches...
Current actions:
DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 37offsetSet=true;

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

Following are 3th generated patches:
Validating 4 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 7 patches...
Current actions:
DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

Tested:15390 patches
Compile failed:13818 patches
Compilation rate:0.10214424951267057
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:if(offset>0){
val.add(Calendar.MILLISECOND,-offset);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:if(offset>0){
val.add(Calendar.SECOND,-offset);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
44:}

TO:
48

Tested:15975 patches
Compile failed:14336 patches
Compilation rate:0.10259780907668231
NNNNNNNNNNNNNNNNNNNNPNNNNPPPPNNNPNPNNPPPNPPPPPPPNPPNPPPNNNPPPPPPPPNNNNNNNPNNNPPNNNNNPNNPNPNPPNPNNNNNNNNPNNNNNNPPPPNNPPPPPNPPPPNPPPNPPPNPNNNNNPNNNPNNPPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

Following are 1th generated patches:
Validating 78 patches...
Current actions:
INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 21val.add(fields[i][0],1);

INSERT:
27:}

TO:
48

Following are 2th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
27:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 3th generated patches:
Validating 91 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
27:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 94 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
27:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 34offset-=15;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

DELETE:
Original line: 47offsetSet=true;

DELETE:
Original line: 49break;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Tested:16342 patches
Compile failed:14650 patches
Compilation rate:0.10353689878839799
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNPPNNPPPNPPPPPPPPPPPPPPPPNNPNNNNNPNNNPPPPPPPPPPNPPPPPPNPPPPNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Current actions:
Wrap:
Block
On:
[if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}, break;, case Calendar.AM_PM :, if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}, break;, int min=val.getActualMinimum(fields[i][0]);, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, boolean roundUp=false;, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 4 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 4 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

Tested:16420 patches
Compile failed:14688 patches
Compilation rate:0.10548112058465287
NNNNNNPPPPPPPNNNNNNNNPNPPNNNNNNNNNPNPPPPNNNPPNPNNPPPPPPPPNPNPNPPNPNPPPPPPPNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int second=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minute=val.get(Calendar.MINUTE);
TO:
5

INSERT:
10:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
67:val.set(Calendar.SECOND,second);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:int hour=val.get(Calendar.HOUR_OF_DAY);
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
69:val.set(Calendar.HOUR_OF_DAY,hour);
TO:
58

Following are 2th generated patches:
Validating 200 patches...
Tested:17017 patches
Compile failed:15172 patches
Compilation rate:0.10842099077393196
NNNNNNNNNNNNPPPPPPNPNPPNPPPNPPPNNPPNPNNPNNNPNNNNNPPNNPNPNNPPNPPPPNPNPNNNNNPNPNPNNNPNNNNPPNNNNNPNNPNNNPPNNNNNNPNPNNNPPPPPPPPNNNPPPPNPNNPPPNNNPPNNNNNNPPPNNNNNNNPNNPNNPNPPPPPPPNNNPPPNPNPNPPPPNNNPPNNPPPPPNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPPPPNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
16:if(firstJanX==4||firstJanX==1){
return ;
}
TO:
5

DELETE:
Original line: 24return ;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
34:if(!round){
switch (field){
case DateUtils.SECOND :
val.set(Calendar.MILLISECOND,0);
case DateUtils.MINUTE :
val.set(Calendar.SECOND,0);
case DateUtils.HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.HOUR_OF_DAY :
val.set(Calendar.SECOND,0);
case DateUtils.MINUTE_OF_HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.SECOND_OF_MINUTE :
val.set(Calendar.SECOND,0);
}
}
TO:
50

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%1000));
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%60));
TO:
5

INSERT:
12:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
13:val.set(Calendar.AM_PM,0);
TO:
5

INSERT:
14:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
16:if(firstJanX==4||firstJanX==1){
return ;
}
TO:
5

INSERT:
19:int weekNumber=firstJanX==2?52:53;
TO:
48

INSERT:
20:switch (field){
case DateUtils.WEEK_OF_YEAR :
val.add(Calendar.DATE,7*(weekNumber-1));
break;
case DateUtils.WEEK_OF_MONTH :
val.add(Calendar.DATE,7*(weekNumber-val.get(Calendar.WEEK_OF_MONTH)));
break;
case Calendar.WEEK_OF_YEAR :
val.set(Calendar.WEEK_OF_YEAR,weekNumber);
break;
case Calendar.WEEK_OF_MONTH :
val.set(Calendar.WEEK_OF_MONTH,weekNumber);
break;
}
TO:
48

INSERT:
34:if(!round){
switch (field){
case DateUtils.SECOND :
val.set(Calendar.MILLISECOND,0);
case DateUtils.MINUTE :
val.set(Calendar.SECOND,0);
case DateUtils.HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.HOUR_OF_DAY :
val.set(Calendar.SECOND,0);
case DateUtils.MINUTE_OF_HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.SECOND_OF_MINUTE :
val.set(Calendar.SECOND,0);
}
}
TO:
50

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 200 patches...
Tested:17798 patches
Compile failed:15870 patches
Compilation rate:0.10832677828969547
NNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNPNPNPPPPPNPPNPNPPNPPPPNPNPNNNNNNNNPNPNNPPPNPPPPPNNNNPNNPPNPPNPNNNPNNNNPPPNPPPPPNNNNPPPPPNNPPPPNNNPPNPNPNPNNPPNNNPPPNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNPNNPNPNNNNNNNPNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNPNNNNNPNNNPNNNNNNPNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round){
switch (field){
case DateUtils.SEMI_MONTH :
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
break;
case Calendar.AM_PM :
if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
break;
default :
val.add(field,1);
}
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
TO:
40

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round){
switch (field){
case DateUtils.SEMI_MONTH :
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
break;
case Calendar.AM_PM :
if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
break;
default :
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
30:else{
val.add(field,1);
}
TO:
56

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(round){
switch (field){
case DateUtils.SEMI_MONTH :
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
break;
case Calendar.AM_PM :
if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
break;
default :
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
31:val.add(field,1);
TO:
56

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 200 patches...
Tested:18791 patches
Compile failed:16591 patches
Compilation rate:0.11707732425097121
NNNPPPPPPPPPPPPPPPPPPNPNPNPPPPPPNPPPNNPNPPPPPNPPPPNPNNPPPPPPPPPPPPPPPPNNPPPNPPPPNNPPPPPNNPPNPPPPPPPPPPPPPPNNNPPPPPPPPPPPPPPPPNNPPPPNPNPPNNPNNPPNPNNNNPNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNPPPPPPPPPPPNNNNNNNNNNPPPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPNPNNPPNNPPPPPPNNNNNNNNNNNNNNNPNNPPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNPPPPPPPPPPPPPNNNNNNNPNNNPPPPPPPPPPNPPPPPPPPPPPNPPPPPPPPPPNPNPNNPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Current actions:
Wrap:
MethodDeclaration
On:
[if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}, return ;, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, else{
val.add(fields[i][0],1);
}, {
val.add(fields[i][0],1);
}, else{
val.add(fields[i][0],1);
}, {
val.add(fields[i][0],1);
}]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 12 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 37offsetSet=true;

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

DELETE:
Original line: 47offsetSet=true;

DELETE:
Original line: 49break;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 44offset-=12;

DELETE:
Original line: 46roundUp=offset>6;

DELETE:
Original line: 47offsetSet=true;

Following are 4th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

Tested:18910 patches
Compile failed:16643 patches
Compilation rate:0.11988365943945002
NNNNNNNNPPPPPPPPNPPPPPPPPNPNPPPNNPPPNPPPPPPNPPPPPPPPNNPPPPPPPPNPPPPPPPNPPNPPPPPPNNPPPPPNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:if(millis<500){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
14:if(seconds<30){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
14:if(seconds<30){
val.set(Calendar.SECOND,0);
}
TO:
5

INSERT:
20:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
21:if(minutes<30){
val.set(Calendar.MINUTE,0);
}
TO:
5

INSERT:
24:else{
if(minutes>30){
val.set(Calendar.MINUTE,60);
}
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:19710 patches
Compile failed:17357 patches
Compilation rate:0.11938102486047691
NNNNNNNNPNPPPPPPPNNNPNPPPPPNPPNNNPNNNNPPPNNPNNPNPNNNPPNNNNPPPPPNPPPNNPPPNNNNNNNNPNPNPNPNNNNNNNPPPPNPNNNPPPPNPNNPNNPNNNPPPNNNNPNPPNPNNNNNNNNNNPPPNPPNPNPPNNNNPNNNNNNNNPPPPPPPPNNNPNNNNPNNNNPNNPPNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : lang-65 > patch : 0 | Start : Fri Apr 05 16:23:42 HKT 2024 | End : 2024.04.05 AD at 16:54:44 HKT
