Following diff 0:
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
+returnanyResultsMatch(n,MAY_BE_STRING_PREDICATE);
Following diff 0:
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
+returnanyResultsMatch(n.cloneTree(),MAY_BE_STRING_PREDICATE);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&allResultsMatch(n,MAY_BE_STRING_PREDICATE))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isEmptyBlock(n))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isSimpleOperatorType(Node.FLAG_NO_THROWS))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isSimpleOperatorType(Node.IS_OPTIONAL_PARAM))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isSimpleOperatorType(Node.DECR_FLAG))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isSimpleOperatorType(Node.DECR_FLAG))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isSimpleOperatorType(Node.EMPTY_BLOCK))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isSimpleOperatorType(Node.EMPTY_BLOCK))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&!isSimpleOperatorType(Node.FLAG_LOCAL_RESULTS))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isEmptyBlock(n.getLastSibling()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isEmptyBlock(n.getLastSibling()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isEmptyBlock(n.getParent()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isEmptyBlock(n.getParent()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(allResultsMatch(n,MAY_BE_STRING_PREDICATE))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isEmptyBlock(n))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(recurse&&isEmptyBlock(n.cloneTree()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isEmptyBlock(n.cloneNode()))||mayBeStringHelper(n);
Following diff 0:
-if(recurse){
-returnallResultsMatch(n,MAY_BE_STRING_PREDICATE);
-}
-else{
-returnmayBeStringHelper(n);
-}
+return(isEmptyBlock(n.cloneTree()))||mayBeStringHelper(n);
