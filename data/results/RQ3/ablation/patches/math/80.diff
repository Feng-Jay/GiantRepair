Following diff 0:
-if(1.5*work[pingPong]<work[4*(n-1)+pingPong]){
-intj=4*n-1;
-for(inti=0;i<j;i+=4){
-for(intk=0;k<4;k+=step){
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
-work[j-k]=tmp;
-}
-j-=4;
-}
-returntrue;
-}
+if(realEigenvalues[pingPong]>work[4*(n-1)+pingPong]){
+intj=4*n-1;
+for(inti=0;i<j;i+=4){
+for(intk=0;k<4;k+=step){
+finaldoubletmp=work[i+k];
+work[i+k]=work[j-k];
+work[j-k]=tmp;
+}
+j-=4;
+}
+returntrue;
+}
Following diff 0:
-if(1.5*work[pingPong]<work[4*(n-1)+pingPong]){
-intj=4*n-1;
-for(inti=0;i<j;i+=4){
-for(intk=0;k<4;k+=step){
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
-work[j-k]=tmp;
-}
-j-=4;
-}
-returntrue;
-}
+if(imagEigenvalues[pingPong]>work[4*(n-1)+pingPong]){
+intj=4*n-1;
+for(inti=0;i<j;i+=4){
+for(intk=0;k<4;k+=step){
+finaldoubletmp=work[i+k];
+work[i+k]=work[j-k];
+work[j-k]=tmp;
+}
+j-=4;
+}
+returntrue;
+}
Following diff 0:
-work[j-k]=tmp;
+work[i+k]=tmp;
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[i+k];
Following diff 0:
-work[i+k]=work[j-k];
-work[j-k]=tmp;
+work[j-k]=work[i+k];
+work[i+k]=tmp;
Following diff 0:
-work[i+k]=work[j-k];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[n-k];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[n+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[j+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[step+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[k+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[pingPong+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-k];
+work[j-k]=work[tType+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[step-k];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[k-k];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-n];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-step];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-j];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-i];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-pingPong];
+work[j-k]=work[i+k];
Following diff 0:
-finaldoubletmp=work[i+k];
-work[i+k]=work[j-k];
+finaldoubletmp=work[j-tType];
+work[j-k]=work[i+k];
