Repair : math_3
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 24 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 17 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 7 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:174 patches
Compile failed:173 patches
Compilation rate:0.005747126436781609
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
9:double prodHighNext=prodHigh[1]=a[1]*b[1];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
12:double prodLowSum=a[0]*b[1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);

INSERT:
13:double sLowSum=a[1]*b[0]-(prodHighCur-sPrime)-(sHighPrev-sPrime);
TO:
26

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
16:prodHighCur=prodHighNext;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

INSERT:
17:prodHighNext=prodHigh[i+1]=a[i+1]*b[i+1];
TO:
29

INSERT:
18:sHighPrev=sHighCur+prodHighNext;
TO:
29

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

INSERT:
20:prodLowSum+=a[i]*b[i+1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);
TO:
31

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
21:sLowSum+=a[i+1]*b[i]-(prodHighCur-sPrime)-(sHighPrev-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
8:double prodHighCur=prodHigh[0]=a[0]*b[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
9:double prodHighNext=prodHigh[1]=a[1]*b[1];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
12:double prodLowSum=a[0]*b[1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);

INSERT:
13:double sLowSum=a[1]*b[0]-(prodHighCur-sPrime)-(sHighPrev-sPrime);
TO:
26

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
16:prodHighCur=prodHighNext;

INSERT:
17:prodHighNext=prodHigh[i+1]=a[i+1]*b[i+1];
TO:
29

INSERT:
18:sHighPrev=sHighCur+prodHighNext;
TO:
29

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

INSERT:
20:prodLowSum+=a[i]*b[i+1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);
TO:
31

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
21:sLowSum+=a[i+1]*b[i]-(prodHighCur-sPrime)-(sHighPrev-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 52 patches...
Tested:609 patches
Compile failed:575 patches
Compilation rate:0.05582922824302135
NNNNNNNNNNNNNNNNNNNNNNNPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNPPPPNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNPPNPNPPPPNPNNPNNNPPNNNNNNNNNPNNPPPNPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 83 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 85 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 2 patches...
Current actions:
INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:1041 patches
Compile failed:985 patches
Compilation rate:0.053794428434197884
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNPNNPNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNPNNNNNNPNNNNNPNNNNNNNNPPNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 77 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 50 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 48 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 74 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:1431 patches
Compile failed:1351 patches
Compilation rate:0.055904961565338925
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPNPPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNPPNNPNNNNNNNNNNNNNPNPNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 129 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 2th generated patches:
Validating 194 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 3th generated patches:
Validating 195 patches...
Current actions:
UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighCur-prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

Tested:2336 patches
Compile failed:2192 patches
Compilation rate:0.06164383561643835
NNNNNNNNNNNNPPPPPPPPPNPPPPPPPPPPNNPNNNNPNNNNNNPPPPPPPPPPPPPPPPNNPPNNPNPNNNNPNNPNPPNNNNNNNNNNNPNNNNNNNNNNPPPPPPPPPPNPNNNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 0th generated patches:
Validating 43 patches...
Current actions:
DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
35:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 75 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
35:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 77 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:2527 patches
Compile failed:2377 patches
Compilation rate:0.0593589236248516
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 71 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 12 patches...
Current actions:
INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:2786 patches
Compile failed:2625 patches
Compilation rate:0.05778894472361809
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPNPPNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 34 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

Following are 2th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:3005 patches
Compile failed:2806 patches
Compilation rate:0.06622296173044925
NNNNNNNNNNNNNNNNNPNPNPPNNNNNNPPNNPPNPPNPNNNPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNPNNNPNPPNPPNPNNPNNNNPPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNPPNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Tested:3005 patches
Compile failed:2806 patches
Compilation rate:0.06622296173044925

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 78 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

INSERT:
11:prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
TO:
18

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 61 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 39 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 87 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:3437 patches
Compile failed:3217 patches
Compilation rate:0.06400931044515566
NNNNNNNNNNNNNNNNNNNNNPPPPNPNNNPPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPPPPPPNPNNNNPNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 0th generated patches:
Validating 3 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 2th generated patches:
Validating 39 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 3th generated patches:
Validating 40 patches...
Tested:3519 patches
Compile failed:3291 patches
Compilation rate:0.06479113384484228
NPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPPPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

INSERT:
9:sum+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 70 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 80 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 55 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 32 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:3888 patches
Compile failed:3626 patches
Compilation rate:0.06738683127572016
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPPNPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPPNPPPNPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNPNNNNNNPNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 20 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 23 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 27 patches...
Current actions:
UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:4132 patches
Compile failed:3832 patches
Compilation rate:0.07260406582768635
NNNNNNNNNNNNNNNNNNNPPPNPNNNNNPPNNPNPNPPPNNNPNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNPNPNPPNPNPPNNPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNPPNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 8 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 2th generated patches:
Validating 50 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 51 patches...
Current actions:
DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Tested:4430 patches
Compile failed:4091 patches
Compilation rate:0.0765237020316027
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNPNNNPPNPPPPPPPNPNNNNNPNNPNPPPNPPPPPPNPPPPNNPNNPPPNNNPPNPNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Tested:4432 patches
Compile failed:4091 patches
Compilation rate:0.07694043321299639
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12:prod+=ai2*bi;
TO:
14

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 70 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
10: final double ai2=ai*ai;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 70 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
12:prod+=ai2*bi;
TO:
14

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 62 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12:prod+=ai2*bi;
TO:
14

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 73 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
10: final double ai2=ai*ai;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12:prod+=ai2*bi;
TO:
14

UPDATE
FROM:
42:return result;
TO:
14:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:4864 patches
Compile failed:4512 patches
Compilation rate:0.07236842105263158
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNPPPPPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double minA=a[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double minB=b[0];
TO:
6

INSERT:
9:double maxA=a[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double maxB=b[0];
TO:
6

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

INSERT:
26:return result;
TO:
40

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
28: final double invMin=1/min;
TO:
40

INSERT:
29:double result=0;
TO:
40

INSERT:
30:for(int i=0;i<len;++i){
 final double ai=a[i]*invMin;
 final double bi=b[i]*invMin;
result+=ai*bi;
}
TO:
40

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double minA=a[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
19: final double min=minA<minB?minA:minB;
TO:
21

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
30:for(int i=0;i<len;++i){
 final double ai=a[i]*invMin;
 final double bi=b[i]*invMin;
result+=ai*bi;
}
TO:
40

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 159 patches...
Current actions:
INSERT:
9:double maxA=a[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double maxB=b[0];
TO:
6

INSERT:
15:minB=bi<minB?bi:minB;
TO:
14

INSERT:
16:maxA=ai>maxA?ai:maxA;
TO:
14

INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

INSERT:
26:return result;
TO:
40

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
28: final double invMin=1/min;
TO:
40

INSERT:
33:result+=ai*bi;
TO:
16

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
29:double result=0;
TO:
40

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 17 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:double maxA=a[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double maxB=b[0];
TO:
6

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

INSERT:
19: final double min=minA<minB?minA:minB;
TO:
21

INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

INSERT:
26:return result;
TO:
40

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
28: final double invMin=1/min;
TO:
40

INSERT:
29:double result=0;
TO:
40

INSERT:
30:for(int i=0;i<len;++i){
 final double ai=a[i]*invMin;
 final double bi=b[i]*invMin;
result+=ai*bi;
}
TO:
40

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Tested:5581 patches
Compile failed:5194 patches
Compilation rate:0.06934241175416592
NNNNNNNNNNNNNNNNNNNNNNPPPNNNNNPPNNNPNNNNNNPNPNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPPNPNNNNNPNNPNNNNNNPPNNNNNNNPNNNNPNPPPNPNNNNPNPNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 20 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 10 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 15 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:5755 patches
Compile failed:5349 patches
Compilation rate:0.07054735013032146
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNPPPNPNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 78 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 6 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
9:result+=SPLIT_FACTOR*a[i]*b[i];
TO:
6

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 62 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 4 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
result+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Tested:6076 patches
Compile failed:5648 patches
Compilation rate:0.07044107965766952
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPNPPPPNPNNPPNNPNNNNNNNNNNNNNNNNNPPPPNPPNPNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 77 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
6

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 68 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:6414 patches
Compile failed:5937 patches
Compilation rate:0.07436856875584659
NNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPPPPNPNPNNNPNNNNPPNNNNNNNNNNNNNNNNNNPPPNNNNNNNNPPNPPPNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPNPPPPPPPPPNNNNNNNNNNNNNNPPPPNNNNNNNNNNPPNNNNNNNNNNPNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 7 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 24 patches...
Current actions:
UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 19 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 60 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:6695 patches
Compile failed:6206 patches
Compilation rate:0.07303958177744585
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNPNNNNPNNPPPNPNNNNNNNNNNPNNNNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 38 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 77 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
13:return sum;

Following are 3th generated patches:
Validating 18 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 69 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:7043 patches
Compile failed:6527 patches
Compilation rate:0.07326423399119693
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPNPPPPNNPNNNNNNPNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 17 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 50 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:7644 patches
Compile failed:7118 patches
Compilation rate:0.06881214024071167

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 82 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 68 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 4th generated patches:
Validating 47 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:8083 patches
Compile failed:7521 patches
Compilation rate:0.06952864035630335
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNPPNPNNPPPNNNNNNNPNPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPNNNNNNNPPPNNNNNPPPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 73 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 57 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

INSERT:
13:sum+=prod+prodLow;
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:8395 patches
Compile failed:7809 patches
Compilation rate:0.06980345443716499
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPPNPNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

INSERT:
16:prodHigh=prodHighNext;
TO:
29

INSERT:
17:prodLowSum+=a[i]*b[i]-prodHighNext;
TO:
29

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 167 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 141 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:double sPrime=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
16:prodHigh=prodHighNext;
TO:
29

INSERT:
17:prodLowSum+=a[i]*b[i]-prodHighNext;
TO:
29

INSERT:
18:sHighPrev=sHighPrev+prodHigh;
TO:
29

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 192 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Tested:9247 patches
Compile failed:8638 patches
Compilation rate:0.06585919757759273

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:double b1=b[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
9:double aSum=a1*b1;
TO:
6

INSERT:
10:double bSum=a1*b1;
TO:
6

UPDATE
FROM:
8:double prodLowSum=0;
TO:
11:double prodLow=a1*b1;

INSERT:
12:double prodHigh=a1*b1;
TO:
8

INSERT:
13:for(int i=1;i<len;++i){
 final double aSplit=a[i]*SPLIT_FACTOR;
 final double aHigh=aSplit-(aSplit-a[i]);
 final double aLow=a[i]-aHigh;
 final double bSplit=b[i]*SPLIT_FACTOR;
 final double bHigh=bSplit-(bSplit-b[i]);
 final double bLow=b[i]-bHigh;
 final double prod=a[i]*b[i];
 final double prodHighNew=prod-(prod-aHigh*bHigh);
 final double prodLowNew=aLow*bLow-(((prodHighNew-(prodHigh-prodHighNew))-aLow*bHigh)-aHigh*bLow);
aSum+=a[i];
bSum+=b[i];
prodLow+=prodLowNew;
prodHigh+=prodHighNew;
if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
}
TO:
8

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
15: final double aHigh=aSplit-(aSplit-a[i]);

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
16: final double aLow=a[i]-aHigh;

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
17: final double bSplit=b[i]*SPLIT_FACTOR;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
19: final double bLow=b[i]-bHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
20: final double prod=a[i]*b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
22: final double prodLowNew=aLow*bLow-(((prodHighNew-(prodHigh-prodHighNew))-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
20:prodLowSum+=prodLow;
TO:
25:prodLow+=prodLowNew;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
26:prodHigh+=prodHighNew;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
34:return prodHigh+(prodLow+(aSum+bSum)*SPLIT_FACTOR);
TO:
41

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 200 patches...
Tested:9625 patches
Compile failed:8977 patches
Compilation rate:0.06732467532467533
NNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNPNPNNNPNPPNPPNNPPPNNNPNNNNNNNNNPNNNNNNNNNNPPNPNNNPNNNNNNPPNNPNPPNNNNPNNPNPNPNNNNNNNNNNNNNNNNNNNNNNNNPNPPNPNPNNPNNPPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

INSERT:
14: final double sHighNext=a[len-1]*b[len-1];
TO:
21

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
15: final double sPrime=sHighCur-sHighNext;

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

DELETE:
Original line: 17 final double bLow=bi-bHigh;

INSERT:
17: final double result=sHighCur+sLowSum;
TO:
22

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
11:prodLowSum+=a[i]*b[i]-prodHigh;
TO:
18

INSERT:
17: final double result=sHighCur+sLowSum;
TO:
22

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 194 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

Following are 4th generated patches:
Validating 118 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

INSERT:
17: final double result=sHighCur+sLowSum;
TO:
22

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:10312 patches
Compile failed:9650 patches
Compilation rate:0.06419705197827774

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double r=0;
TO:
6

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 13 patches...
Current actions:
INSERT:
7:double r=0;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return r;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 25 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
r+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 59 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
r+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:10578 patches
Compile failed:9881 patches
Compilation rate:0.06589147286821706
NNNNNNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNPPPPPPNNNPPNNNNPNNNNNNNNNNNNNNNPPPPPNPNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 15 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 13 patches...
Current actions:
DELETE:
Original line: 5throw new DimensionMismatchException(len,b.length);

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 13 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:10748 patches
Compile failed:10014 patches
Compilation rate:0.0682917752139933
NNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNPPPPPNNNPNNPNPNNNNNNNNNNPNNNPNNPPPNPNPNNPPPNNNNNNNPNPPNPPNPPPPNNPPNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Current actions:
INSERT:
3:double sum=0;
TO:
2

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 10 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 77 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 34 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:11024 patches
Compile failed:10265 patches
Compilation rate:0.06884978229317852
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNNPNPNNNNNNNNNNNNNNPPNNPNPNPNPNPPPNNNNPPNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 52 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:11635 patches
Compile failed:10866 patches
Compilation rate:0.06609368285345939

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 49 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 84 patches...
Current actions:
DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:11953 patches
Compile failed:11162 patches
Compilation rate:0.06617585543378231
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNPNNPPNNNNNNNNNNNNNNPNPPPPNNNPNPNNNNNNNPPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 21 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 9 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 15 patches...
Current actions:
INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:12123 patches
Compile failed:11295 patches
Compilation rate:0.06829992576095026
NNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNPPPPPNNNNPNPNPNNNNNNNNNNPNNPNNNPPPNPNPPPNPNNNNNNNPNPNPNPNPPPPPPPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
21: final double result=prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 1th generated patches:
Validating 77 patches...
Current actions:
DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
21: final double result=prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 3th generated patches:
Validating 76 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 4th generated patches:
Validating 5 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Tested:12455 patches
Compile failed:11627 patches
Compilation rate:0.06647932557205942
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 72 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 43 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 35 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Tested:12762 patches
Compile failed:11897 patches
Compilation rate:0.06777934493026172
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNPPPNPPPNNPNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPPNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPPPNPNPPNNPNPPPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

Following are 0th generated patches:
Validating 41 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

Following are 2th generated patches:
Validating 148 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 3th generated patches:
Validating 160 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Tested:13303 patches
Compile failed:12435 patches
Compilation rate:0.06524844020145831

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 200 patches...
Tested:14071 patches
Compile failed:13183 patches
Compilation rate:0.06310852107170777

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

Following are 2th generated patches:
Validating 96 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 3th generated patches:
Validating 199 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

Following are 4th generated patches:
Validating 97 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

Tested:14692 patches
Compile failed:13715 patches
Compilation rate:0.06649877484345222
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPPNNNNPNNNNNPPNNNNNNNNNNNNPPPPNNNNNPNPNNNPPNNNNNNNNNNNNNNNNNPPNNPNNPNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNPNNPNNPNPNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPPNNNNNNNNNNNNNNNNNNNNNPPNNNPNPNNNNNNNNNNNNNNNNPNNPPNNNNNPPNPPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPPNNNPNNNNNPNPNNNNNNNNNNNNPPPPNNNNNPPPNNNNPNNNNNNNNNNNNNNNNPNPNPNNNPNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNPNNPNNPNNNNPNPNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 87 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 146 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 14 final double bi=b[i];

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Following are 4th generated patches:
Validating 23 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:15094 patches
Compile failed:14097 patches
Compilation rate:0.0660527361865642
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 17 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 21 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 19 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:15319 patches
Compile failed:14300 patches
Compilation rate:0.0665187022651609
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNPPPNPNPPPNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNPPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 3 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 60 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 3th generated patches:
Validating 5 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 59 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:15599 patches
Compile failed:14580 patches
Compilation rate:0.06532470030130137
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 17 final double bLow=bi-bHigh;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 104 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 104 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 17 final double bLow=bi-bHigh;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 17 final double bLow=bi-bHigh;

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 199 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:16345 patches
Compile failed:15302 patches
Compilation rate:0.06381156316916488
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNPPPPPNNNPNPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighPrev-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:17118 patches
Compile failed:16024 patches
Compilation rate:0.0639093352027106
NNNNNNNNNPPPPPPNNNNPNPNPNNNNPNNNNNNNPPNNNNNNNPNNPPPPNNNNNPNNNNNNPNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPPPPNNNNPNPPNNNNNNNNPNNNNNPNPPPPPNNPNPPPNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 87 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 111 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 86 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 152 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:17690 patches
Compile failed:16596 patches
Compilation rate:0.06184284906726965

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double prod;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
10:prod=a[i]*b[i];
TO:
9

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
11: final double aHigh=SPLIT_FACTOR*a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
12: final double bHigh=SPLIT_FACTOR*b[i];

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

INSERT:
15: final double sum=result+prod;
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
12: final double bHigh=SPLIT_FACTOR*b[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 61 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double prod;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
10:prod=a[i]*b[i];
TO:
9

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
11: final double aHigh=SPLIT_FACTOR*a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
12: final double bHigh=SPLIT_FACTOR*b[i];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
13: final double prodHigh=aHigh*bHigh;

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

INSERT:
15: final double sum=result+prod;
TO:
13

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
16: final double sHigh=SPLIT_FACTOR*sum;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 200 patches...
Tested:18304 patches
Compile failed:17210 patches
Compilation rate:0.05976835664335664

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 60 patches...
Current actions:
INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

Following are 2th generated patches:
Validating 91 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 174 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 147 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Tested:18921 patches
Compile failed:17827 patches
Compilation rate:0.05781935415675704

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 8 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 80 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 22 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 38 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Tested:19221 patches
Compile failed:18106 patches
Compilation rate:0.05800946881015556
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPPPPPPPPNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 103 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 108 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 3th generated patches:
Validating 65 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 4th generated patches:
Validating 104 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:19764 patches
Compile failed:18621 patches
Compilation rate:0.057832422586520944
NNNNNNNNNNNNNNNNNNNPNPNPNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNPNPPNPNNPPPNNNNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNPPNPNNNPNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 41 patches...
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 42 patches...
Tested:19851 patches
Compile failed:18697 patches
Compilation rate:0.05813309153191275
NPPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNNNNNNPNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:prod=prod+a[i]*b[i]+prodHigh;
TO:
23

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 178 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
12:prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
TO:
23

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 37result=0;

Tested:20215 patches
Compile failed:19040 patches
Compilation rate:0.058125154588177096
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPNNPNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPPPPPPPPNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
3: final double[] prodHigh=new double[a.length];

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
6:prodHigh[i]=a[i]*b[i];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
3: final double[] prodHigh=new double[a.length];

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
6:prodHigh[i]=a[i]*b[i];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
3: final double[] prodHigh=new double[a.length];

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

DELETE:
Original line: 5throw new DimensionMismatchException(len,b.length);

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
6:prodHigh[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 57 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
12:result+=prodHigh[i];
TO:
35

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 4th generated patches:
Validating 25 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
3: final double[] prodHigh=new double[a.length];

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
6:prodHigh[i]=a[i]*b[i];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:20849 patches
Compile failed:19609 patches
Compilation rate:0.059475274593505684
NNNNNNNNNNNNNNNNNPPPNPNPPPPNPNNNPNNNNPNNNPNNNPNNNPNNPNNPPPPPNPNNNNPNNPNNNNNNNPNNNNNNPNPNNPPPPNNNPNPNNPNNNNNNNNNNNNNPPPPPNNNNPPNPNNNPPNNNNPNNNNNNNNNNNNNNNNNNNNPNNNPNNNPNPPPNNPPPNPNNNNNNNNNPNPPPPPPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 51 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 8 patches...
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 41 patches...
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 46 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:21124 patches
Compile failed:19863 patches
Compilation rate:0.05969513349744367
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPNPPPPNNNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNPPPPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22: final double sHighPrev=prodHigh+prodHigh;

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 1th generated patches:
Validating 111 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22: final double sHighPrev=prodHigh+prodHigh;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 3th generated patches:
Validating 48 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 4th generated patches:
Validating 67 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24: final double sLowSum=(prodHigh-(sHighPrev-sPrime))+(prodHigh-sPrime);

Tested:21538 patches
Compile failed:20265 patches
Compilation rate:0.05910483796081344
NNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNPNNNPPPNPNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : math-3 > patch : 0 | Start : Sun Apr 07 16:34:10 HKT 2024 | End : 2024.04.07 AD at 17:23:30 HKT
