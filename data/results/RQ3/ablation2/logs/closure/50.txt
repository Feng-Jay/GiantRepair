Repair : closure_50
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/0.java
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/1.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 106 patches...
Current actions:
INSERT:
89:n.getParent().replaceChild(n,joinedString);
TO:
86

Following are 1th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
89:n.getParent().replaceChild(n,joinedString);
TO:
86

Following are 2th generated patches:
Validating 82 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
87:joinedString.addChildToBack(arrayFoldedChildren.get(i));
TO:
82

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 85arrayNode.addChildToBack(node);

INSERT:
85:for(int i=1;i<arrayFoldedChildren.size();i++){
joinedString=new Node(Token.ADD,joinedString,newString);
joinedString.addChildToBack(arrayFoldedChildren.get(i));
}
TO:
82

INSERT:
89:n.getParent().replaceChild(n,joinedString);
TO:
86

Following are 4th generated patches:
Validating 2 patches...
Tested:467 patches
Compile failed:449 patches
Compilation rate:0.03854389721627409
NNNNNNNNNNNNNNNNNNNNNPNNPPNPPNNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNPNNNNNNNNNNNNNNPNNNNNNNPPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/2.java
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 0th generated patches:
Validating 63 patches...
Current actions:
DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

Following are 1th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 2th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
57:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 3th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 4th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Tested:497 patches
Compile failed:461 patches
Compilation rate:0.07243460764587525
NNNNNNNPPPPPPPPNNPNPPPPPPPNPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/3.java
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=right==null?",":NodeUtil.getStringValue(right);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=right==null?",":NodeUtil.getStringValue(right);

Following are 1th generated patches:
Validating 200 patches...
Tested:698 patches
Compile failed:638 patches
Compilation rate:0.08595988538681948
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPPNPNPPNNPNNNNNNPNNNPNNNNNNPNNNNPPPNNNNNNNNNNNNPNNNNNNNNNNNNPNPNPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/4.java
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

INSERT:
24:if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
arrayFoldedChildren.add(elem);
}
TO:
24

DELETE:
Original line: 25if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}

INSERT:
28:if(prev!=null&&elem.getType()==Token.STRING){
Node joinedNode=NodeUtil.joinStringNodes(prev,elem,joinString);
foldedSize+=InlineCostEstimator.getCost(joinedNode);
arrayFoldedChildren.add(joinedNode);
}
TO:
29

INSERT:
34:foldedSize+=InlineCostEstimator.getCost(elem);
TO:
34

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
35:arrayFoldedChildren.add(elem);
TO:
34

INSERT:
41:if(prev!=null&&prev.getType()==Token.STRING){
Node joinedNode=NodeUtil.joinStringNodes(prev,null,joinString);
foldedSize+=InlineCostEstimator.getCost(joinedNode);
arrayFoldedChildren.add(joinedNode);
}
TO:
46

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 1th generated patches:
Validating 200 patches...
Tested:897 patches
Compile failed:837 patches
Compilation rate:0.06688963210702341
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/5.java
Current actions:
DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
28:elem=elem.getNext();
TO:
25

INSERT:
31:}

TO:
28

INSERT:
32:if(prev==null){
prev=elem;
}
TO:
28

INSERT:
43:foldedSize+=InlineCostEstimator.getCost(prev);
TO:
46

DELETE:
Original line: 44prev=elem;

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 21int foldedSize=0;

INSERT:
24:if(prev!=null&&prev.getType()==Token.STRING){
Node folded=Node.newString(prev.getString()+joinString+NodeUtil.getArrayElementStringValue(elem));
arrayFoldedChildren.add(folded);
prev=folded;
elem=elem.getNext();
continue;
}
TO:
25

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
31:}

TO:
28

INSERT:
32:if(prev==null){
prev=elem;
}
TO:
28

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

UPDATE
FROM:
42:arrayFoldedChildren.add(elem);
TO:
37:arrayFoldedChildren.add(prev);

INSERT:
42:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
arrayFoldedChildren.add(prev);
}
TO:
46

DELETE:
Original line: 44prev=elem;

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 2th generated patches:
Validating 2 patches...
Tested:1093 patches
Compile failed:1033 patches
Compilation rate:0.05489478499542543
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/6.java
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
52:foldedSize+=(arrayFoldedChildren.size()-1)*(joinString.length()+2);
TO:
51

Following are 2th generated patches:
Validating 175 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
52:foldedSize+=(arrayFoldedChildren.size()-1)*(joinString.length()+2);
TO:
51

Following are 3th generated patches:
Validating 176 patches...
Tested:1447 patches
Compile failed:1355 patches
Compilation rate:0.0635798203178991
PPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNPPNNNNNNNNNPNNNPPNNNNNNPNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNPPNNNNNNNNNPNNNPNPNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/7.java
Current actions:
INSERT:
56:}

TO:
51

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
54:reportCodeChange();
TO:
51

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
55:return n;
TO:
51

INSERT:
56:}

TO:
51

DELETE:
Original line: 90return n;

Following are 2th generated patches:
Validating 127 patches...
Current actions:
DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 37foldedSize+=sb.length()+2;

INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

INSERT:
54:reportCodeChange();
TO:
51

DELETE:
Original line: 55case 0 :

INSERT:
55:return n;
TO:
51

INSERT:
56:}

TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 65arrayNode.detachChildren();

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 71reportCodeChange();

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

DELETE:
Original line: 87reportCodeChange();

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 143 patches...
Current actions:
DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

INSERT:
55:return n;
TO:
51

INSERT:
56:}

TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 63return n;

DELETE:
Original line: 65arrayNode.detachChildren();

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

DELETE:
Original line: 87reportCodeChange();

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 136 patches...
Current actions:
INSERT:
56:}

TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 67Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);

DELETE:
Original line: 73default :

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

Tested:1808 patches
Compile failed:1716 patches
Compilation rate:0.05088495575221239
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/8.java
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

Following are 0th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 1th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 75return n;

Tested:1823 patches
Compile failed:1721 patches
Compilation rate:0.055951727921009324
NNNPPPPPPPPPPNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/9.java
Tested:1823 patches
Compile failed:1721 patches
Compilation rate:0.055951727921009324

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/10.java
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
27:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
34

DELETE:
Original line: 30sb.append(joinString);

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
36:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
46

UPDATE
FROM:
52:foldedSize+=arrayFoldedChildren.size()-1;
TO:
40:foldedSize+=arrayNode.getChildCount()-1;

UPDATE
FROM:
54:switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
TO:
41:switch (arrayNode.getChildCount()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayNode.getFirstChild();
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayNode.getChildCount()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
if(right!=null){
foldedSize+=InlineCostEstimator.getCost(right);
}
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayNode.children()){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

DELETE:
Original line: 49foldedSize+=sb.length()+2;

INSERT:
66:if(right!=null){
foldedSize+=InlineCostEstimator.getCost(right);
}
TO:
78

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

Following are 1th generated patches:
Validating 200 patches...
Tested:2017 patches
Compile failed:1915 patches
Compilation rate:0.05057015369360436
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/11.java
Current actions:
Wrap:
IfStatement
On:
[return n;]
Following are 0th generated patches:
Validating 14 patches...
Current actions:
DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()!=arrayNode.getChildCount()){
return n;
}
TO:
51

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 3th generated patches:
Validating 200 patches...
Tested:2227 patches
Compile failed:2107 patches
Compilation rate:0.05388414907947912
NNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/12.java
Current actions:
DELETE:
Original line: 27sb=new StringBuilder();

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
26:arrayFoldedChildren.add(elem);
TO:
25

DELETE:
Original line: 29else{
sb.append(joinString);
}

INSERT:
29:if(prev!=null){
foldedSize+=joinString.length();
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
34

UPDATE
FROM:
37:foldedSize+=sb.length()+2;
TO:
30:foldedSize+=joinString.length();

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
39:if(prev!=null){
foldedSize+=joinString.length();
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
46

UPDATE
FROM:
49:foldedSize+=sb.length()+2;
TO:
40:foldedSize+=joinString.length();

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 2th generated patches:
Validating 200 patches...
Tested:2424 patches
Compile failed:2303 patches
Compilation rate:0.04991749174917492
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/13.java
Current actions:
Wrap:
MethodDeclaration
On:
[List<Node> arrayFoldedChildren=Lists.newLinkedList();, return n;, String joinString=(right==null)?",":NodeUtil.getStringValue(right);, StringBuilder sb=null;, int foldedSize=0;, Node elem=arrayNode.getFirstChild();, while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}, {
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}, if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}, {
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}, else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, {
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, {
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, foldedSize+=sb.length()+2;, foldedSize+=sb.length()+2;, sb=null;, sb=null;, foldedSize+=InlineCostEstimator.getCost(elem);, foldedSize+=InlineCostEstimator.getCost(elem);, arrayFoldedChildren.add(elem);, arrayFoldedChildren.add(elem);, elem=elem.getNext();, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}, foldedSize+=sb.length()+2;, foldedSize+=arrayFoldedChildren.size()-1;, int originalSize=InlineCostEstimator.getCost(n);]
Following are 0th generated patches:
Validating 63 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
StringBuilder sb=null;
int foldedSize=0;
List<Node> arrayFoldedChildren=Lists.newLinkedList();
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
}
foldedSize+=arrayFoldedChildren.size()-1;
int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 36Preconditions.checkNotNull(prev);

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 44prev=elem;

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
StringBuilder sb=null;
int foldedSize=0;
List<Node> arrayFoldedChildren=Lists.newLinkedList();
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
}
foldedSize+=arrayFoldedChildren.size()-1;
int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 3th generated patches:
Validating 200 patches...
Tested:3061 patches
Compile failed:2812 patches
Compilation rate:0.08134596537079386
NNNNNNPPPPPPPPPPNNNNNNNNNNPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPNPNNPNNNNNNPPPPPPPPNNNNNPPPNNNPPPNNNNNPPPNPPNPNPNPNPNNNNNPNPNPNNPPPPNPPPPNPNNNNPNPPNNNPNPNNNNPPPPNPPPPNPNNNNPNNNNPPPNPPNPPNPPPPPNPNPPPPNNNNPNPPNNPPNPNNNPPPPPPPPNPPPNNNNNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/14.java
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

Following are 1th generated patches:
Validating 200 patches...
Tested:3262 patches
Compile failed:2998 patches
Compilation rate:0.0809319435928878
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPPNNNNNNNNNNNNPNNNNNPNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNPNNNNNNNPNNNNNNNNNNPNNNPNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/15.java
Current actions:
DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

Following are 0th generated patches:
Validating 41 patches...
Current actions:
DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

INSERT:
58:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 2th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 58reportCodeChange();

INSERT:
58:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 3th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 58reportCodeChange();

INSERT:
58:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

Following are 4th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Tested:3281 patches
Compile failed:3007 patches
Compilation rate:0.08351112465711673
NNNNNNPPPPPPPPPPNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/16.java
Current actions:
INSERT:
18:if(right==null){
right=new Node(Token.STRING,",");
}
TO:
17

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
35:}

TO:
17

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
63:}

TO:
46

INSERT:
70:}

TO:
46

INSERT:
72:}

TO:
46

INSERT:
78:}

TO:
51

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:if(right==null){
right=new Node(Token.STRING,",");
}
TO:
17

INSERT:
23:if(foldedStringNode==emptyStringNode){
return n;
}
TO:
17

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
35:}

TO:
17

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 63return n;

INSERT:
63:}

TO:
46

INSERT:
70:}

TO:
46

INSERT:
72:}

TO:
46

INSERT:
78:}

TO:
51

Following are 2th generated patches:
Validating 200 patches...
Tested:3669 patches
Compile failed:3395 patches
Compilation rate:0.07467974925047698
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/17.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 36 patches...
Current actions:
INSERT:
83:Node newArrayNode=Node.newArray(arrayFoldedChildren).copyInformationFrom(arrayNode);
TO:
82

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
84:newArrayNode.useSourceInfoIfMissingFromForTree(n);
TO:
82

DELETE:
Original line: 85arrayNode.addChildToBack(node);

INSERT:
85:n.getParent().replaceChild(n,newArrayNode);
TO:
82

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 85arrayNode.addChildToBack(node);

Following are 4th generated patches:
Validating 2 patches...
Current actions:
INSERT:
83:Node newArrayNode=Node.newArray(arrayFoldedChildren).copyInformationFrom(arrayNode);
TO:
82

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
85:n.getParent().replaceChild(n,newArrayNode);
TO:
82

Tested:4104 patches
Compile failed:3823 patches
Compilation rate:0.06846978557504874
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/18.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 21 patches...
Current actions:
INSERT:
83:Node newArrayNode=new Node(Token.ARRAYLIT,arrayFoldedChildren);
TO:
82

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
84:n.getParent().replaceChild(n,newArrayNode);
TO:
82

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
84:n.getParent().replaceChild(n,newArrayNode);
TO:
82

DELETE:
Original line: 85arrayNode.addChildToBack(node);

Following are 2th generated patches:
Validating 78 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 3th generated patches:
Validating 2 patches...
Current actions:
INSERT:
83:Node newArrayNode=new Node(Token.ARRAYLIT,arrayFoldedChildren);
TO:
82

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 4th generated patches:
Validating 200 patches...
Tested:4599 patches
Compile failed:3987 patches
Compilation rate:0.13307240704500978
NNNNNNNNNNNNNNNNPPPPPNNPPPPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPNPPPNPPPPNPPPNNNNNNPPNPNPPPNPPPPPNPNNPNPPNPPPPPPNPNPPPPPPPPNPPPPPPPPPPPPPPNPPNPPPNPNPPPPPPPNPPPPNPPPPNPPPNPPNNPPPPNPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPNPPPPPNPNPPPPNPPNPNPNNNPNNPPPNPPPPPNPPNNNPNPNNNNPPPPPPNPNPNPPPPPNPPPPPPPPPPPPPPPNPPPNNPPPPPPPPPPPPPNPNPPNNPPPNPPPPNPNPPPPPPPPPPPPPPPPPPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/19.java
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
61:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
56

INSERT:
66:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
69:reportCodeChange();
TO:
56

INSERT:
71:}

TO:
56

Following are 1th generated patches:
Validating 190 patches...
Current actions:
INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

DELETE:
Original line: 67Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

INSERT:
70:return n;
TO:
56

INSERT:
71:}

TO:
56

DELETE:
Original line: 75return n;

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 2th generated patches:
Validating 7 patches...
Current actions:
DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 55case 0 :

INSERT:
58:int originalSize=InlineCostEstimator.getCost(n);
TO:
56

INSERT:
59:int kJoinOverhead="[].join()".length();
TO:
56

INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 67Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

INSERT:
70:return n;
TO:
56

INSERT:
71:}

TO:
56

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 81return n;

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 87reportCodeChange();

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 15 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
58:int originalSize=InlineCostEstimator.getCost(n);
TO:
56

INSERT:
59:int kJoinOverhead="[].join()".length();
TO:
56

INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

INSERT:
61:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
56

INSERT:
65:arrayNode.detachChildren();
TO:
56

INSERT:
66:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
69:reportCodeChange();
TO:
56

INSERT:
70:return n;
TO:
56

INSERT:
71:}

TO:
56

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 196 patches...
Current actions:
DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
59:int kJoinOverhead="[].join()".length();
TO:
56

INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

INSERT:
61:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
56

INSERT:
65:arrayNode.detachChildren();
TO:
56

INSERT:
69:reportCodeChange();
TO:
56

INSERT:
71:}

TO:
56

Tested:4973 patches
Compile failed:4361 patches
Compilation rate:0.12306454856223607
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/20.java
Current actions:
DELETE:
Original line: 65arrayNode.detachChildren();

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 65arrayNode.detachChildren();

Following are 0th generated patches:
Validating 1 patches...
Tested:4975 patches
Compile failed:4361 patches
Compilation rate:0.12341708542713568
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/21.java
Tested:4975 patches
Compile failed:4361 patches
Compilation rate:0.12341708542713568

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/22.java
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

UPDATE
FROM:
19:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
19:List<Node> arrayFoldedChildren=new ArrayList<Node>();

DELETE:
Original line: 27sb=new StringBuilder();

DELETE:
Original line: 36Preconditions.checkNotNull(prev);

INSERT:
36:if(prev!=null){
arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));
}
TO:
46

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
77:}

TO:
56

DELETE:
Original line: 88break;

Following are 1th generated patches:
Validating 200 patches...
Tested:5174 patches
Compile failed:4560 patches
Compilation rate:0.11867027444916892
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/23.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
83:Node joinNode=Node.newString("");
TO:
82

INSERT:
84:joinNode.addChildToFront(Node.newString("[").copyInformationFrom(callTarget));
TO:
82

INSERT:
85:joinNode.addChildToBack(Node.newString("]").copyInformationFrom(callTarget));
TO:
82

INSERT:
86:n.getParent().replaceChild(n,joinNode);
TO:
82

UPDATE
FROM:
85:arrayNode.addChildToBack(node);
TO:
88:joinNode.addChildToBack(node);

Following are 1th generated patches:
Validating 200 patches...
Tested:5414 patches
Compile failed:4759 patches
Compilation rate:0.12098263760620613
NNNNNNNNPNPPPPPNPNNNNPNPPNNNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNPPNNPNNNNNNNPNNPNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPNNNPPNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNPNNNNPPNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/24.java
Current actions:
DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

DELETE:
Original line: 49foldedSize+=sb.length()+2;

INSERT:
55:if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(NodeUtil.isStringNode(foldedStringNode)){
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
56

DELETE:
Original line: 55case 0 :

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 63return n;

DELETE:
Original line: 68foldedStringNode=replacement;

DELETE:
Original line: 73default :

INSERT:
74:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
TO:
56

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

INSERT:
81:}

TO:
56

Following are 1th generated patches:
Validating 31 patches...
Current actions:
DELETE:
Original line: 60case 1 :

INSERT:
70:n.getParent().replaceChild(n,foldedStringNode);
TO:
56

INSERT:
71:reportCodeChange();
TO:
56

DELETE:
Original line: 73default :

INSERT:
81:}

TO:
56

DELETE:
Original line: 87reportCodeChange();

Following are 2th generated patches:
Validating 79 patches...
Current actions:
DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
48:int cost=arrayFoldedChildren.size()-1;
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
57:if(NodeUtil.isStringNode(foldedStringNode)){
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
56

INSERT:
65:Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
TO:
56

INSERT:
66:foldedStringNode=replacement;
TO:
56

INSERT:
67:if(cost>0){
return n;
}
TO:
56

INSERT:
72:return foldedStringNode;
TO:
56

INSERT:
74:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
TO:
56

INSERT:
77:Node result=Node.newString(NodeUtil.join(joinString,arrayFoldedChildren));
TO:
56

INSERT:
78:n.getParent().replaceChild(n,result);
TO:
56

INSERT:
79:reportCodeChange();
TO:
56

INSERT:
81:}

TO:
56

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 200 patches...
Tested:5695 patches
Compile failed:5040 patches
Compilation rate:0.11501316944688324
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/25.java
Current actions:
DELETE:
Original line: 55case 0 :

INSERT:
65:if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
TO:
56

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
84:reportCodeChange();
TO:
56

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
86:}

TO:
56

DELETE:
Original line: 87reportCodeChange();

Following are 1th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

INSERT:
20:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
20

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
52:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
51

INSERT:
53:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
59:else{
if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
}
TO:
56

INSERT:
76:foldedSize+="[].join()".length()+2;
TO:
56

INSERT:
77:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

INSERT:
80:arrayNode.detachChildren();
TO:
56

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
84:reportCodeChange();
TO:
56

INSERT:
85:return n;
TO:
56

INSERT:
86:}

TO:
56

DELETE:
Original line: 90return n;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

INSERT:
20:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
20

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
52:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
51

INSERT:
53:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
59:else{
if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
}
TO:
56

INSERT:
73:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
TO:
56

INSERT:
76:foldedSize+="[].join()".length()+2;
TO:
56

INSERT:
77:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

INSERT:
80:arrayNode.detachChildren();
TO:
56

INSERT:
85:return n;
TO:
56

INSERT:
86:}

TO:
56

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
52:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
51

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
59:else{
if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
}
TO:
56

INSERT:
76:foldedSize+="[].join()".length()+2;
TO:
56

INSERT:
77:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
84:reportCodeChange();
TO:
56

INSERT:
85:return n;
TO:
56

INSERT:
86:}

TO:
56

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 35 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
65:if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
TO:
56

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

INSERT:
76:foldedSize+="[].join()".length()+2;
TO:
56

INSERT:
77:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

DELETE:
Original line: 81return n;

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
86:}

TO:
56

DELETE:
Original line: 88break;

Tested:6104 patches
Compile failed:5449 patches
Compilation rate:0.10730668414154652
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/26.java
Current actions:
INSERT:
20:Node emptyStringNode=Node.newString("");
TO:
18

INSERT:
21:n.getParent().replaceChild(n,emptyStringNode);
TO:
18

INSERT:
25:boolean oneString=true;
TO:
18

INSERT:
30:break;
TO:
18

INSERT:
36:int index=0;
TO:
18

INSERT:
37:elem=arrayNode.getFirstChild();
TO:
18

INSERT:
39:foldedStringNode=Node.newString(foldedStringNode.getString()+NodeUtil.getArrayElementStringValue(elem)+((index==NodeUtil.getArrayLength(arrayNode)-1)?"":joinString));
TO:
18

INSERT:
43:n.getParent().replaceChild(n,foldedStringNode);
TO:
18

INSERT:
45:return foldedStringNode;
TO:
18

INSERT:
52:elem=arrayNode.getFirstChild();
TO:
22

Following are 1th generated patches:
Validating 200 patches...
Tested:6299 patches
Compile failed:5644 patches
Compilation rate:0.10398475948563264
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/27.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
83:Node result=Node.newString("[");
TO:
82

DELETE:
Original line: 83arrayNode.detachChildren();

UPDATE
FROM:
85:arrayNode.addChildToBack(node);
TO:
85:result.addChildToBack(node);

INSERT:
86:result.addChildToBack(Node.newString(joinString));
TO:
85

INSERT:
88:result.removeChild(result.getLastChild());
TO:
86

INSERT:
89:result.getParent().replaceChild(n,result);
TO:
86

Following are 1th generated patches:
Validating 200 patches...
Tested:6538 patches
Compile failed:5724 patches
Compilation rate:0.12450290608748853
NNNNNNNNPPPPPPPNPNNNNNPNPNNNNNNNNNPPPPPPPPPPPPPPPPPNNNNNNNPPNPPPPPNPPPNNPPNPPPPNNNNNNPNPNNNPNPNNNNPPPNPPPNPNPPPPPPPPPPPPPPPPPPPPPPPNPNPNNPPPNPNPPNPPPPPPPPPPPPPPPPPPNNNNPPPPNPNPPPNPPPPPNNPPPPNPNNPNPPPPPNNNPPPPPPPPPPPPPPPPPPNNPPPNPPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/28.java
Current actions:
INSERT:
28:foldedSize-=InlineCostEstimator.getCost(arrayNode);
TO:
46

DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 39sb=null;

INSERT:
48:foldedSize+=joinString.length()*(arrayNode.getChildCount()-1);
TO:
73

INSERT:
56:node=replacement;
TO:
83

INSERT:
59:arrayNode.addChildToBack(Node.newString(joinString).copyInformationFrom(node));
TO:
85

Following are 1th generated patches:
Validating 200 patches...
Tested:6735 patches
Compile failed:5921 patches
Compilation rate:0.1208611729769859
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/29.java
Current actions:
INSERT:
52:if(arrayFoldedChildren.isEmpty()){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
59:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
51

INSERT:
60:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
51

INSERT:
68:n.getParent().replaceChild(n,foldedStringNode);
TO:
51

INSERT:
69:reportCodeChange();
TO:
51

INSERT:
70:return foldedStringNode;
TO:
51

INSERT:
75:foldedSize+=kJoinOverhead;
TO:
53

INSERT:
84:reportCodeChange();
TO:
53

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Following are 1th generated patches:
Validating 86 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.isEmpty()){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 55case 0 :

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
59:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
51

INSERT:
60:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
51

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

INSERT:
64:if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
TO:
51

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

INSERT:
68:n.getParent().replaceChild(n,foldedStringNode);
TO:
51

INSERT:
69:reportCodeChange();
TO:
51

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 71reportCodeChange();

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

INSERT:
74:int kJoinOverhead="[].join()".length();
TO:
53

INSERT:
76:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
53

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

INSERT:
77:if(foldedSize>originalSize){
return n;
}
TO:
53

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
53

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Following are 2th generated patches:
Validating 91 patches...
Current actions:
DELETE:
Original line: 55case 0 :

INSERT:
68:n.getParent().replaceChild(n,foldedStringNode);
TO:
51

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

INSERT:
80:arrayNode.detachChildren();
TO:
53

DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
60:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
51

INSERT:
63:arrayNode.detachChildren();
TO:
51

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 25 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.isEmpty()){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
58:if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
51

INSERT:
74:int kJoinOverhead="[].join()".length();
TO:
53

INSERT:
75:foldedSize+=kJoinOverhead;
TO:
53

INSERT:
76:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
53

INSERT:
77:if(foldedSize>originalSize){
return n;
}
TO:
53

INSERT:
80:arrayNode.detachChildren();
TO:
53

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
53

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Tested:6912 patches
Compile failed:6098 patches
Compilation rate:0.1177662037037037
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/30.java
Current actions:
DELETE:
Original line: 21int foldedSize=0;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 37foldedSize+=sb.length()+2;

INSERT:
37:sb.append(NodeUtil.getArrayElementStringValue(elem));
TO:
36

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
38:arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
49:sb.append(NodeUtil.getArrayElementStringValue(prev));
TO:
48

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
50:arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 2th generated patches:
Validating 200 patches...
Tested:7507 patches
Compile failed:6481 patches
Compilation rate:0.13667243905688026
NNPPPPPPPPPPNPPPNPPPPPPNPNPPPNPNPNPPNPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPNPPPPPPPPNPPPPPPPPPPNNNPPPPPPNPPNPPNNNNNNNNPPPNPPPNNNPPNNPNNNPNNNNPPPNPNPNNPNNPNPNNNPPPPPPPPPPPPNPPNPNPNPNPNNNNNNPPNNPPPPPPPPPPNPPPPPNPPPNNNPNPPNPNNNNPNNPNPPPPPPNNPNNNPPPPNNPNNNPPNNPPNNPPNNNNNNPNPPPPPNPPNNNNNPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/31.java
Current actions:
INSERT:
19:String joinString=NodeUtil.getStringValue(right);
TO:
17

INSERT:
20:boolean isSimpleString=true;
TO:
17

INSERT:
21:for(int i=0;i<joinString.length();i++){
char ch=joinString.charAt(i);
if(ch=='"'||ch=='\\'){
isSimpleString=false;
break;
}
}
TO:
17

INSERT:
28:if(isSimpleString){
int foldedSize=0;
for(Node elem : arrayNode.children()){
foldedSize+=elem.getString().length();
}
int joinStringLength=joinString.length();
foldedSize+=(arrayNode.getChildCount()-1)*joinStringLength;
foldedSize+="[].join()".length();
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
String joined=Joiner.on(joinString).join(arrayNode.getStrings());
Node replacement=Node.newString(joined);
n.getParent().replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
TO:
17

Following are 1th generated patches:
Validating 200 patches...
Tested:7705 patches
Compile failed:6679 patches
Compilation rate:0.13316028552887735
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/32.java
Current actions:
INSERT:
19:StringBuilder sb=new StringBuilder();
TO:
18

DELETE:
Original line: 20StringBuilder sb=null;

INSERT:
20:for(Node elem : NodeUtil.findLhsNodesInNode(arrayNode)){
String value=NodeUtil.getArrayElementStringValue(elem);
if(value==null){
return n;
}
sb.append(value);
if(elem.getNext()!=null){
sb.append(joinString);
}
}
TO:
18

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 25if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}

INSERT:
30:Node foldedStringNode=Node.newString(sb.toString());
TO:
51

INSERT:
31:Node parent=n.getParent();
TO:
51

INSERT:
32:parent.replaceChild(n,foldedStringNode);
TO:
51

DELETE:
Original line: 34else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}

INSERT:
35:}

TO:
51

DELETE:
Original line: 44prev=elem;

DELETE:
Original line: 45elem=elem.getNext();

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 73default :

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 87reportCodeChange();

DELETE:
Original line: 88break;

Following are 1th generated patches:
Validating 200 patches...
Tested:7899 patches
Compile failed:6873 patches
Compilation rate:0.12988985947588302
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/33.java
Current actions:
DELETE:
Original line: 27sb=new StringBuilder();

DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 38arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));

DELETE:
Original line: 81return n;

Following are 1th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 30sb.append(joinString);

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 72return foldedStringNode;

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 81return n;

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 85arrayNode.addChildToBack(node);

DELETE:
Original line: 87reportCodeChange();

Following are 2th generated patches:
Validating 59 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 22Node prev=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 65arrayNode.detachChildren();

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 72return foldedStringNode;

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 65 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 51 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

INSERT:
30:else{
prev=elem;
}
TO:
33

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 90return n;

Tested:8008 patches
Compile failed:6981 patches
Compilation rate:0.12824675324675325
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/34.java
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
32:sb.append(NodeUtil.getArrayElementStringValue(elem));
TO:
25:foldedSize+=NodeUtil.getArrayElementStringValue(elem).length()+2;

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 29else{
sb.append(joinString);
}

DELETE:
Original line: 39sb=null;

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 1th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
32:sb.append(NodeUtil.getArrayElementStringValue(elem));
TO:
25:foldedSize+=NodeUtil.getArrayElementStringValue(elem).length()+2;

INSERT:
29:if(prev!=null){
foldedSize+=joinString.length()+2;
}
TO:
34

DELETE:
Original line: 30sb.append(joinString);

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
38:if(prev!=null){
foldedSize+=joinString.length()+2;
}
TO:
46

UPDATE
FROM:
49:foldedSize+=sb.length()+2;
TO:
39:foldedSize+=joinString.length()+2;

Following are 2th generated patches:
Validating 200 patches...
Tested:8405 patches
Compile failed:7205 patches
Compilation rate:0.14277215942891136
NPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPNPPPNNNNPPNPNNNNNNNPNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPNNNNNNNPNPNNPNPNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNPPNPNNPPPNNNNNNNNNNNNNNPPNNNPNNNNNNNNNPNPPNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNPNNNNNNNNNNNNPNNNNPPNNNNPNNNNPNPNPNPNNNNPNNPNNNNNPNPNPNPNPPNPNNNPNNNNNNNNPPPPPP
Finish : closure-50 > patch : 0 | Start : Wed Apr 10 10:59:06 HKT 2024 | End : 2024.04.10 AD at 11:24:05 HKT
