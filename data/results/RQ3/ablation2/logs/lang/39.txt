Repair : lang_39
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/0.java
Current actions:
INSERT:
15:boolean[] noMoreMatchesForSearchIndex=new boolean[searchLength];
TO:
14

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
15:boolean[] noMoreMatchesForSearchIndex=new boolean[searchLength];
TO:
14

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
56:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
57:if(noMoreMatchesForSearchIndex[i]||noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
62:noMoreMatchesForSearchIndex[i]=true;

Following are 2th generated patches:
Validating 53 patches...
Current actions:
INSERT:
15:boolean[] noMoreMatchesForSearchIndex=new boolean[searchLength];
TO:
14

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
62:noMoreMatchesForSearchIndex[i]=true;

Following are 3th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
62:noMoreMatchesForSearchIndex[i]=true;

Following are 4th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
56:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
57:if(noMoreMatchesForSearchIndex[i]||noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

Tested:63 patches
Compile failed:57 patches
Compilation rate:0.09523809523809523
NNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/1.java
Tested:63 patches
Compile failed:57 patches
Compilation rate:0.09523809523809523

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/2.java
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:boolean noMoreMatchesForReplIndex[]=new boolean[searchLength];

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:boolean noMoreMatchesForReplIndex[]=new boolean[searchLength];

Following are 0th generated patches:
Validating 1 patches...
Tested:65 patches
Compile failed:57 patches
Compilation rate:0.12307692307692308
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/3.java
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

INSERT:
15:char[][] newText=new char[text.length()+1];
TO:
14

DELETE:
Original line: 24noMoreMatchesForReplIndex[i]=true;

DELETE:
Original line: 29replaceIndex=i;

INSERT:
34:}

TO:
47

DELETE:
Original line: 48buf.append(text.charAt(i));

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
48:noMoreMatchesForReplIndex[i]=text.length();

INSERT:
60:newText[textLength][i]=text.charAt(i);
TO:
72

DELETE:
Original line: 73buf.append(text.charAt(i));

DELETE:
Original line: 75String result=buf.toString();

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22tempIndex=text.indexOf(searchList[i]);

DELETE:
Original line: 24noMoreMatchesForReplIndex[i]=true;

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

INSERT:
34:}

TO:
47

INSERT:
35:for(int i=0;i<replacementList[replaceIndex].length();i++){
newText[textIndex+1][textIndex+1+i]=replacementList[replaceIndex].charAt(i);
}
TO:
47

DELETE:
Original line: 48buf.append(text.charAt(i));

Following are 2th generated patches:
Validating 20 patches...
Current actions:
DELETE:
Original line: 20continue;

DELETE:
Original line: 26else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}

INSERT:
28:for(int i=0;i<=text.length();i++){
newText[i]=new char[text.length()+increase];
}
TO:
44

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

INSERT:
33:newText[textIndex+1][i]=text.charAt(i);
TO:
47

INSERT:
34:}

TO:
47

INSERT:
35:for(int i=0;i<replacementList[replaceIndex].length();i++){
newText[textIndex+1][textIndex+1+i]=replacementList[replaceIndex].charAt(i);
}
TO:
47

DELETE:
Original line: 75String result=buf.toString();

Following are 3th generated patches:
Validating 200 patches...
Tested:674 patches
Compile failed:603 patches
Compilation rate:0.10534124629080119
NNNNNNNNNNPPPPNNNPPNPNPPPPNPNPNNNPNNNNPPPPPPNPNPPPPNNNNNNPPNNNNNNNPNPNNNNNNPNNPNNPNNNNPNNNNNNNPPPPNNPPNNNNNPNNNPNPNNPNNPPPNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNPPNPNPPNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/4.java
Current actions:
Wrap:
MethodDeclaration
On:
[int start=0;, {
return text;
}, if(textIndex==-1){
return text;
}, return text;, int increase=0;, {
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}, for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}, int greater=replacementList[i].length()-searchList[i].length();, int textIndex=-1;, int replaceIndex=-1;, int tempIndex=-1;, for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}, {
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}, {
continue;
}, if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}, continue;, {
noMoreMatchesForReplIndex[i]=true;
}, if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}, noMoreMatchesForReplIndex[i]=true;]
Following are 0th generated patches:
Validating 3 patches...
Current actions:
INSERT:
2:private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
return text;
}
if(timeToLive<0){
throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
}
int searchLength=searchList.length;
int replacementLength=replacementList.length;
if(searchLength!=replacementLength){
throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
}
boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
int textIndex=-1;
int replaceIndex=-1;
int tempIndex=-1;
int start=0;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
if(textIndex==-1){
return text;
}
int increase=0;
for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}
increase=Math.min(increase,text.length()/5);
StringBuilder buf=new StringBuilder(text.length()+increase);
while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}
int textLength=text.length();
for(int i=start;i<textLength;i++){
buf.append(text.charAt(i));
}
String result=buf.toString();
if(!repeat){
return result;
}
return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
}
TO:
1

DELETE:
Original line: 15int textIndex=-1;

DELETE:
Original line: 16int replaceIndex=-1;

DELETE:
Original line: 17int tempIndex=-1;

DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
2:private static String replaceEach(String text,String[] searchList,String[] replacementList,boolean repeat,int timeToLive){
if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
return text;
}
if(timeToLive<0){
throw new IllegalStateException("TimeToLive of "+timeToLive+" is less than 0: "+text);
}
int searchLength=searchList.length;
int replacementLength=replacementList.length;
if(searchLength!=replacementLength){
throw new IllegalArgumentException("Search and Replace array lengths don't match: "+searchLength+" vs "+replacementLength);
}
boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
int textIndex=-1;
int replaceIndex=-1;
int tempIndex=-1;
int start=0;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
if(textIndex==-1){
return text;
}
int increase=0;
for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}
increase=Math.min(increase,text.length()/5);
StringBuilder buf=new StringBuilder(text.length()+increase);
while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}
int textLength=text.length();
for(int i=start;i<textLength;i++){
buf.append(text.charAt(i));
}
String result=buf.toString();
if(!repeat){
return result;
}
return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);
}
TO:
1

DELETE:
Original line: 15int textIndex=-1;

DELETE:
Original line: 16int replaceIndex=-1;

DELETE:
Original line: 17int tempIndex=-1;

DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
23:tempIndex=text.indexOf(searchList[i],start);

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
23:tempIndex=text.indexOf(searchList[i],start);

Following are 3th generated patches:
Validating 200 patches...
Tested:1076 patches
Compile failed:1003 patches
Compilation rate:0.06784386617100371
NPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/5.java
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

Following are 0th generated patches:
Validating 200 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
int tempIndex;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    increase=Math.min(increase,text.length() / 5);
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

1 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    increase=Math.min(increase,text.length() / 5);
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

2 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    increase=Math.min(increase,text.length() / 5);
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

3 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    increase=Math.min(increase,text.length() / 5);
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
buf.append(text.charAt(start));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

4 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

5 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    for (int i=0; i < searchList.length; i++) {
    }
    increase=Math.min(increase,text.length() / 5);
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

6 th patch/200
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:37:56 HKT
--------------- END -----------------
Current actions:
UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

DELETE:
Original line: 39int greater=replacementList[i].length()-searchList[i].length();

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
39:for(start=0;start<textIndex;start++){
buf.append(text.charAt(start));
}

Following are 1th generated patches:
Validating 14 patches...
Current actions:
UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

UPDATE
FROM:
48:buf.append(text.charAt(i));
TO:
40:buf.append(text.charAt(start));

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
36:int start=0;
TO:
18:int start;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
39:for(start=0;start<textIndex;start++){
buf.append(text.charAt(start));
}

Following are 3th generated patches:
Validating 13 patches...
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

DELETE:
Original line: 37int increase=0;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
39:for(start=0;start<textIndex;start++){
buf.append(text.charAt(start));
}

UPDATE
FROM:
48:buf.append(text.charAt(i));
TO:
40:buf.append(text.charAt(start));

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

Following are 4th generated patches:
Validating 200 patches...
Tested:1691 patches
Compile failed:1591 patches
Compilation rate:0.05913660555884092
NNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNPPNPNPNNNNNNNPNNNNNNNPPNPPNNNNNNNPPPPNNPNPNPNNNNNNNNPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/6.java
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

Following are 0th generated patches:
Validating 92 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

INSERT:
19:int start=0;
TO:
17

UPDATE
FROM:
19:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
21:if(noMoreMatchesForReplIndex[i]>=searchList[i].length()||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
24:noMoreMatchesForReplIndex[i]=true;
TO:
26:noMoreMatchesForReplIndex[i]=searchList[i].length();

DELETE:
Original line: 36int start=0;

Following are 1th generated patches:
Validating 63 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

UPDATE
FROM:
19:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
21:if(noMoreMatchesForReplIndex[i]>=searchList[i].length()||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
24:tempIndex=text.indexOf(searchList[i],start);

UPDATE
FROM:
24:noMoreMatchesForReplIndex[i]=true;
TO:
26:noMoreMatchesForReplIndex[i]=searchList[i].length();

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
62:noMoreMatchesForReplIndex[i]=searchList[i].length();

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

INSERT:
15:String[] textToReplace=new String[searchLength];
TO:
14

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
24:tempIndex=text.indexOf(searchList[i],start);

UPDATE
FROM:
24:noMoreMatchesForReplIndex[i]=true;
TO:
26:noMoreMatchesForReplIndex[i]=searchList[i].length();

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
62:noMoreMatchesForReplIndex[i]=searchList[i].length();

Following are 3th generated patches:
Validating 200 patches...
Tested:2213 patches
Compile failed:2111 patches
Compilation rate:0.04609127880704925

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/7.java
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

Following are 0th generated patches:
Validating 25 patches...
Current actions:
UPDATE
FROM:
19:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
19:if(noMoreMatchesForReplIndex[i]>=0||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
61:noMoreMatchesForReplIndex[i]=-1;

Following are 1th generated patches:
Validating 60 patches...
Current actions:
UPDATE
FROM:
19:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
19:if(noMoreMatchesForReplIndex[i]>=0||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
24:noMoreMatchesForReplIndex[i]=true;
TO:
24:noMoreMatchesForReplIndex[i]=-1;

UPDATE
FROM:
56:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
56:if(noMoreMatchesForReplIndex[i]>=0||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
61:noMoreMatchesForReplIndex[i]=-1;

Following are 2th generated patches:
Validating 68 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

Following are 3th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

UPDATE
FROM:
61:noMoreMatchesForReplIndex[i]=true;
TO:
61:noMoreMatchesForReplIndex[i]=-1;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
14:boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
TO:
14:int[] noMoreMatchesForReplIndex=new int[searchLength];

UPDATE
FROM:
19:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
19:if(noMoreMatchesForReplIndex[i]>=0||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

UPDATE
FROM:
56:if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
TO:
56:if(noMoreMatchesForReplIndex[i]>=0||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

Tested:2367 patches
Compile failed:2265 patches
Compilation rate:0.043092522179974654
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/8.java
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

Following are 0th generated patches:
Validating 25 patches...
Current actions:
UPDATE
FROM:
36:int start=0;
TO:
18:int start;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

Following are 2th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

Following are 3th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

INSERT:
37:start=0;
TO:
35

Following are 4th generated patches:
Validating 10 patches...
Current actions:
UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

UPDATE
FROM:
36:int start=0;
TO:
18:int start;

INSERT:
37:start=0;
TO:
35

Tested:2401 patches
Compile failed:2298 patches
Compilation rate:0.042898792169929194
NNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/9.java
Tested:2401 patches
Compile failed:2298 patches
Compilation rate:0.042898792169929194

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/10.java
Current actions:
Move
FROM:
Former Line 36:int start=0;
TO:
Current Line 2:Block

Following are 0th generated patches:
Validating 101 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

7 th patch/101
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:40:24 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    for (int i=0; i < searchList.length; i++) {
    }
    increase=Math.min(increase,text.length() / 5);
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

8 th patch/101
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:40:24 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
    int start=0;
    int increase=0;
    for (int i=0; i < searchList.length; i++) {
    }
    StringBuilder buf=new StringBuilder(text.length() + increase);
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

9 th patch/101
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:40:24 HKT
--------------- END -----------------
Current actions:
INSERT:
18:int start=0;
TO:
17

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

Following are 1th generated patches:
Validating 5 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
int start=0;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
      tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

10 th patch/106
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:40:36 HKT
--------------- END -----------------
Current actions:
INSERT:
18:int start=0;
TO:
17

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
18:int start=0;
TO:
17

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
23:tempIndex=text.indexOf(searchList[i],start);

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

Following are 4th generated patches:
Validating 200 patches...
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
int start=0;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
tempIndex=text.indexOf(searchList[i],start);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

11 th patch/311
Trace:

START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:41:13 HKT
--------------- END -----------------
FILE : /data/PLM4APR/tmp/defects4j_buggy//lang/lang_39_buggy/src/java/org/apache/commons/lang3/StringUtils.java
SUCCESS
//Following are generated patch:
  private static String replaceEach(  String text,  String[] searchList,  String[] replacementList,  boolean repeat,  int timeToLive){
    if (text == null || text.length() == 0 || searchList == null || searchList.length == 0 || replacementList == null || replacementList.length == 0) {
      return text;
    }
    if (timeToLive < 0) {
      throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
    }
    int searchLength=searchList.length;
    int replacementLength=replacementList.length;
    if (searchLength != replacementLength) {
      throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
    }
    boolean[] noMoreMatchesForReplIndex=new boolean[searchLength];
    int textIndex=-1;
    int replaceIndex=-1;
    int tempIndex=-1;
int start=0;
    for (int i=0; i < searchLength; i++) {
      if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
        continue;
      }
tempIndex=text.indexOf(searchList[i]);
      if (tempIndex == -1) {
        noMoreMatchesForReplIndex[i]=true;
      }
 else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex=tempIndex;
          replaceIndex=i;
        }
      }
    }
    if (textIndex == -1) {
      return text;
    }
StringBuilder buf=new StringBuilder(text.length());
    while (textIndex != -1) {
      for (int i=start; i < textIndex; i++) {
        buf.append(text.charAt(i));
      }
      buf.append(replacementList[replaceIndex]);
      start=textIndex + searchList[replaceIndex].length();
      textIndex=-1;
      replaceIndex=-1;
      tempIndex=-1;
      for (int i=0; i < searchLength; i++) {
        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
          continue;
        }
        tempIndex=text.indexOf(searchList[i],start);
        if (tempIndex == -1) {
          noMoreMatchesForReplIndex[i]=true;
        }
 else {
          if (textIndex == -1 || tempIndex < textIndex) {
            textIndex=tempIndex;
            replaceIndex=i;
          }
        }
      }
    }
    int textLength=text.length();
    for (int i=start; i < textLength; i++) {
      buf.append(text.charAt(i));
    }
    String result=buf.toString();
    if (!repeat) {
      return result;
    }
    return replaceEach(result,searchList,replacementList,repeat,timeToLive - 1);
  }

12 th patch/311
Trace:
UPDATEExpressionStmt;UPDATEAssign;MethodInv;MethodInvForVar(OTHER)
START : 
2024.04.07 AD at 13:35:37 HKT
---------TIME : 
2024.04.07 AD at 13:41:13 HKT
--------------- END -----------------
Current actions:
INSERT:
18:int start=0;
TO:
17

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
23:tempIndex=text.indexOf(searchList[i],start);

DELETE:
Original line: 36int start=0;

UPDATE
FROM:
45:StringBuilder buf=new StringBuilder(text.length()+increase);
TO:
37:StringBuilder buf=new StringBuilder(text.length());

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

Tested:2672 patches
Compile failed:2546 patches
Compilation rate:0.04715568862275449
NNNNNNNNNNNNNNNNPNNNPPPPNPNNNPNNNNPNNNNNNNPNNNNNNNNNNNPNNNNNPPPPPPPPPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/11.java
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

INSERT:
40:if(text.charAt(j)==searchList[i].charAt(0)){
replaceIndex=-1;
break;
}
TO:
63

INSERT:
46:if(replaceIndex>=0){
for(int j=0;j<searchList[i].length();j++){
if(text.charAt(textIndex+j)!=searchList[i].charAt(j)){
replaceIndex=-1;
break;
}
}
}
TO:
63

INSERT:
60:else{
replaceIndex=i;
if(textIndex==0){
noMoreMatchesForReplIndex[i]=true;
}
else{
for(int j=textIndex-1;j>=0;j--){
if(noMoreMatchesForReplIndex[i]){
break;
}
if(text.charAt(j)==searchList[i].charAt(0)){
replaceIndex=-1;
break;
}
}
}
if(replaceIndex>=0){
for(int j=0;j<searchList[i].length();j++){
if(text.charAt(textIndex+j)!=searchList[i].charAt(j)){
replaceIndex=-1;
break;
}
}
}
if(replaceIndex>=0){
text=text.substring(0,textIndex)+replacementList[replaceIndex]+text.substring(textIndex+searchList[i].length());
}
}
TO:
63

DELETE:
Original line: 79return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);

INSERT:
96:buf.append(text);
TO:
45

INSERT:
97:return buf.toString();
TO:
45

Following are 1th generated patches:
Validating 200 patches...
Tested:3021 patches
Compile failed:2895 patches
Compilation rate:0.041708043694141016
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/12.java
Current actions:
INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

INSERT:
16:int replaceIndex[]=new int[searchLength];
TO:
14

UPDATE
FROM:
15:int textIndex=-1;
TO:
17:int searchIndex=-1;

UPDATE
FROM:
16:int replaceIndex=-1;
TO:
18:int replaceIndex2=-1;

UPDATE
FROM:
27:if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
TO:
29:if(textIndex[i]==-1||tempIndex<textIndex[i]){
textIndex[i]=tempIndex;
replaceIndex[i]=i;
}

UPDATE
FROM:
28:textIndex=tempIndex;
TO:
30:textIndex[i]=tempIndex;

UPDATE
FROM:
29:replaceIndex=i;
TO:
31:replaceIndex[i]=i;

UPDATE
FROM:
33:if(textIndex==-1){
return text;
}
TO:
35:if(textIndex[0]==-1){
return text;
}

DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

INSERT:
48:while(textIndex[0]!=-1){
for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex[0]]);
start=textIndex[0]+searchList[replaceIndex[0]].length();
textIndex[0]=-1;
replaceIndex[0]=-1;
tempIndex=-1;
searchIndex=0;
replaceIndex2=0;
for(int j=1;j<searchLength;j++){
if(textIndex[j]==-1){
continue;
}
if(textIndex[j]<textIndex[searchIndex]){
searchIndex=j;
replaceIndex2=j;
}
else{
if(textIndex[j]==textIndex[searchIndex]){
if(replaceIndex[j]<replaceIndex[searchIndex]){
searchIndex=j;
replaceIndex2=j;
}
}
}
}
textIndex[searchIndex]=-1;
if(!noMoreMatchesForReplIndex[searchIndex]){
tempIndex=text.indexOf(searchList[searchIndex],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[searchIndex]=true;
}
else{
if(textIndex[searchIndex]==-1||tempIndex<textIndex[searchIndex]){
textIndex[searchIndex]=tempIndex;
replaceIndex[searchIndex]=replaceIndex2;
}
}
}
}
TO:
45

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
49:for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}

UPDATE
FROM:
50:buf.append(replacementList[replaceIndex]);
TO:
52:buf.append(replacementList[replaceIndex[0]]);

UPDATE
FROM:
51:start=textIndex+searchList[replaceIndex].length();
TO:
53:start=textIndex[0]+searchList[replaceIndex[0]].length();

UPDATE
FROM:
52:textIndex=-1;
TO:
54:textIndex[0]=-1;

UPDATE
FROM:
53:replaceIndex=-1;
TO:
55:replaceIndex[0]=-1;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

UPDATE
FROM:
50:buf.append(replacementList[replaceIndex]);
TO:
52:buf.append(replacementList[replaceIndex[0]]);

INSERT:
57:searchIndex=0;
TO:
54

INSERT:
63:if(textIndex[j]<textIndex[searchIndex]){
searchIndex=j;
replaceIndex2=j;
}
TO:
58

INSERT:
76:tempIndex=text.indexOf(searchList[searchIndex],start);
TO:
58

INSERT:
82:textIndex[searchIndex]=tempIndex;
TO:
63

Following are 2th generated patches:
Validating 200 patches...
Tested:3602 patches
Compile failed:3468 patches
Compilation rate:0.03720155469183787

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/13.java
Current actions:
DELETE:
Original line: 15int textIndex=-1;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 15int textIndex=-1;

INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 16int replaceIndex=-1;

INSERT:
16:int replaceIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 17int tempIndex=-1;

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
21:textIndex[i]=text.indexOf(searchList[i]);

DELETE:
Original line: 28textIndex=tempIndex;

INSERT:
44:if(index==-1){
continue;
}
TO:
45

DELETE:
Original line: 47for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 50buf.append(replacementList[replaceIndex]);

INSERT:
51:start=index+searchList[i].length();
TO:
69

DELETE:
Original line: 53replaceIndex=-1;

DELETE:
Original line: 54tempIndex=-1;

DELETE:
Original line: 56if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

DELETE:
Original line: 59tempIndex=text.indexOf(searchList[i],start);

DELETE:
Original line: 60if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}

DELETE:
Original line: 63else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}

Following are 1th generated patches:
Validating 102 patches...
Current actions:
INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 16int replaceIndex=-1;

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
21:textIndex[i]=text.indexOf(searchList[i]);

DELETE:
Original line: 28textIndex=tempIndex;

DELETE:
Original line: 29replaceIndex=i;

INSERT:
42:for(int i=0;i<searchList.length;i++){
int index=textIndex[i];
if(index==-1){
continue;
}
for(int j=start;j<index;j++){
buf.append(text.charAt(j));
}
buf.append(replacementList[replaceIndex[i]]);
start=index+searchList[i].length();
}
TO:
45

DELETE:
Original line: 47for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 50buf.append(replacementList[replaceIndex]);

DELETE:
Original line: 51start=textIndex+searchList[replaceIndex].length();

DELETE:
Original line: 53replaceIndex=-1;

DELETE:
Original line: 54tempIndex=-1;

DELETE:
Original line: 55for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

Following are 2th generated patches:
Validating 71 patches...
Current actions:
DELETE:
Original line: 15int textIndex=-1;

INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

INSERT:
16:int replaceIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 17int tempIndex=-1;

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
21:textIndex[i]=text.indexOf(searchList[i]);

INSERT:
26:replaceIndex[i]=i;
TO:
26

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

INSERT:
42:for(int i=0;i<searchList.length;i++){
int index=textIndex[i];
if(index==-1){
continue;
}
for(int j=start;j<index;j++){
buf.append(text.charAt(j));
}
buf.append(replacementList[replaceIndex[i]]);
start=index+searchList[i].length();
}
TO:
45

DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

Following are 3th generated patches:
Validating 23 patches...
Current actions:
DELETE:
Original line: 16int replaceIndex=-1;

DELETE:
Original line: 17int tempIndex=-1;

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
21:textIndex[i]=text.indexOf(searchList[i]);

INSERT:
26:replaceIndex[i]=i;
TO:
26

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

INSERT:
42:for(int i=0;i<searchList.length;i++){
int index=textIndex[i];
if(index==-1){
continue;
}
for(int j=start;j<index;j++){
buf.append(text.charAt(j));
}
buf.append(replacementList[replaceIndex[i]]);
start=index+searchList[i].length();
}
TO:
45

DELETE:
Original line: 47for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 50buf.append(replacementList[replaceIndex]);

DELETE:
Original line: 52textIndex=-1;

DELETE:
Original line: 53replaceIndex=-1;

DELETE:
Original line: 55for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

Following are 4th generated patches:
Validating 83 patches...
Current actions:
DELETE:
Original line: 15int textIndex=-1;

DELETE:
Original line: 16int replaceIndex=-1;

INSERT:
16:int replaceIndex[]=new int[searchLength];
TO:
14

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
21:textIndex[i]=text.indexOf(searchList[i]);

UPDATE
FROM:
23:if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
TO:
22:if(textIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}

INSERT:
26:replaceIndex[i]=i;
TO:
26

DELETE:
Original line: 28textIndex=tempIndex;

UPDATE
FROM:
33:if(textIndex==-1){
return text;
}
TO:
29:if(textIndex[0]==-1){
return text;
}

DELETE:
Original line: 29replaceIndex=i;

INSERT:
42:for(int i=0;i<searchList.length;i++){
int index=textIndex[i];
if(index==-1){
continue;
}
for(int j=start;j<index;j++){
buf.append(text.charAt(j));
}
buf.append(replacementList[replaceIndex[i]]);
start=index+searchList[i].length();
}
TO:
45

DELETE:
Original line: 47for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 51start=textIndex+searchList[replaceIndex].length();

DELETE:
Original line: 52textIndex=-1;

DELETE:
Original line: 54tempIndex=-1;

DELETE:
Original line: 55for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

Tested:4031 patches
Compile failed:3877 patches
Compilation rate:0.03820391962292235
NNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPPPPPPPNNNPNPNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/14.java
Current actions:
Move
FROM:
Former Line 36:int start=0;
TO:
Current Line 2:Block

Following are 0th generated patches:
Validating 21 patches...
Current actions:
DELETE:
Original line: 34return text;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
18:int start=0;
TO:
17

INSERT:
19:int increase=0;
TO:
17

UPDATE
FROM:
18:for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
TO:
20:for(int i=0;i<searchList.length;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

Following are 2th generated patches:
Validating 54 patches...
Current actions:
INSERT:
19:int increase=0;
TO:
17

UPDATE
FROM:
18:for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
TO:
20:for(int i=0;i<searchList.length;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 37int increase=0;

Following are 3th generated patches:
Validating 53 patches...
Current actions:
INSERT:
18:int start=0;
TO:
17

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 36int start=0;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
INSERT:
18:int start=0;
TO:
17

INSERT:
19:int increase=0;
TO:
17

UPDATE
FROM:
18:for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
TO:
20:for(int i=0;i<searchList.length;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 34return text;

DELETE:
Original line: 36int start=0;

DELETE:
Original line: 37int increase=0;

Tested:4143 patches
Compile failed:3973 patches
Compilation rate:0.041033067825247405
PPPPPPPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/15.java
Current actions:
DELETE:
Original line: 3if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
return text;
}

Following are 0th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 4return text;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 3if(text==null||text.length()==0||searchList==null||searchList.length==0||replacementList==null||replacementList.length==0){
return text;
}

Following are 2th generated patches:
Validating 1 patches...
Tested:4147 patches
Compile failed:3973 patches
Compilation rate:0.04195804195804196
PPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/16.java
Current actions:
DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

Following are 0th generated patches:
Validating 160 patches...
Current actions:
DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 20continue;

DELETE:
Original line: 24noMoreMatchesForReplIndex[i]=true;

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

DELETE:
Original line: 34return text;

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 19if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

DELETE:
Original line: 26else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

Tested:4311 patches
Compile failed:3999 patches
Compilation rate:0.07237299930410578
NNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPNPPNNNPNPNPPPPPPPPPPPPPPNPPPPPPPPNPPPNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/17.java
Current actions:
UPDATE
FROM:
15:int textIndex=-1;
TO:
15:int textIndex;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

DELETE:
Original line: 23if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}

DELETE:
Original line: 29replaceIndex=i;

UPDATE
FROM:
64:if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
TO:
29:if(tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

INSERT:
40:start=textIndex+replacementList[0].length();
TO:
69

DELETE:
Original line: 40if(greater>0){
increase+=3*greater;
}

DELETE:
Original line: 45StringBuilder buf=new StringBuilder(text.length()+increase);

DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

DELETE:
Original line: 71int textLength=text.length();

DELETE:
Original line: 73buf.append(text.charAt(i));

DELETE:
Original line: 76if(!repeat){
return result;
}

DELETE:
Original line: 79return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);

Following are 1th generated patches:
Validating 36 patches...
Current actions:
UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

INSERT:
19:while((textIndex=text.indexOf(searchList[0],start))!=-1){
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
if(textIndex!=-1){
for(int i=start;i<textIndex;i++){
text.charAt(i);
}
text.replace(textIndex,textIndex+searchList[0].length(),replacementList[0]);
start=textIndex+replacementList[0].length();
}
}
TO:
36

UPDATE
FROM:
64:if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
TO:
29:if(tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

INSERT:
43:return text;
TO:
70

DELETE:
Original line: 45StringBuilder buf=new StringBuilder(text.length()+increase);

DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

DELETE:
Original line: 72for(int i=start;i<textLength;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 75String result=buf.toString();

DELETE:
Original line: 77return result;

Following are 2th generated patches:
Validating 13 patches...
Current actions:
UPDATE
FROM:
16:int replaceIndex=-1;
TO:
16:int replaceIndex;

DELETE:
Original line: 18for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i]);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

INSERT:
35:if(textIndex!=-1){
for(int i=start;i<textIndex;i++){
text.charAt(i);
}
text.replace(textIndex,textIndex+searchList[0].length(),replacementList[0]);
start=textIndex+replacementList[0].length();
}
TO:
69

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

DELETE:
Original line: 45StringBuilder buf=new StringBuilder(text.length()+increase);

DELETE:
Original line: 47for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}

DELETE:
Original line: 50buf.append(replacementList[replaceIndex]);

DELETE:
Original line: 54tempIndex=-1;

DELETE:
Original line: 73buf.append(text.charAt(i));

Following are 3th generated patches:
Validating 59 patches...
Current actions:
UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

DELETE:
Original line: 39int greater=replacementList[i].length()-searchList[i].length();

DELETE:
Original line: 53replaceIndex=-1;

DELETE:
Original line: 76if(!repeat){
return result;
}

Following are 4th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
17:int tempIndex=-1;
TO:
17:int tempIndex;

DELETE:
Original line: 19if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}

INSERT:
19:while((textIndex=text.indexOf(searchList[0],start))!=-1){
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
if(textIndex!=-1){
for(int i=start;i<textIndex;i++){
text.charAt(i);
}
text.replace(textIndex,textIndex+searchList[0].length(),replacementList[0]);
start=textIndex+replacementList[0].length();
}
}
TO:
36

DELETE:
Original line: 23if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}

DELETE:
Original line: 26else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}

UPDATE
FROM:
64:if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
TO:
29:if(tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

DELETE:
Original line: 33if(textIndex==-1){
return text;
}

DELETE:
Original line: 37int increase=0;

DELETE:
Original line: 38for(int i=0;i<searchList.length;i++){
int greater=replacementList[i].length()-searchList[i].length();
if(greater>0){
increase+=3*greater;
}
}

INSERT:
43:return text;
TO:
70

DELETE:
Original line: 44increase=Math.min(increase,text.length()/5);

DELETE:
Original line: 45StringBuilder buf=new StringBuilder(text.length()+increase);

DELETE:
Original line: 46while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}

DELETE:
Original line: 71int textLength=text.length();

DELETE:
Original line: 75String result=buf.toString();

DELETE:
Original line: 76if(!repeat){
return result;
}

DELETE:
Original line: 79return replaceEach(result,searchList,replacementList,repeat,timeToLive-1);

Tested:4586 patches
Compile failed:4194 patches
Compilation rate:0.08547754034016572
NNNNNNNNNNNNNNNNNNPNNNNPNNNNNNPNNPNNPPPPPPPPNNPPNNNPPPNPPPPPNPPPPNNPPPNPPNPPNNNPPNNPNPPNPPNPPPPPPPNNPPPPPPPNNPPNPPPPPPPPPPNNPPPPPNNPNPNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNPNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_39/18.java
Current actions:
DELETE:
Original line: 15int textIndex=-1;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 15int textIndex=-1;

INSERT:
15:int textIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 17int tempIndex=-1;

UPDATE
FROM:
23:if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
TO:
23:if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}

INSERT:
27:textIndex[i]=tempIndex[i];
TO:
26

DELETE:
Original line: 28textIndex=tempIndex;

DELETE:
Original line: 29replaceIndex=i;

UPDATE
FROM:
46:while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}
TO:
44:while(textIndex[0]!=-1){
for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex[0]]);
start=textIndex[0]+searchList[replaceIndex[0]].length();
textIndex[0]=-1;
replaceIndex[0]=-1;
tempIndex[0]=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex[i]=text.indexOf(searchList[i],start);
if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex[i]==-1||tempIndex[i]<textIndex[i]){
textIndex[i]=tempIndex[i];
replaceIndex[i]=i;
}
}
}
}

UPDATE
FROM:
53:replaceIndex=-1;
TO:
51:replaceIndex[0]=-1;

UPDATE
FROM:
54:tempIndex=-1;
TO:
52:tempIndex[0]=-1;

UPDATE
FROM:
60:if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
TO:
58:if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}

UPDATE
FROM:
66:replaceIndex=i;
TO:
64:replaceIndex[i]=i;

Following are 1th generated patches:
Validating 87 patches...
Current actions:
INSERT:
16:int replaceIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 17int tempIndex=-1;

INSERT:
17:int tempIndex[]=new int[searchLength];
TO:
14

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

UPDATE
FROM:
46:while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}
TO:
44:while(textIndex[0]!=-1){
for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex[0]]);
start=textIndex[0]+searchList[replaceIndex[0]].length();
textIndex[0]=-1;
replaceIndex[0]=-1;
tempIndex[0]=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex[i]=text.indexOf(searchList[i],start);
if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex[i]==-1||tempIndex[i]<textIndex[i]){
textIndex[i]=tempIndex[i];
replaceIndex[i]=i;
}
}
}
}

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
45:for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}

UPDATE
FROM:
54:tempIndex=-1;
TO:
52:tempIndex[0]=-1;

UPDATE
FROM:
59:tempIndex=text.indexOf(searchList[i],start);
TO:
57:tempIndex[i]=text.indexOf(searchList[i],start);

UPDATE
FROM:
60:if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
TO:
58:if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}

UPDATE
FROM:
64:if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
TO:
62:if(textIndex[i]==-1||tempIndex[i]<textIndex[i]){
textIndex[i]=tempIndex[i];
replaceIndex[i]=i;
}

UPDATE
FROM:
65:textIndex=tempIndex;
TO:
63:textIndex[i]=tempIndex[i];

UPDATE
FROM:
66:replaceIndex=i;
TO:
64:replaceIndex[i]=i;

Following are 2th generated patches:
Validating 179 patches...
Current actions:
DELETE:
Original line: 16int replaceIndex=-1;

DELETE:
Original line: 17int tempIndex=-1;

INSERT:
17:int tempIndex[]=new int[searchLength];
TO:
14

UPDATE
FROM:
22:tempIndex=text.indexOf(searchList[i]);
TO:
22:tempIndex[i]=text.indexOf(searchList[i]);

DELETE:
Original line: 27if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}

INSERT:
28:replaceIndex[i]=i;
TO:
26

UPDATE
FROM:
46:while(textIndex!=-1){
for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex]);
start=textIndex+searchList[replaceIndex].length();
textIndex=-1;
replaceIndex=-1;
tempIndex=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex=text.indexOf(searchList[i],start);
if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex==-1||tempIndex<textIndex){
textIndex=tempIndex;
replaceIndex=i;
}
}
}
}
TO:
44:while(textIndex[0]!=-1){
for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}
buf.append(replacementList[replaceIndex[0]]);
start=textIndex[0]+searchList[replaceIndex[0]].length();
textIndex[0]=-1;
replaceIndex[0]=-1;
tempIndex[0]=-1;
for(int i=0;i<searchLength;i++){
if(noMoreMatchesForReplIndex[i]||searchList[i]==null||searchList[i].length()==0||replacementList[i]==null){
continue;
}
tempIndex[i]=text.indexOf(searchList[i],start);
if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}
else{
if(textIndex[i]==-1||tempIndex[i]<textIndex[i]){
textIndex[i]=tempIndex[i];
replaceIndex[i]=i;
}
}
}
}

UPDATE
FROM:
47:for(int i=start;i<textIndex;i++){
buf.append(text.charAt(i));
}
TO:
45:for(int i=start;i<textIndex[0];i++){
buf.append(text.charAt(i));
}

UPDATE
FROM:
50:buf.append(replacementList[replaceIndex]);
TO:
48:buf.append(replacementList[replaceIndex[0]]);

UPDATE
FROM:
52:textIndex=-1;
TO:
50:textIndex[0]=-1;

UPDATE
FROM:
59:tempIndex=text.indexOf(searchList[i],start);
TO:
57:tempIndex[i]=text.indexOf(searchList[i],start);

UPDATE
FROM:
60:if(tempIndex==-1){
noMoreMatchesForReplIndex[i]=true;
}
TO:
58:if(tempIndex[i]==-1){
noMoreMatchesForReplIndex[i]=true;
}

UPDATE
FROM:
66:replaceIndex=i;
TO:
64:replaceIndex[i]=i;

Following are 3th generated patches:
Validating 200 patches...
Tested:5231 patches
Compile failed:4836 patches
Compilation rate:0.0755113744981839

Finish : lang-39 > patch : 12 | Start : Sun Apr 07 13:35:37 HKT 2024 | End : 2024.04.07 AD at 13:46:41 HKT
