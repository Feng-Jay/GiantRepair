Repair : lang_65
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millisecs);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Tested:322 patches
Compile failed:223 patches
Compilation rate:0.30745341614906835
NNNNNNNNNNPNPPPPNNNNNNNPNPNNNNNNNNNPNNPPPPPPPNNPNNPNPNPNNNPPPPNNNNNPNPPPPPPPPNNPNPNPNPNPPPNPNNNPPPNNNPNNPNPNPNNPPNPNPPNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNPPPPNNPPNNNNNNNNNNNNNPPPNPPPNNNNNNPPPPPNPPPNNNNNNNPPNPNNPPNPPPPNNNPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Tested:322 patches
Compile failed:223 patches
Compilation rate:0.30745341614906835

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 1th generated patches:
Validating 194 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:920 patches
Compile failed:775 patches
Compilation rate:0.15760869565217392
PPPPPPPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPPNPPPPPNNNNNNNNNNNNNNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNPPNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
7:time=time/1000*1000;
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 1th generated patches:
Validating 127 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 2th generated patches:
Validating 128 patches...
Current actions:
INSERT:
7:time=time/1000*1000;
TO:
5

Following are 3th generated patches:
Validating 26 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 4th generated patches:
Validating 1 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

Tested:1206 patches
Compile failed:1033 patches
Compilation rate:0.14344941956882257
NNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPPPPPNPNNPPPNNNNNPNNNNNNNNPNNNNNNNNNPPNPPPNPNPNNNNNNPPNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
11:val.set(Calendar.AM_PM,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
11:val.set(Calendar.AM_PM,0);
TO:
5

Following are 2th generated patches:
Validating 194 patches...
Tested:1637 patches
Compile failed:1385 patches
Compilation rate:0.15394013439218082
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNPPPPPPPNNPPPNPPNNNNNPNPNNPNPNNNNPNPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Current actions:
Wrap:
Block
On:
[if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}, break;, case Calendar.AM_PM :, if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}, break;, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, int min=val.getActualMinimum(fields[i][0]);]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

INSERT:
6:int offset=0;
TO:
5

UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 6 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
6:int offset=0;
TO:
5

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

DELETE:
Original line: 27int offset=0;

Following are 3th generated patches:
Validating 2 patches...
Current actions:
INSERT:
6:int offset=0;
TO:
5

UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

DELETE:
Original line: 21val.add(fields[i][0],1);

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

Following are 4th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 17val.add(Calendar.MONTH,1);

Tested:1729 patches
Compile failed:1438 patches
Compilation rate:0.1683053788316946
NNNPPPPPPPPPNNNNNNNNPNNNPPPPPNPPNNNNPNPNNNPNNNNPNNNNNNNNNNNNNNNNNPNNNPPPNNPPPPPPPNNPPPPPPPNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 165 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13val.add(Calendar.DATE,15);

DELETE:
Original line: 16val.add(Calendar.DATE,-15);

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

Following are 3th generated patches:
Validating 196 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 4th generated patches:
Validating 200 patches...
Tested:2435 patches
Compile failed:2008 patches
Compilation rate:0.1753593429158111
NNNPPPPPPPPPPPPPPPPPPNPNNNPNNPPPPPPPPPNNPPPPPPPPPPNNPNNNPPPPPPNPPNNPNPPPPPPPPPPNPNNPPNPPPPPPPNPNPPNPPPPPPNNPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNPNPPPNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNPNNNPPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPPNPPPPPNNNNNNNNNNNNNNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-millis%1000);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%60);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%60);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,millis-millis%1000);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-seconds%60);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:3070 patches
Compile failed:2609 patches
Compilation rate:0.1501628664495114
NNNNNNNNNNNPPPNNNNPPPPNPNNNPNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNPPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millis);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Tested:3394 patches
Compile failed:2874 patches
Compilation rate:0.15321154979375368
NNNNNNNNPPPPPPNNNNNPNNPNNNNNNNPNNNPPNNNPPPPPPNPNNNPNNPPNPPPPNNNNNNPPNNPPPPPPPNPNPNPPNNPPNPPNNNNPNPPNNNPNNNPPNPPNPNNNPNNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round&&field==DateUtils.SEMI_MONTH&&val.get(Calendar.DATE)==1){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
15:else{
val.add(field,round?1:0);
}
TO:
48

INSERT:
18:}

TO:
48

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 200 patches...
Tested:3757 patches
Compile failed:3137 patches
Compilation rate:0.16502528613255257
NNNNNNPPPPPPPNPPNPPPPPPPNPNPPPPPPPNNPNPPNPPPNPPPPPPPPPNPPPNPPPPPNNPPPNPPPPPPNPPPPPPPPNPPPNPPPPNPPNPPPPPPPPPPNNPPPPPPPNNNNPPNPNNNPNPNNPNNNNNNNNNNNNNNNNPNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
13:if(millisecs!=0){
int[] fieldMillis={Calendar.MILLISECOND};
millisToSet=truncate(val,millisecs,fieldMillis,true);
}
TO:
5

INSERT:
20:secondsToSet=truncate(val,seconds,fieldSeconds,true);
TO:
5

INSERT:
22:int minutesToSet=0;
TO:
5

INSERT:
25:minutesToSet=truncate(val,minutes,fieldMinutes,true);
TO:
5

INSERT:
91:}

TO:
60

INSERT:
95:}

TO:
60

INSERT:
96:}

TO:
60

INSERT:
100:}

TO:
60

INSERT:
101:}

TO:
60

INSERT:
102:}

TO:
60

INSERT:
103:}

TO:
60

INSERT:
105:}

TO:
60

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
12:int millisToSet=0;
TO:
5

INSERT:
13:if(millisecs!=0){
int[] fieldMillis={Calendar.MILLISECOND};
millisToSet=truncate(val,millisecs,fieldMillis,true);
}
TO:
5

INSERT:
18:if(seconds!=0){
int[] fieldSeconds={Calendar.SECOND};
secondsToSet=truncate(val,seconds,fieldSeconds,true);
}
TO:
5

INSERT:
23:if(minutes!=0){
int[] fieldMinutes={Calendar.MINUTE};
minutesToSet=truncate(val,minutes,fieldMinutes,true);
}
TO:
5

INSERT:
91:}

TO:
60

INSERT:
95:}

TO:
60

INSERT:
96:}

TO:
60

INSERT:
100:}

TO:
60

INSERT:
101:}

TO:
60

INSERT:
102:}

TO:
60

INSERT:
103:}

TO:
60

INSERT:
105:}

TO:
60

Following are 2th generated patches:
Validating 200 patches...
Tested:4348 patches
Compile failed:3728 patches
Compilation rate:0.14259429622815087

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 63 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

Following are 1th generated patches:
Validating 90 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

Following are 2th generated patches:
Validating 45 patches...
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Tested:4916 patches
Compile failed:4200 patches
Compilation rate:0.14564686737184704
NNNNNNNNNNNNPPPPPNPPPPNNNPNNNNNNPNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPNPPNPPNNNNNNNPNNNNNPNNNNPPNPNPNNNNNNNNNNNPPPPNNNNNNPNNPNNPPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNPPPPPPPPNNPPPPPPPPPPNPPPPNNNNNPNPPPPPPPPPPNPPPPNNNNPPNPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:5348 patches
Compile failed:4541 patches
Compilation rate:0.15089753178758414
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPPPPNPNNNPPPPNNNPPNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNPNNNNPNPPNPNNPNPNNNNPPPNPNPPNPNNPPNNNNPNPNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNPNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%ROUND_FRACTION));
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 3th generated patches:
Validating 11 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%ROUND_FRACTION));
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:5994 patches
Compile failed:5170 patches
Compilation rate:0.13747080413747081
NNNNNNNNNNNNNNNNPNPNNNNNNNNNNNPNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

Following are 1th generated patches:
Validating 194 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 3th generated patches:
Validating 194 patches...
Tested:6604 patches
Compile failed:5716 patches
Compilation rate:0.13446396123561477
PPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNPPPPPPPNPPNNPNNNNPNNPNNNNPPNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
15:time-=offset*DateUtils.MILLIS_PER_DAY;
TO:
48

INSERT:
16:break;
TO:
48

INSERT:
17:case Calendar.AM_PM :
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
24:break;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
30:for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
TO:
48

DELETE:
Original line: 33if(offset>=15){
offset-=15;
}

DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
16:break;
TO:
48

INSERT:
17:case Calendar.AM_PM :
TO:
48

INSERT:
25:}

TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

INSERT:
30:for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
TO:
48

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

Following are 2th generated patches:
Validating 110 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
15:time-=offset*DateUtils.MILLIS_PER_DAY;
TO:
48

INSERT:
16:break;
TO:
48

INSERT:
17:case Calendar.AM_PM :
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
19:if(offset>=12){
offset-=12;
}
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
24:break;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
29:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
int offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
48

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
15:time-=offset*DateUtils.MILLIS_PER_DAY;
TO:
48

INSERT:
25:}

TO:
48

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 37offsetSet=true;

Following are 4th generated patches:
Validating 48 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
17:case Calendar.AM_PM :
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
29:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
int offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
48

Tested:7196 patches
Compile failed:6270 patches
Compilation rate:0.12868260144524735
NNNNNNNNNNPPPPNNPPPNNPPNNPNNNNNPNNNPNNNNPPPPPPPPPNPNPPPPPPPPPNNPNNNNNPPNPPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-sec%60);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-sec%60);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-min%60);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-sec%60);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-min%60);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:7830 patches
Compile failed:6885 patches
Compilation rate:0.1206896551724138

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,seconds-seconds%DateUtils.MILLIS_PER_MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%DateUtils.MILLIS_PER_HOUR);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

Following are 2th generated patches:
Validating 11 patches...
Current actions:
INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,seconds-seconds%DateUtils.MILLIS_PER_MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%DateUtils.MILLIS_PER_HOUR);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:8275 patches
Compile failed:7319 patches
Compilation rate:0.11552870090634441
NNNNNNNNNNNNNNNNPPNPNNNNNNPPNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Tested:8277 patches
Compile failed:7321 patches
Compilation rate:0.11550078530868672
NN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:case Calendar.SECOND :
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
17:{
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

INSERT:
30:else{
val.add(fields[i][0],1);
}
TO:
26

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

Following are 1th generated patches:
Validating 29 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
8:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
9:case Calendar.SECOND :
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:case Calendar.MINUTE :
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
13:default :
TO:
5

INSERT:
14:break;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:case Calendar.SECOND :
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
11:case Calendar.MINUTE :
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
21:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:8964 patches
Compile failed:7995 patches
Compilation rate:0.10809906291834002

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 1th generated patches:
Validating 195 patches...
Current actions:
INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 2th generated patches:
Validating 194 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 3th generated patches:
Validating 1 patches...
Tested:9356 patches
Compile failed:8363 patches
Compilation rate:0.10613510047028644
PPPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNPNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNPNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=(time/1000)*1000;
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

Following are 1th generated patches:
Validating 63 patches...
Current actions:
INSERT:
7:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 2th generated patches:
Validating 153 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=(time/1000)*1000;
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 3th generated patches:
Validating 190 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

Following are 4th generated patches:
Validating 37 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Tested:9808 patches
Compile failed:8693 patches
Compilation rate:0.11368270799347471
NNNNNNNNNNPPPPPPPPNNNNNNNNNNNNNNPNNPNNNPPPPNPPPPPPPPPNPPPPPPPPPPNPPPNPNPPNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNNPNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPNNPNNPPNPPPPPPPPNPPNPPPPPPPPPNPPNPPPPPPNPPPPPPPPPNNNNNNNPPPNNNNNNNNNPPPPPPNPPPPPNPNPPNPPPNNNPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
17:val.add(field,1);
TO:
26

INSERT:
21:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 199 patches...
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

INSERT:
21:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 10 patches...
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
21:}

TO:
48

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 1 patches...
Tested:10154 patches
Compile failed:8950 patches
Compilation rate:0.1185739610005909
NNNPPPPPPPPNNNPNPPNPPNPNPNPNPPPPPPPPPNPPPNPPPPPPNNNNPPPPPPPPNPPPPPPPNPPPPPPPPNPNPPPNPPPNNNPNNPPNPNNNPNPNNNNNNNNNNNNPNNNNNNNNNNNPNNNNPPPPPPPPNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,ms-(ms%1000));
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-(sec%60));
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,ms-(ms%1000));
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-(sec%60));
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:10588 patches
Compile failed:9377 patches
Compilation rate:0.11437476388364186
NNNNNNNNNNNNNNPNNNNNPNNNNNNNPPNNNPNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 1th generated patches:
Validating 112 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 2th generated patches:
Validating 11 patches...
Current actions:
INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 3th generated patches:
Validating 101 patches...
Current actions:
INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 4th generated patches:
Validating 102 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Tested:10919 patches
Compile failed:9686 patches
Compilation rate:0.11292242879384559
NNNNNPPNNNNNNNNNNNNNNNNNPNNNPPPNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Current actions:
INSERT:
6:int min=val.getActualMinimum(field);
TO:
5

Following are 0th generated patches:
Validating 134 patches...
Current actions:
INSERT:
7:int max=val.getActualMaximum(field);
TO:
5

INSERT:
8:if(field==Calendar.MILLISECOND){
val.set(Calendar.MILLISECOND,min);
}
TO:
5

INSERT:
11:if(field==Calendar.SECOND){
val.set(Calendar.SECOND,min);
}
TO:
5

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

Following are 1th generated patches:
Validating 200 patches...
Tested:11251 patches
Compile failed:10011 patches
Compilation rate:0.11021242556217226
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNPNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
8:int ss=val.get(Calendar.SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int ss=val.get(Calendar.SECOND);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 2th generated patches:
Validating 200 patches...
Tested:11775 patches
Compile failed:10510 patches
Compilation rate:0.10743099787685775
NNNNNNNNNNNNNNNNNNPPNPNPNNNNNNNNNNNNNNNNNNNNPPPPNPNPNNNNNPNNNNNNNNPNPNNNNNNNNNPPPNNPNNPNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNPPPNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
13:break;
TO:
5

INSERT:
36:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 1th generated patches:
Validating 196 patches...
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

INSERT:
35:boolean roundUp=false;
TO:
5

INSERT:
36:{
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

INSERT:
44:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

INSERT:
49:else{
val.add(fields[i][0],1);
}
TO:
15

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

Following are 2th generated patches:
Validating 5 patches...
Current actions:
INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
19:break;
TO:
5

INSERT:
29:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
33:break;
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:12252 patches
Compile failed:10965 patches
Compilation rate:0.10504407443682665
NNNNNNNNNNNNNNNNNNNPNNNPPPPNNPNPNNNNPPPNNNPNNNPNPPPNNNNNNPNNNNPNNPNNNNNNNPNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

INSERT:
7: final int second=Calendar.SECOND;
TO:
5

INSERT:
10:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

INSERT:
7: final int second=Calendar.SECOND;
TO:
5

INSERT:
8: final int minute=Calendar.MINUTE;
TO:
5

INSERT:
9:if(field==milli){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:12846 patches
Compile failed:11367 patches
Compilation rate:0.11513311536665109
NNNPPPPPPPPNPNNPPPPPPPPPNPPPPPPPNPPNPNPNPNNNNNNPPPNPNPNPPPNPPPPPPPNPNPNPPNPPPNNNNNNNNPPPPPPPNPPPNNNPNPNPPPPNNNPNPNNPNPPPPPPNPPNNNPPPPPPPPPNNNNNNPNNNNNNPPNNPPPPPNPPPNPPPPPPPPPPNNPPNPPPPNPPPPPNNPPPPPPPPNNNNNNNNNNNNNPPPPNNNNPPNNNNPNNNNNNNNNNNNNNNPNNPNNNPNPNNNNNNNNPNNNNNNNNNPNNNNNPNNNNNNNNNPNNPNPPPPNNNPNNNNNNNNNNNNNNNNNNNNNPPNNNPNNNPNNNNNNNNNNNNPNNNNNPPNNNNNPNPNNNNNNNNNNPNNNNNNNNNNPNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNPNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPPPNPNNPNNNNNNNNNNNNNNPNNPPNNNPNNNNNNNNNNNNNNNNNNNPNNNNPPPPPPPNNNNNNNNNNNNNNNPPNNNNNPNNNNNNNPNNPNNNNNNNNPNNNPNNNNNNNPNNNNNNNPNNNNNPNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Current actions:
Wrap:
IfStatement
On:
[val.add(fields[i][0],1);, if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}, {
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}]
Following are 0th generated patches:
Validating 50 patches...
Current actions:
DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 2th generated patches:
Validating 23 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 3th generated patches:
Validating 24 patches...
Current actions:
DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 17val.add(Calendar.MONTH,1);

Tested:12922 patches
Compile failed:11392 patches
Compilation rate:0.11840272403652685
NNNNNPPPPPPPPPPNNNPPPPPPPPPPPPPNNNNNNNNPPPPPPPPPPPPPPNNNNNNNNPPPPPPPPPPPPPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 194 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 3th generated patches:
Validating 194 patches...
Tested:13521 patches
Compile failed:11938 patches
Compilation rate:0.11707713926484728
PPPPPPPPPPPPPPNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNPPPPPPPPPNNPNNNNNPNPNNNPPPNPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNPNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Current actions:
Wrap:
MethodDeclaration
On:
[throw new IllegalArgumentException("The field "+field+" is not supported");, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}, {
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}, {
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}, for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}, if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}, {
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}, {
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}, if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}, {
val.add(Calendar.DATE,15);
}, if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}, val.add(Calendar.DATE,15);, return ;]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 34offset-=15;

DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

DELETE:
Original line: 47offsetSet=true;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

Following are 1th generated patches:
Validating 10 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 13 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

DELETE:
Original line: 44offset-=12;

Following are 4th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 33if(offset>=15){
offset-=15;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 44offset-=12;

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

DELETE:
Original line: 55roundUp=offset>((max-min)/2);

Tested:13700 patches
Compile failed:12117 patches
Compilation rate:0.11554744525547445
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

INSERT:
44:}

TO:
48

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
7:int[] roundUp={0,0,15,6,15,0,0};
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:val.add(Calendar.MILLISECOND,-offset);
TO:
5

INSERT:
12:offset=val.get(Calendar.SECOND)-roundUp[1];
TO:
5

INSERT:
14:val.add(Calendar.SECOND,-offset);
TO:
5

INSERT:
16:offset=val.get(Calendar.MINUTE)-roundUp[2];
TO:
5

INSERT:
17:if(offset>0){
val.add(Calendar.MINUTE,-offset);
}
TO:
5

INSERT:
20:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
22:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
23:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
25:if(date[i]==field){
if(round&&roundUp[i]!=0){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(date[i],1);
}
}
return ;
}
TO:
5

INSERT:
44:}

TO:
48

Following are 2th generated patches:
Validating 200 patches...
Tested:14080 patches
Compile failed:12430 patches
Compilation rate:0.1171875
NNNNNNNNNNNNNNNNPNNNNNNNNPPPPNNNPNPNPNPPPNPPPPPPPPPNPNPNNNPPPPPPPPNNNNNNNNPNNPPNNNNPNNNNPPPNPNPNNNNNNNNPNNNNNNPPPNPNPNPPPPPPPPNPNNPPPPPPNNNNNNPNPNNNNNPPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
14:return ;
TO:
5

INSERT:
27:}

TO:
48

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 37offsetSet=true;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 49break;

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

DELETE:
Original line: 55roundUp=offset>((max-min)/2);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 1th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
27:}

TO:
48

DELETE:
Original line: 39break;

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
27:}

TO:
48

DELETE:
Original line: 47offsetSet=true;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
14:return ;
TO:
5

INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 21val.add(fields[i][0],1);

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
27:}

TO:
48

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

DELETE:
Original line: 55roundUp=offset>((max-min)/2);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 15 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

DELETE:
Original line: 27int offset=0;

INSERT:
27:}

TO:
48

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Tested:14211 patches
Compile failed:12561 patches
Compilation rate:0.11610724086974879
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Current actions:
Wrap:
MethodDeclaration
On:
[int offset=0;, boolean offsetSet=false;, int min=val.getActualMinimum(fields[i][0]);, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, boolean roundUp=false;, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 3th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Tested:14289 patches
Compile failed:12599 patches
Compilation rate:0.11827279725663098
NNNNNNPPPPPPNNNPNNNNNNPPPNNNNNNNNPNPNPPPNNPNPNPNNPPPPPPPPNNPPNNPPPPPPPNPPPNPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int second=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minute=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:int hour=val.get(Calendar.HOUR_OF_DAY);
TO:
5

INSERT:
10:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
68:val.set(Calendar.MINUTE,minute);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
11:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
12:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:14883 patches
Compile failed:13062 patches
Compilation rate:0.12235436403950817
NNNNNNNNNNNPPNPNPPPPPNPNPPPNPNPPNNPPNPNNNPPNNPNNNNNPNNPPNNPPPNPPPNPPNNNNNNNPPNPNNNPNNNNPPNNNNNPNNPNNNPPNNNNPNNNPNNPNPPPPPPPNNPNPPNPPNNPPPNPNNNPNNPNNNNNPNPPNNNNPNNNPNNPPPPPPPNNNPPPNNPPPNPPPNNPNNPPNPPPPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNPNPPPPPPPPPPPPNNPNNNNNNNPNNNPNPNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

INSERT:
25:val.add(Calendar.DATE,7*(weekNumber-val.get(Calendar.WEEK_OF_MONTH)));
TO:
48

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 33if(offset>=15){
offset-=15;
}

INSERT:
34:if(!round){
switch (field){
case DateUtils.SECOND :
val.set(Calendar.MILLISECOND,0);
case DateUtils.MINUTE :
val.set(Calendar.SECOND,0);
case DateUtils.HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.HOUR_OF_DAY :
val.set(Calendar.SECOND,0);
case DateUtils.MINUTE_OF_HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.SECOND_OF_MINUTE :
val.set(Calendar.SECOND,0);
}
}
TO:
50

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%1000));
TO:
5

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

INSERT:
12:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
29:break;
TO:
48

INSERT:
30:case Calendar.WEEK_OF_MONTH :
TO:
48

INSERT:
32:break;
TO:
48

DELETE:
Original line: 40case Calendar.AM_PM :

INSERT:
41:val.set(Calendar.MINUTE,0);
TO:
50

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

INSERT:
45:val.set(Calendar.MINUTE,0);
TO:
50

INSERT:
46:case DateUtils.SECOND_OF_MINUTE :
TO:
50

Following are 2th generated patches:
Validating 200 patches...
Tested:15459 patches
Compile failed:13572 patches
Compilation rate:0.12206481661168252
NNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNPNPNPPPPPNPPNPNPNPPPPPPNNNNPNNPNNNNNPNPNPPPNPPPNPNNNPNPPNPPNNPNNNNPNNNPPNPPPPPNPNNNPPPNPPPNPPPNPNNPNNPPPNPNNNPPNNNPNPNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
22:val.set(Calendar.AM_PM,Calendar.PM);
TO:
40

DELETE:
Original line: 27int offset=0;

INSERT:
30:else{
val.add(field,1);
}
TO:
56

DELETE:
Original line: 34offset-=15;

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
12:else{
val.set(Calendar.DATE,val.getActualMaximum(Calendar.DATE));
val.add(Calendar.MONTH,-1);
}
TO:
30

DELETE:
Original line: 16val.add(Calendar.DATE,-15);

DELETE:
Original line: 17val.add(Calendar.MONTH,1);

INSERT:
18:if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
TO:
40

DELETE:
Original line: 21val.add(fields[i][0],1);

INSERT:
27:val.add(field,1);
TO:
49

INSERT:
30:else{
val.add(field,1);
}
TO:
56

DELETE:
Original line: 36roundUp=offset>7;

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 55roundUp=offset>((max-min)/2);

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(round){
switch (field){
case DateUtils.SEMI_MONTH :
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
break;
case Calendar.AM_PM :
if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
break;
default :
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
31:val.add(field,1);
TO:
56

Following are 3th generated patches:
Validating 2 patches...
Tested:16039 patches
Compile failed:14031 patches
Compilation rate:0.12519483758339048
NNNPPPPPPPPPPPPPPPPPPNNPPNPPPPPNPPPPNNPPNPPPNPPPPPPPNNNPPPPPPPPPPPPPPPNNPPPPPPPNNNPPPPNNPPNPPPPPPPPPPPPPPNNPNPPPPPPPPPPPPPPPPNNPPPPNNPPPPNNNNPPNNNPPNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Current actions:
Wrap:
MethodDeclaration
On:
[if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}, return ;, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, else{
val.add(fields[i][0],1);
}, {
val.add(fields[i][0],1);
}, else{
val.add(fields[i][0],1);
}, {
val.add(fields[i][0],1);
}]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

Following are 1th generated patches:
Validating 5 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

DELETE:
Original line: 49break;

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Following are 2th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 49break;

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 3th generated patches:
Validating 3 patches...
Current actions:
INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Tested:16158 patches
Compile failed:14081 patches
Compilation rate:0.12854313652679786
NNNNNNNNPPPPPPPPNPPPPPPPNPPPPPNNNPPNPPPPPPNPPPPPPPPPNPPPNPPPNPPPPPPPPPNNPPPPPPPPNNPPNPPPNNNNNNPNNNNNPNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
10:else{
if(millis>500){
val.set(Calendar.MILLISECOND,1000);
}
}
TO:
5

INSERT:
15:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
17:else{
if(seconds>30){
val.set(Calendar.SECOND,60);
}
}
TO:
5

INSERT:
20:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
22:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
24:else{
if(minutes>30){
val.set(Calendar.MINUTE,60);
}
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:else{
if(millis>500){
val.set(Calendar.MILLISECOND,1000);
}
}
TO:
5

INSERT:
17:else{
if(seconds>30){
val.set(Calendar.SECOND,60);
}
}
TO:
5

INSERT:
22:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
24:else{
if(minutes>30){
val.set(Calendar.MINUTE,60);
}
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:if(millis<500){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

INSERT:
10:else{
if(millis>500){
val.set(Calendar.MILLISECOND,1000);
}
}
TO:
5

INSERT:
13:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
14:if(seconds<30){
val.set(Calendar.SECOND,0);
}
TO:
5

INSERT:
17:else{
if(seconds>30){
val.set(Calendar.SECOND,60);
}
}
TO:
5

INSERT:
20:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
21:if(minutes<30){
val.set(Calendar.MINUTE,0);
}
TO:
5

INSERT:
24:else{
if(minutes>30){
val.set(Calendar.MINUTE,60);
}
}
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:16946 patches
Compile failed:14736 patches
Compilation rate:0.13041425705181164
NNNNNNNPNPPPNPPPPNNNNPPPPPPPNNNPPNNNNNPPPNNPPNNNNNPNPPNNNNPPPPPPNPPNNPPPNNNNNNNNNPPNPPNNNNNNNNPPPNPPPNPPNPNNNNPNPNPPNPNNPPNPPNNNNNNNNNNPNNNNNPPPPPNNPPPNPNNNNNNNNNNNNPPPPPPPNNPNPNPNNNNNNNPNNPPNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPPNPPPPPPNNNNNNNNNPPPPPNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNPPNNNNNNNNNNNPNNNPNPNPPPPNNNNPPNPPPPPPNPPNNNNNNNPNNNNNNPP
Finish : lang-65 > patch : 0 | Start : Sun Apr 07 16:05:11 HKT 2024 | End : 2024.04.07 AD at 16:34:07 HKT
