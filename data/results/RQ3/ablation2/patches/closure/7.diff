Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:type;
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+returnresultEqualsValue?ctorType:type;
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:getNativeType(OBJECT_TYPE);
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+returnresultEqualsValue?ctorType:getNativeType(OBJECT_TYPE);
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isSubtype(type)){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isSubtype(type)){
+returnctorType;
+}
+returntype;
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNumberObjectType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isEnumElementType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isRecordType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isTemplateType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isDict()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isInterface()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNominalType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNullable()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isConstructor()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNumberValueType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isResolved()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isGlobalThisType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isDateType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isEmptyType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNullType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isFunctionType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isObject()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isNoObjectType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isArrayType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&!ctorType.isVoidType()){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.isSubtype(ctorType)){
+returnctorType;
+}
+else{
+returntype;
+}
Following diff 0:
-returnresultEqualsValue&&ctorType.isSubtype(type)?ctorType:null;
+if(resultEqualsValue&&ctorType.differsFrom(type)){
+returnctorType;
+}
+else{
+returntype;
+}
