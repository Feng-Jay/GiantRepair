Repair : closure_50
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/0.java
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/1.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 106 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
83:Node newString=Node.newString(joinString);
TO:
82

INSERT:
84:Node joinedString=new Node(Token.ADD,arrayFoldedChildren.get(0),newString);
TO:
82

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
86:joinedString=new Node(Token.ADD,joinedString,newString);
TO:
82

INSERT:
87:joinedString.addChildToBack(arrayFoldedChildren.get(i));
TO:
82

Following are 2th generated patches:
Validating 200 patches...
Tested:306 patches
Compile failed:287 patches
Compilation rate:0.06209150326797386
NNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNPNNNPPNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPNNNNNNNNNNNNNNNNNNNNNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/2.java
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 0th generated patches:
Validating 63 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

INSERT:
57:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 2th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

Following are 3th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

INSERT:
58:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 4th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
55:return Node.newString("");

INSERT:
57:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

Tested:336 patches
Compile failed:298 patches
Compilation rate:0.1130952380952381
NNNNNNNPPPPPPPPNNPNPPPPPPPPPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/3.java
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=right==null?",":NodeUtil.getStringValue(right);

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=right==null?",":NodeUtil.getStringValue(right);

Following are 1th generated patches:
Validating 200 patches...
Tested:537 patches
Compile failed:475 patches
Compilation rate:0.1154562383612663
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPPPPNPPNNNNNNNNPPNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNPNNNNNNNNNNPNPNPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/4.java
Current actions:
INSERT:
24:if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
arrayFoldedChildren.add(elem);
}
TO:
24

DELETE:
Original line: 25if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 27sb=new StringBuilder();

INSERT:
28:if(prev!=null&&elem.getType()==Token.STRING){
Node joinedNode=NodeUtil.joinStringNodes(prev,elem,joinString);
foldedSize+=InlineCostEstimator.getCost(joinedNode);
arrayFoldedChildren.add(joinedNode);
}
TO:
29

DELETE:
Original line: 30sb.append(joinString);

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

INSERT:
34:foldedSize+=InlineCostEstimator.getCost(elem);
TO:
34

INSERT:
35:arrayFoldedChildren.add(elem);
TO:
34

DELETE:
Original line: 36Preconditions.checkNotNull(prev);

DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 38arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));

DELETE:
Original line: 39sb=null;

DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
41:if(prev!=null&&prev.getType()==Token.STRING){
Node joinedNode=NodeUtil.joinStringNodes(prev,null,joinString);
foldedSize+=InlineCostEstimator.getCost(joinedNode);
arrayFoldedChildren.add(joinedNode);
}
TO:
46

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 4th generated patches:
Validating 200 patches...
Tested:931 patches
Compile failed:845 patches
Compilation rate:0.09237379162191192
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNPNPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNPPPNNNNNPPNPNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNPPNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/5.java
Current actions:
INSERT:
24:if(prev!=null&&prev.getType()==Token.STRING){
Node folded=Node.newString(prev.getString()+joinString+NodeUtil.getArrayElementStringValue(elem));
arrayFoldedChildren.add(folded);
prev=folded;
elem=elem.getNext();
continue;
}
TO:
25

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
31:}

TO:
28

INSERT:
32:if(prev==null){
prev=elem;
}
TO:
28

DELETE:
Original line: 44prev=elem;

Following are 2th generated patches:
Validating 38 patches...
Current actions:
INSERT:
42:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
arrayFoldedChildren.add(prev);
}
TO:
46

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
26:arrayFoldedChildren.add(folded);
TO:
25

INSERT:
27:prev=folded;
TO:
25

INSERT:
29:continue;
TO:
25

DELETE:
Original line: 30sb.append(joinString);

INSERT:
31:}

TO:
28

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
43:foldedSize+=InlineCostEstimator.getCost(prev);
TO:
46

INSERT:
44:arrayFoldedChildren.add(prev);
TO:
46

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 4th generated patches:
Validating 200 patches...
Tested:1364 patches
Compile failed:1201 patches
Compilation rate:0.11950146627565983
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPNPPNNPNNNPNNPNPPPNPPPNNNNNNPPPNPPNNPPNPPPPNNNPNNNNNNNNPPNNNPPPPNPPPNPPNNNPPNNPNNNNNNNNNNPNPPPNNNNNPNNNNPNNNPPNNPNNNPNPNNPPNNNNPNNNNNNNPNNNNNPPPPNNNNPPPNNNNNNNNNNPPPNNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/6.java
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
52:foldedSize+=(arrayFoldedChildren.size()-1)*(joinString.length()+2);
TO:
51

Following are 1th generated patches:
Validating 176 patches...
Current actions:
INSERT:
52:foldedSize+=(arrayFoldedChildren.size()-1)*(joinString.length()+2);
TO:
51

Following are 2th generated patches:
Validating 175 patches...
Current actions:
DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

Following are 3th generated patches:
Validating 1 patches...
Tested:1718 patches
Compile failed:1523 patches
Compilation rate:0.11350407450523865
PPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNPNNNNNNNPNNNPNNNPNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNPNNPNNNNNNNNPNNNNNPNNPNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/7.java
Current actions:
INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

INSERT:
56:}

TO:
51

DELETE:
Original line: 65arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 1th generated patches:
Validating 120 patches...
Current actions:
DELETE:
Original line: 41foldedSize+=InlineCostEstimator.getCost(elem);

INSERT:
56:}

TO:
51

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 87reportCodeChange();

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

INSERT:
56:}

TO:
51

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 65arrayNode.detachChildren();

DELETE:
Original line: 68foldedStringNode=replacement;

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 71reportCodeChange();

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

DELETE:
Original line: 88break;

Following are 3th generated patches:
Validating 131 patches...
Current actions:
DELETE:
Original line: 37foldedSize+=sb.length()+2;

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
56:}

TO:
51

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 37foldedSize+=sb.length()+2;

INSERT:
48:if(arrayFoldedChildren.size()>1){
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
51

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
54:reportCodeChange();
TO:
51

INSERT:
55:return n;
TO:
51

INSERT:
56:}

TO:
51

DELETE:
Original line: 90return n;

Tested:1960 patches
Compile failed:1765 patches
Compilation rate:0.09948979591836735
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/8.java
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

Following are 0th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 75return n;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 75return n;

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 2th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

Following are 3th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 75return n;

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

Tested:1975 patches
Compile failed:1769 patches
Compilation rate:0.10430379746835443
NNNPPPPPPPPPPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/9.java
Tested:1975 patches
Compile failed:1769 patches
Compilation rate:0.10430379746835443

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/10.java
Current actions:
INSERT:
27:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
34

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
36:if(prev!=null){
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
46

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 29else{
sb.append(joinString);
}

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
37:foldedSize+=InlineCostEstimator.getCost(prev);
TO:
46

UPDATE
FROM:
52:foldedSize+=arrayFoldedChildren.size()-1;
TO:
40:foldedSize+=arrayNode.getChildCount()-1;

UPDATE
FROM:
54:switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
TO:
41:switch (arrayNode.getChildCount()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayNode.getFirstChild();
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayNode.getChildCount()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
if(right!=null){
foldedSize+=InlineCostEstimator.getCost(right);
}
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayNode.children()){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
66:if(right!=null){
foldedSize+=InlineCostEstimator.getCost(right);
}
TO:
78

Tested:2375 patches
Compile failed:2133 patches
Compilation rate:0.10189473684210526
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNPPNPNPPNNNPPNPNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNPPPPPPNPPNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/11.java
Current actions:
Wrap:
IfStatement
On:
[return n;]
Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()!=arrayNode.getChildCount()){
return n;
}
TO:
51

DELETE:
Original line: 75return n;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()!=arrayNode.getChildCount()){
return n;
}
TO:
51

DELETE:
Original line: 75return n;

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

Following are 3th generated patches:
Validating 200 patches...
Tested:2784 patches
Compile failed:2515 patches
Compilation rate:0.0966235632183908
NNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNPNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPPPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/12.java
Current actions:
INSERT:
29:if(prev!=null){
foldedSize+=joinString.length();
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
34

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
39:if(prev!=null){
foldedSize+=joinString.length();
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
46

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
25:foldedSize+=InlineCostEstimator.getCost(elem);
TO:
25

INSERT:
26:arrayFoldedChildren.add(elem);
TO:
25

DELETE:
Original line: 27sb=new StringBuilder();

DELETE:
Original line: 29else{
sb.append(joinString);
}

INSERT:
29:if(prev!=null){
foldedSize+=joinString.length();
foldedSize+=InlineCostEstimator.getCost(prev);
}
TO:
34

UPDATE
FROM:
37:foldedSize+=sb.length()+2;
TO:
30:foldedSize+=joinString.length();

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 3th generated patches:
Validating 200 patches...
Tested:3383 patches
Compile failed:3034 patches
Compilation rate:0.1031628731894768
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPNNPNPNNNNNNPNNNNNNNNNNNPNPNNNNPNPNPPNPNNNNPNNNPNNNNNNNNNNNNPPNNPNNPPPNNNNNNPPNNPNNNNNNNNNNNNNNNNNNNNPNNPNNNNPNPNNNNNNPPNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPNPNPNNNPNNNPNNNNNNNNNNNNNNNNNNNPNNPNNPNNNNNNNNNNPPNNPNNNNNNNNNNPNNNPPNNNPNPNNNPNPNNPNNPNNNNNNNNNNNPNPNNNPNPPNNNNPPNNNNPNNNNPNNNNNNNNNNNNNNPNNNNNNPPNPNNNNNNNPNPPNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/13.java
Current actions:
Wrap:
MethodDeclaration
On:
[List<Node> arrayFoldedChildren=Lists.newLinkedList();, return n;, String joinString=(right==null)?",":NodeUtil.getStringValue(right);, StringBuilder sb=null;, int foldedSize=0;, Node elem=arrayNode.getFirstChild();, while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}, {
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}, if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}, {
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}, else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, {
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, {
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}, foldedSize+=sb.length()+2;, foldedSize+=sb.length()+2;, sb=null;, sb=null;, foldedSize+=InlineCostEstimator.getCost(elem);, foldedSize+=InlineCostEstimator.getCost(elem);, arrayFoldedChildren.add(elem);, arrayFoldedChildren.add(elem);, elem=elem.getNext();, if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}, {
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}, foldedSize+=sb.length()+2;, foldedSize+=arrayFoldedChildren.size()-1;, int originalSize=InlineCostEstimator.getCost(n);]
Following are 0th generated patches:
Validating 63 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
StringBuilder sb=null;
int foldedSize=0;
List<Node> arrayFoldedChildren=Lists.newLinkedList();
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
}
foldedSize+=arrayFoldedChildren.size()-1;
int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 36Preconditions.checkNotNull(prev);

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
StringBuilder sb=null;
int foldedSize=0;
List<Node> arrayFoldedChildren=Lists.newLinkedList();
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
}
foldedSize+=arrayFoldedChildren.size()-1;
int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
StringBuilder sb=null;
int foldedSize=0;
List<Node> arrayFoldedChildren=Lists.newLinkedList();
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}
if(sb!=null){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));
}
foldedSize+=arrayFoldedChildren.size()-1;
int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
36:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
46:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem));

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 4th generated patches:
Validating 200 patches...
Tested:4219 patches
Compile failed:3741 patches
Compilation rate:0.11329698980801138
NNNNNNPPPPPPPPPPNNNNNNNNNNPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNPPNPPNNNNNNPNNPNPPPPNPPPPNPNPNNNNNNPPPNNPNNPPPNPPPPNNNNNPNNPNNNNPPNPNNPPPNPPPNPNPPNPNNNNNNPNPNNPNPNPPPPPNPPNNNPNNPNNNPPPNPPPPNPNPPPPNPNPPPPNPNPPNNPNNNNPNPNPPNPPPPPPNNPPPNNPNNNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/14.java
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

Following are 1th generated patches:
Validating 200 patches...
Tested:4420 patches
Compile failed:3927 patches
Compilation rate:0.11153846153846154
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNPNNNNNNNNNNNNNPNNNNNNNNPNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNPPNNNNNNNNPNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/15.java
Current actions:
DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

Following are 0th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 1th generated patches:
Validating 4 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 2th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

Following are 3th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
59:return emptyStringNode;
TO:
56:return Node.newString("");

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
60

DELETE:
Original line: 58reportCodeChange();

INSERT:
59:if(foldedSize>originalSize){
return n;
}
TO:
60

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 4th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 58reportCodeChange();

Tested:4439 patches
Compile failed:3933 patches
Compilation rate:0.11398963730569948
NNNNNNPPPPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/16.java
Current actions:
INSERT:
18:if(right==null){
right=new Node(Token.STRING,",");
}
TO:
17

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
23:if(foldedStringNode==emptyStringNode){
return n;
}
TO:
17

INSERT:
35:}

TO:
17

INSERT:
63:}

TO:
46

DELETE:
Original line: 63return n;

INSERT:
70:}

TO:
46

INSERT:
72:}

TO:
46

INSERT:
78:}

TO:
51

Following are 2th generated patches:
Validating 62 patches...
Current actions:
INSERT:
26:if(foldedStringNode==arrayNode){
return n;
}
TO:
17

INSERT:
35:}

TO:
17

INSERT:
63:}

TO:
46

INSERT:
70:}

TO:
46

INSERT:
72:}

TO:
46

DELETE:
Original line: 75return n;

INSERT:
78:}

TO:
51

Following are 3th generated patches:
Validating 62 patches...
Current actions:
INSERT:
29:if(foldedStringNode!=null){
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
17

INSERT:
35:}

TO:
17

DELETE:
Original line: 58reportCodeChange();

INSERT:
63:}

TO:
46

INSERT:
70:}

TO:
46

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

INSERT:
72:}

TO:
46

DELETE:
Original line: 72return foldedStringNode;

INSERT:
78:}

TO:
51

Following are 4th generated patches:
Validating 32 patches...
Current actions:
DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

INSERT:
22:Node foldedStringNode=tryFoldArrayJoin(arrayNode,right,emptyStringNode);
TO:
17

INSERT:
23:if(foldedStringNode==emptyStringNode){
return n;
}
TO:
17

DELETE:
Original line: 30sb.append(joinString);

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

INSERT:
35:}

TO:
17

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 50arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 55case 0 :

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

INSERT:
63:}

TO:
46

DELETE:
Original line: 65arrayNode.detachChildren();

INSERT:
70:}

TO:
46

DELETE:
Original line: 71reportCodeChange();

INSERT:
72:}

TO:
46

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

INSERT:
78:}

TO:
51

DELETE:
Original line: 81return n;

Tested:4795 patches
Compile failed:4108 patches
Compilation rate:0.14327424400417102
NNPPPPPNPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPPNPPNPPNNNPNPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPPPNPPPPPPNPNNPPPPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/17.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 36 patches...
Current actions:
INSERT:
83:Node newArrayNode=Node.newArray(arrayFoldedChildren).copyInformationFrom(arrayNode);
TO:
82

INSERT:
84:newArrayNode.useSourceInfoIfMissingFromForTree(n);
TO:
82

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

INSERT:
85:n.getParent().replaceChild(n,newArrayNode);
TO:
82

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
83:Node newArrayNode=Node.newArray(arrayFoldedChildren).copyInformationFrom(arrayNode);
TO:
82

INSERT:
84:newArrayNode.useSourceInfoIfMissingFromForTree(n);
TO:
82

DELETE:
Original line: 85arrayNode.addChildToBack(node);

Following are 2th generated patches:
Validating 200 patches...
Tested:5227 patches
Compile failed:4535 patches
Compilation rate:0.13238951597474652
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/18.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 21 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
83:Node newArrayNode=new Node(Token.ARRAYLIT,arrayFoldedChildren);
TO:
82

INSERT:
84:n.getParent().replaceChild(n,newArrayNode);
TO:
82

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
84:n.getParent().replaceChild(n,newArrayNode);
TO:
82

Following are 3th generated patches:
Validating 77 patches...
Current actions:
INSERT:
83:Node newArrayNode=new Node(Token.ARRAYLIT,arrayFoldedChildren);
TO:
82

INSERT:
84:n.getParent().replaceChild(n,newArrayNode);
TO:
82

DELETE:
Original line: 85arrayNode.addChildToBack(node);

Following are 4th generated patches:
Validating 200 patches...
Tested:5722 patches
Compile failed:4699 patches
Compilation rate:0.1787836420831877
NNNNNNNNNNNNNNNNPPPPPNNPPPPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPPNPPNPPPNPPPNPPNNPNNPPNNNPPPPPNPPPNNPNPNPPNPPPPPPPNNPPPPPPPPNPPPPPPPPPPPPNPPPPNPPPNPNPPPPPPPPNPPPPPNPPPNPPNNPPNPPPPPPNPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPPPPNPPPNPNPPPNPPNPPPNNNPNNNPPPNPPPPPNNPPNNPNPNPNNPPNPPPNPNPNPPPPNPPPPPPPPPPPPPPPPNNPPPPPNPPPPPPPPNPPPPNPNPPNPPNPPPPNNPPPPPPPPPPPPPPPPPPPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/19.java
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
71:}

TO:
56

Following are 1th generated patches:
Validating 186 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
58:int originalSize=InlineCostEstimator.getCost(n);
TO:
56

INSERT:
59:int kJoinOverhead="[].join()".length();
TO:
56

INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

INSERT:
62:if(foldedSize>originalSize){
return n;
}
TO:
56

INSERT:
65:arrayNode.detachChildren();
TO:
56

INSERT:
66:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
69:reportCodeChange();
TO:
56

INSERT:
71:}

TO:
56

Following are 2th generated patches:
Validating 195 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 55case 0 :

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
61:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
56

INSERT:
62:if(foldedSize>originalSize){
return n;
}
TO:
56

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 67Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);

INSERT:
69:reportCodeChange();
TO:
56

INSERT:
70:return n;
TO:
56

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

DELETE:
Original line: 71reportCodeChange();

INSERT:
71:}

TO:
56

DELETE:
Original line: 72return foldedStringNode;

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 196 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 55case 0 :

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

INSERT:
58:int originalSize=InlineCostEstimator.getCost(n);
TO:
56

DELETE:
Original line: 58reportCodeChange();

INSERT:
59:int kJoinOverhead="[].join()".length();
TO:
56

DELETE:
Original line: 59return emptyStringNode;

INSERT:
60:foldedSize+=kJoinOverhead;
TO:
56

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

INSERT:
61:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
56

INSERT:
62:if(foldedSize>originalSize){
return n;
}
TO:
56

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 65arrayNode.detachChildren();

INSERT:
65:arrayNode.detachChildren();
TO:
56

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

INSERT:
66:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
56

INSERT:
69:reportCodeChange();
TO:
56

DELETE:
Original line: 70n.getParent().replaceChild(n,foldedStringNode);

INSERT:
70:return n;
TO:
56

DELETE:
Original line: 71reportCodeChange();

INSERT:
71:}

TO:
56

DELETE:
Original line: 72return foldedStringNode;

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 77int kJoinOverhead="[].join()".length();

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 83arrayNode.detachChildren();

DELETE:
Original line: 84for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

DELETE:
Original line: 88break;

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 67Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);

DELETE:
Original line: 68foldedStringNode=replacement;

INSERT:
71:}

TO:
56

Tested:6466 patches
Compile failed:5443 patches
Compilation rate:0.15821218682338387

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/20.java
Current actions:
DELETE:
Original line: 65arrayNode.detachChildren();

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 65arrayNode.detachChildren();

Following are 0th generated patches:
Validating 1 patches...
Tested:6468 patches
Compile failed:5443 patches
Compilation rate:0.15847247990105132
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/21.java
Tested:6468 patches
Compile failed:5443 patches
Compilation rate:0.15847247990105132

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/22.java
Current actions:
INSERT:
28:if(prev!=null){
arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));
}
TO:
34

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
36:if(prev!=null){
arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));
}
TO:
46

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
18:String joinString=(right==null)?",":NodeUtil.getStringValue(right);
TO:
18:String joinString=(right==null)?",":right.getString();

INSERT:
25:arrayFoldedChildren.add(Node.newString(elem.getString()).copyInformationFrom(elem));
TO:
25

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 29else{
sb.append(joinString);
}

UPDATE
FROM:
38:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
29:arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
36:if(prev!=null){
arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));
}
TO:
46

INSERT:
40:if(foldedSize==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

DELETE:
Original line: 60case 1 :

DELETE:
Original line: 73default :

INSERT:
77:}

TO:
56

DELETE:
Original line: 88break;

Tested:6868 patches
Compile failed:5697 patches
Compilation rate:0.17050087361677344
NNNNNNNNNPPPPPPNNNPNNPPNNNNNPNPPPNPNPPNPPPNNNNNNNPNPPPPNNPNNNPNNNPPPPNPNPNNPNNPNNNPPNPNPNNNNPNNNNNNPNNNNNNNNPPPNPPNPNNNNNNPPNNPNNPPNNPPPNNPNNNPPNNPNNNNNNNPNNPNNPNPPNNNNNNPNNNNNNNNNNNNNNPPPNPNNNNNPPPPPNNNNNNNNNPPPPPNNNNPNPNNPPNNPNNPPNPPPNPNNPPPNNPNNNNNPPPPNNPNNNNNNPPPPPPNNPNNNNNNPPPNNPNNNNPPNPPNNNNNNNNNNNNNPNPNNPPNPPNNNNNPPNNPNPNPPNNPPPNNNNNPNPNNNPNNNNNNNPNPPNPNNNNPNNNNPNNNNNNNNNNNPNNPNPNPNNNNPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/23.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
83:Node joinNode=Node.newString("");
TO:
82

DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
85:joinNode.addChildToBack(Node.newString("]").copyInformationFrom(callTarget));
TO:
82

INSERT:
86:n.getParent().replaceChild(n,joinNode);
TO:
82

UPDATE
FROM:
85:arrayNode.addChildToBack(node);
TO:
88:joinNode.addChildToBack(node);

Following are 1th generated patches:
Validating 200 patches...
Tested:7107 patches
Compile failed:5893 patches
Compilation rate:0.17081750386942451
NNNNNNNNPPNPPPPNNNNNNPPNPNPNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNPNNNPPPNNPNNPNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPPNPPPNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNPPNNNPNNNNNNNPNPNNNNNNNNNNNNNNNNNNPNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/24.java
Current actions:
INSERT:
49:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
81:}

TO:
56

Following are 1th generated patches:
Validating 196 patches...
Current actions:
INSERT:
55:if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(NodeUtil.isStringNode(foldedStringNode)){
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
56

Following are 2th generated patches:
Validating 5 patches...
Current actions:
INSERT:
57:if(NodeUtil.isStringNode(foldedStringNode)){
if(cost>0){
return n;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
56

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
58:if(cost>0){
return n;
}
TO:
56

DELETE:
Original line: 63return n;

INSERT:
81:}

TO:
56

Following are 4th generated patches:
Validating 16 patches...
Current actions:
INSERT:
67:if(cost>0){
return n;
}
TO:
56

DELETE:
Original line: 75return n;

INSERT:
81:}

TO:
56

Tested:7524 patches
Compile failed:6310 patches
Compilation rate:0.16135034556087188
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/25.java
Current actions:
INSERT:
53:if(arrayFoldedChildren.size()==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
86:}

TO:
56

Following are 1th generated patches:
Validating 186 patches...
Current actions:
INSERT:
61:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

DELETE:
Original line: 63return n;

INSERT:
86:}

TO:
56

Following are 2th generated patches:
Validating 22 patches...
Current actions:
INSERT:
77:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

DELETE:
Original line: 81return n;

INSERT:
86:}

TO:
56

Following are 3th generated patches:
Validating 22 patches...
Current actions:
INSERT:
52:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
51

DELETE:
Original line: 55case 0 :

INSERT:
60:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
56

INSERT:
61:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

DELETE:
Original line: 61Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 63return n;

INSERT:
65:if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
TO:
56

DELETE:
Original line: 66if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}

INSERT:
70:reportCodeChange();
TO:
56

DELETE:
Original line: 71reportCodeChange();

INSERT:
71:return foldedStringNode;
TO:
56

DELETE:
Original line: 72return foldedStringNode;

INSERT:
73:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
TO:
56

DELETE:
Original line: 73default :

DELETE:
Original line: 74if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}

DELETE:
Original line: 78foldedSize+=kJoinOverhead;

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

INSERT:
80:arrayNode.detachChildren();
TO:
56

DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
86:}

TO:
56

DELETE:
Original line: 88break;

Following are 4th generated patches:
Validating 33 patches...
Current actions:
INSERT:
61:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
56

DELETE:
Original line: 63return n;

INSERT:
84:reportCodeChange();
TO:
56

INSERT:
86:}

TO:
56

DELETE:
Original line: 87reportCodeChange();

Tested:7776 patches
Compile failed:6562 patches
Compilation rate:0.15612139917695472
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/26.java
Current actions:
INSERT:
19:if(NodeUtil.getArrayLength(arrayNode)==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
18

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
28:if(NodeUtil.getArrayElementStringValue(elem)==null){
oneString=false;
break;
}
TO:
18

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
19:if(NodeUtil.getArrayLength(arrayNode)==0){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
18

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

INSERT:
26:Node elem=arrayNode.getFirstChild();
TO:
18

INSERT:
27:while(elem!=null){
if(NodeUtil.getArrayElementStringValue(elem)==null){
oneString=false;
break;
}
elem=elem.getNext();
}
TO:
18

INSERT:
34:if(oneString){
Node foldedStringNode=Node.newString("");
int index=0;
elem=arrayNode.getFirstChild();
while(elem!=null){
foldedStringNode=Node.newString(foldedStringNode.getString()+NodeUtil.getArrayElementStringValue(elem)+((index==NodeUtil.getArrayLength(arrayNode)-1)?"":joinString));
index++;
elem=elem.getNext();
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
18

INSERT:
47:int originalSize=InlineCostEstimator.getCost(n);
TO:
18

INSERT:
52:elem=arrayNode.getFirstChild();
TO:
22

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

Following are 4th generated patches:
Validating 200 patches...
Tested:8374 patches
Compile failed:7154 patches
Compilation rate:0.14568903749701456

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/27.java
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

Following are 0th generated patches:
Validating 41 patches...
Current actions:
DELETE:
Original line: 83arrayNode.detachChildren();

UPDATE
FROM:
85:arrayNode.addChildToBack(node);
TO:
85:result.addChildToBack(node);

INSERT:
88:result.removeChild(result.getLastChild());
TO:
86

INSERT:
89:result.getParent().replaceChild(n,result);
TO:
86

Following are 1th generated patches:
Validating 200 patches...
Tested:8614 patches
Compile failed:7377 patches
Compilation rate:0.14360343626654284
NNNNNNNNPPPPNNPNPNNPNNPPNNPNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/28.java
Current actions:
INSERT:
29:if(right!=null){
foldedSize-=InlineCostEstimator.getCost(right);
}
TO:
46

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
54:if(node.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),node);
node=replacement;
}
TO:
83

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
19:int kJoinOverhead="[].join()".length();
TO:
18

INSERT:
21:int originalSize=InlineCostEstimator.getCost(n);
TO:
18

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

INSERT:
24:foldedSize+=InlineCostEstimator.getCost(elem);
TO:
24

INSERT:
25:foldedSize+=2;
TO:
24

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

INSERT:
28:foldedSize-=InlineCostEstimator.getCost(arrayNode);
TO:
46

DELETE:
Original line: 29else{
sb.append(joinString);
}

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 34else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}

UPDATE
FROM:
61:Node foldedStringNode=arrayFoldedChildren.remove(0);
TO:
39:Node foldedStringNode=arrayNode.getFirstChild();

DELETE:
Original line: 44prev=elem;

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

INSERT:
48:foldedSize+=joinString.length()*(arrayNode.getChildCount()-1);
TO:
73

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 50arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
53:for(Node node : arrayNode.children()){
if(node.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),node);
node=replacement;
}
arrayNode.addChildToBack(node);
arrayNode.addChildToBack(Node.newString(joinString).copyInformationFrom(node));
}
TO:
83

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

Following are 3th generated patches:
Validating 200 patches...
Tested:9004 patches
Compile failed:7751 patches
Compilation rate:0.13916037316748112
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPPNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPNNPPNPNNNPNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/29.java
Current actions:
INSERT:
52:if(arrayFoldedChildren.isEmpty()){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 56Node emptyStringNode=Node.newString("");

DELETE:
Original line: 57n.getParent().replaceChild(n,emptyStringNode);

DELETE:
Original line: 58reportCodeChange();

DELETE:
Original line: 59return emptyStringNode;

INSERT:
86:}

TO:
53

Following are 1th generated patches:
Validating 56 patches...
Current actions:
INSERT:
58:if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
51

Following are 2th generated patches:
Validating 5 patches...
Current actions:
INSERT:
60:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
51

DELETE:
Original line: 63return n;

INSERT:
86:}

TO:
53

Following are 3th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 55case 0 :

INSERT:
60:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
51

DELETE:
Original line: 63return n;

INSERT:
69:reportCodeChange();
TO:
51

DELETE:
Original line: 71reportCodeChange();

DELETE:
Original line: 73default :

INSERT:
76:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
53

DELETE:
Original line: 79foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;

INSERT:
80:arrayNode.detachChildren();
TO:
53

DELETE:
Original line: 80if(foldedSize>originalSize){
return n;
}

DELETE:
Original line: 83arrayNode.detachChildren();

INSERT:
86:}

TO:
53

DELETE:
Original line: 88break;

Following are 4th generated patches:
Validating 29 patches...
Current actions:
INSERT:
52:if(arrayFoldedChildren.isEmpty()){
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
}
TO:
51

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

INSERT:
58:if(arrayFoldedChildren.size()==1){
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
}
TO:
51

INSERT:
74:int kJoinOverhead="[].join()".length();
TO:
53

INSERT:
75:foldedSize+=kJoinOverhead;
TO:
53

INSERT:
76:foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
TO:
53

INSERT:
77:if(foldedSize>originalSize){
return n;
}
TO:
53

INSERT:
80:arrayNode.detachChildren();
TO:
53

INSERT:
81:for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
TO:
53

INSERT:
84:reportCodeChange();
TO:
53

INSERT:
85:return n;
TO:
53

INSERT:
86:}

TO:
53

DELETE:
Original line: 90return n;

Tested:9109 patches
Compile failed:7855 patches
Compilation rate:0.1376660445713031
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/30.java
Current actions:
DELETE:
Original line: 21int foldedSize=0;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
49:sb.append(NodeUtil.getArrayElementStringValue(prev));
TO:
48

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 21int foldedSize=0;

INSERT:
36:sb.append(joinString);
TO:
36

INSERT:
49:sb.append(NodeUtil.getArrayElementStringValue(prev));
TO:
48

UPDATE
FROM:
50:arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
TO:
50:arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 62if(foldedSize>originalSize){
return n;
}

Following are 2th generated patches:
Validating 200 patches...
Tested:9706 patches
Compile failed:8228 patches
Compilation rate:0.15227694209767154
NNPPPPPPPPPPNPPPPPNPPPPNNPPPPNNPPPPPNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPPPPPPPPNPPPPPPPPPPPPNPPPPPPPPPPPPNPPPPPPPPPPPPNPPPPPPPPNPPPPPPPPPPNPPPPPPPPPNPPPPPNPPPPPNNNNNPPPPPNPNNPNPPNPNPPPNPPPPPPPNNNNNNNPPPPPPPNNPPPNNNPPPPPNNPPNPNNPNNNNNNNNNNPPPNNNPNPPPNPNNNNNPNNNNPNPPPPPPPPPNPNPNNPNNPPNPPNPNPNNPPPPNPPPPPPPPPPNPNPPNNPPPNNNPPNPPNPPNNPPPPPPPPNPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/31.java
Current actions:
INSERT:
18:if(right!=null){
String joinString=NodeUtil.getStringValue(right);
boolean isSimpleString=true;
for(int i=0;i<joinString.length();i++){
char ch=joinString.charAt(i);
if(ch=='"'||ch=='\\'){
isSimpleString=false;
break;
}
}
if(isSimpleString){
int foldedSize=0;
for(Node elem : arrayNode.children()){
foldedSize+=elem.getString().length();
}
int joinStringLength=joinString.length();
foldedSize+=(arrayNode.getChildCount()-1)*joinStringLength;
foldedSize+="[].join()".length();
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
String joined=Joiner.on(joinString).join(arrayNode.getStrings());
Node replacement=Node.newString(joined);
n.getParent().replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
}
TO:
17

Following are 1th generated patches:
Validating 44 patches...
Current actions:
INSERT:
23:if(ch=='"'||ch=='\\'){
isSimpleString=false;
break;
}
TO:
17

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
28:if(isSimpleString){
int foldedSize=0;
for(Node elem : arrayNode.children()){
foldedSize+=elem.getString().length();
}
int joinStringLength=joinString.length();
foldedSize+=(arrayNode.getChildCount()-1)*joinStringLength;
foldedSize+="[].join()".length();
if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
String joined=Joiner.on(joinString).join(arrayNode.getStrings());
Node replacement=Node.newString(joined);
n.getParent().replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
TO:
17

Following are 3th generated patches:
Validating 4 patches...
Current actions:
INSERT:
36:if(foldedSize>InlineCostEstimator.getCost(n)){
return n;
}
TO:
17

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
34:foldedSize+=(arrayNode.getChildCount()-1)*joinStringLength;
TO:
17

INSERT:
40:Node replacement=Node.newString(joined);
TO:
17

Tested:10154 patches
Compile failed:8676 patches
Compilation rate:0.1455584006302935
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/32.java
Current actions:
INSERT:
22:if(value==null){
return n;
}
TO:
18

INSERT:
35:}

TO:
51

DELETE:
Original line: 63return n;

Following are 1th generated patches:
Validating 40 patches...
Current actions:
INSERT:
26:if(elem.getNext()!=null){
sb.append(joinString);
}
TO:
33

DELETE:
Original line: 30sb.append(joinString);

INSERT:
35:}

TO:
51

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 25if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}

INSERT:
31:Node parent=n.getParent();
TO:
51

INSERT:
32:parent.replaceChild(n,foldedStringNode);
TO:
51

INSERT:
34:return foldedStringNode;
TO:
51

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
35:}

TO:
51

DELETE:
Original line: 42arrayFoldedChildren.add(elem);

DELETE:
Original line: 45elem=elem.getNext();

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

Following are 3th generated patches:
Validating 200 patches...
Tested:10591 patches
Compile failed:9113 patches
Compilation rate:0.13955245019356058
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/33.java
Current actions:
INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

Following are 1th generated patches:
Validating 36 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

INSERT:
30:else{
prev=elem;
}
TO:
33

DELETE:
Original line: 48Preconditions.checkNotNull(prev);

DELETE:
Original line: 50arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 90return n;

Following are 2th generated patches:
Validating 49 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 21int foldedSize=0;

DELETE:
Original line: 22Node prev=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

INSERT:
30:else{
prev=elem;
}
TO:
33

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 90return n;

Following are 3th generated patches:
Validating 51 patches...
Current actions:
INSERT:
2:private Node tryFoldArrayJoin(Node n){
Node callTarget=n.getFirstChild();
if(callTarget==null||!NodeUtil.isGetProp(callTarget)){
return n;
}
Node right=callTarget.getNext();
if(right!=null){
if(!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node arrayNode=callTarget.getFirstChild();
Node functionName=arrayNode.getNext();
if((arrayNode.getType()!=Token.ARRAYLIT)||!functionName.getString().equals("join")){
return n;
}
String joinString=(right==null)?",":NodeUtil.getStringValue(right);
Node prev=null;
Node elem=arrayNode.getFirstChild();
while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
}
else{
prev=elem;
}
elem=elem.getNext();
}
return n;
}
TO:
1

DELETE:
Original line: 16return n;

DELETE:
Original line: 18String joinString=(right==null)?",":NodeUtil.getStringValue(right);

DELETE:
Original line: 20StringBuilder sb=null;

DELETE:
Original line: 22Node prev=null;

DELETE:
Original line: 23Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 24while(elem!=null){
if(NodeUtil.isImmutableValue(elem)||elem.getType()==Token.EMPTY){
if(sb==null){
sb=new StringBuilder();
}
else{
sb.append(joinString);
}
sb.append(NodeUtil.getArrayElementStringValue(elem));
}
else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
prev=elem;
elem=elem.getNext();
}

INSERT:
24:Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
TO:
25

INSERT:
26:reportCodeChange();
TO:
25

INSERT:
27:return joined;
TO:
25

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

DELETE:
Original line: 52foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 53int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

DELETE:
Original line: 90return n;

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 19List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 20StringBuilder sb=null;

INSERT:
23:if(prev!=null){
Node joined=NodeUtil.newStringNode(elem,"\""+joinString+NodeUtil.getArrayElementStringValue(prev)+"\"");
prev.getParent().replaceChild(prev,joined);
reportCodeChange();
return joined;
}
TO:
25

DELETE:
Original line: 26if(sb==null){
sb=new StringBuilder();
}

DELETE:
Original line: 29else{
sb.append(joinString);
}

INSERT:
30:else{
prev=elem;
}
TO:
33

DELETE:
Original line: 32sb.append(NodeUtil.getArrayElementStringValue(elem));

DELETE:
Original line: 34else{
if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}

DELETE:
Original line: 44prev=elem;

DELETE:
Original line: 49foldedSize+=sb.length()+2;

DELETE:
Original line: 54switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
n.getParent().replaceChild(n,emptyStringNode);
reportCodeChange();
return emptyStringNode;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(n),foldedStringNode);
foldedStringNode=replacement;
}
n.getParent().replaceChild(n,foldedStringNode);
reportCodeChange();
return foldedStringNode;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return n;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=(right!=null)?InlineCostEstimator.getCost(right):0;
if(foldedSize>originalSize){
return n;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
reportCodeChange();
break;
}

Tested:10887 patches
Compile failed:9404 patches
Compilation rate:0.1362175071185818
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_50/34.java
Current actions:
DELETE:
Original line: 20StringBuilder sb=null;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
29:if(prev!=null){
foldedSize+=joinString.length()+2;
}
TO:
34

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
38:if(prev!=null){
foldedSize+=joinString.length()+2;
}
TO:
46

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
26:arrayFoldedChildren.add(elem);
TO:
32

DELETE:
Original line: 29else{
sb.append(joinString);
}

UPDATE
FROM:
37:foldedSize+=sb.length()+2;
TO:
30:foldedSize+=joinString.length()+2;

DELETE:
Original line: 35if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
sb=null;
}

INSERT:
38:if(prev!=null){
foldedSize+=joinString.length()+2;
}
TO:
46

UPDATE
FROM:
49:foldedSize+=sb.length()+2;
TO:
39:foldedSize+=joinString.length()+2;

DELETE:
Original line: 47if(sb!=null){
Preconditions.checkNotNull(prev);
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
}

Following are 3th generated patches:
Validating 200 patches...
Tested:11683 patches
Compile failed:9991 patches
Compilation rate:0.1448258152871694
NPPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNPPPNPNNNPNNNPNPNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPNPNNNNNNNPNPNPPNPPPNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNPPNNNPNPNNNPNNNNNNNNNNNNNNNNNPNNPNNNNNPNNPNNNPNNPNNNNNNNNNNNNNPPNNPPNPNPNNPNNNPNNNNNNNPNNNNNNNNNNNPNPNNNNNPPPPNNNNPNNNNPPNNNNNNNNNNNNNNNNNNNPNNNNPNPNNPNNNNNNPPNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNPPNPPNNNNNPNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNPNPNPNNPNNNNNNNNNNNNPPNPNNNNPNNPNPPPNNNNNPNNNNNNNNNNNNNNNNPPNPPPNNNNNNPNNNNNPPNPNNNNNNNNNNNNNNNNPNNNNNPNNPNNNPNNNNNNNPPNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : closure-50 > patch : 0 | Start : Sat Apr 13 14:26:21 HKT 2024 | End : 2024.04.13 AD at 15:01:34 HKT
