Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(!type.isConstructor()&&!type.isEmptyType()&&!type.isUnknownType()){
+report(t,n,NOT_A_CONSTRUCTOR);
+ensureTyped(t,n);
+return;
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
-}
-else{
-ensureTyped(t,n);
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+return;
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+getTypedPercent();
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+JSTypeinstanceType=fnType.getPrototype();
+if(instanceType.isAllType()){
+instanceType=getNativeType(ARRAY_TYPE);
+}
+ensureTyped(t,n,instanceType);
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+JSTypeinstanceType=fnType.toObjectType();
+if(instanceType.isAllType()){
+instanceType=getNativeType(ARRAY_TYPE);
+}
+ensureTyped(t,n,instanceType);
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+JSTypeinstanceType=fnType.getReturnType();
+if(instanceType.isAllType()){
+instanceType=getNativeType(ARRAY_TYPE);
+}
+ensureTyped(t,n,instanceType);
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+ensureTyped(t,n);
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isConstructor()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isNoObjectType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.makesDicts()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isNoType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(!fnType.isEmptyType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isVoidType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isUnionType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isEnumType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(!fnType.isFunctionType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isRecordType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isNominalType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isResolved()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isNominalConstructor()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.makesStructs()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isNumber()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(type.isConstructor()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isStruct()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isInstanceType()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isInterface()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(fnType.isDict()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
Following diff 0:
-ensureTyped(t,n,fnType.getInstanceType());
+if(!fnType.isObject()){
+ensureTyped(t,n,fnType.getInstanceType());
+}
