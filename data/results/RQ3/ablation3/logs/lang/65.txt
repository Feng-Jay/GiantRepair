Repair : lang_65
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/0.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millisecs);
TO:
58

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 2th generated patches:
Validating 200 patches...
Tested:522 patches
Compile failed:457 patches
Compilation rate:0.12452107279693486
NNNNNNNNNNNPPPPPNNNNNNNPPNNNNNNNNNNPNNPPPPPPPPNNPNNNPPNNNNPPPPNNNNNPNPPPPPPPPNPNPPNNNNPPNPPPNNNNNPPNPNNNPPPPNPPNPNPNNNNPNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNPNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/1.java
Tested:522 patches
Compile failed:457 patches
Compilation rate:0.12452107279693486

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/2.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

Following are 3th generated patches:
Validating 116 patches...
Current actions:
INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

Following are 4th generated patches:
Validating 117 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Tested:1159 patches
Compile failed:1041 patches
Compilation rate:0.10181190681622088

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/3.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

Following are 1th generated patches:
Validating 80 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

Following are 2th generated patches:
Validating 54 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:time=time/1000*1000;
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 3th generated patches:
Validating 196 patches...
Current actions:
INSERT:
7:time=time/1000*1000;
TO:
5

INSERT:
8:val.setTime(new Date(time));
TO:
5

Following are 4th generated patches:
Validating 142 patches...
Current actions:
INSERT:
7:time=time/1000*1000;
TO:
5

Tested:1634 patches
Compile failed:1471 patches
Compilation rate:0.09975520195838433
NNNPPPPNNNNNNNNNNNNNNNNNPNPPPPPNNPPPPNNPNNPNPPNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPNPNPNNPNPNNPNPNNPNNNPPNNPPNPPPNNNNNNNNNNPNPNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/4.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
11:val.set(Calendar.AM_PM,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:2068 patches
Compile failed:1808 patches
Compilation rate:0.12572533849129594
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNPPPPPPPPPPNNNNNNNPNNNNNNNNPNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNNPPPPPPPPPPPPPPPPPPPPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/5.java
Current actions:
Wrap:
Block
On:
[if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}, break;, case Calendar.AM_PM :, if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}, break;, {
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, int min=val.getActualMinimum(fields[i][0]);]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 1th generated patches:
Validating 5 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

INSERT:
6:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

Following are 2th generated patches:
Validating 5 patches...
Current actions:
INSERT:
6:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
6:boolean roundUp=false;
TO:
7:boolean offsetSet=false;

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 5 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

Tested:2161 patches
Compile failed:1859 patches
Compilation rate:0.13975011568718185
NNNPPPPPPPPNPNNNNNNNNPNNPPPPPPNPNNNNPPNNNPNNNPNNNNNNNNNNNNNNNPNNNNNNNPPPNNPPPPPPPNNPPPPPPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/6.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 165 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 1th generated patches:
Validating 198 patches...
Current actions:
INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 17val.add(Calendar.MONTH,1);

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
13:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Tested:2874 patches
Compile failed:2440 patches
Compilation rate:0.15100904662491302
NNNPPPPPPPPPPPPPPPPPPPNNNNNPNPPPPPPPPNNPPPPPPPPPPNNPNNPNPPPPPPNNNPPPPNPPPPPPPPPNPNNPPNPPPPPPPNPNPPNPPPPPPNNPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPPNPNNNNNNNPNNNNNNNNNNPNPNPNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNPNPNNNNNNPNNNNNNNNNNPPNPNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNPNNNNPPNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNPNNNNNPNNNNNNNNPPNNNPNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNPNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/7.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-millis%1000);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-seconds%60);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%60);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:3308 patches
Compile failed:2820 patches
Compilation rate:0.1475211608222491
NNNNNNNNNNNPPPNPPNNNPPPNNNNNNPNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNPNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPNNPPPNPPPNNNNNNPPNPNPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/8.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
65:val.set(Calendar.MILLISECOND,millis);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
66:val.set(Calendar.SECOND,seconds);
TO:
58

INSERT:
67:val.set(Calendar.MINUTE,minutes);
TO:
58

Following are 2th generated patches:
Validating 200 patches...
Tested:3830 patches
Compile failed:3252 patches
Compilation rate:0.15091383812010445
NNNNNNNNPPPPPPNNPPNNNNNNNNNNNNPNNNPNPNPPNPPPPNPNNNNPPNNPPNPPPNNNNNPPNNPPPPPPPNPNPPPNNPNNPPPNNNNNPPPPNNNNNNPNPPNPPNNNPNNNPNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNPNNNNNNNNPNPPPPPPPPPNPNPNPPNNPPNNPNPNNNNNNPPNNNPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/9.java
Current actions:
INSERT:
6:if(round&&field==DateUtils.SEMI_MONTH&&val.get(Calendar.DATE)==1){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
18:}

TO:
48

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:if(round&&field==DateUtils.SEMI_MONTH&&val.get(Calendar.DATE)==1){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

INSERT:
15:else{
val.add(field,round?1:0);
}
TO:
48

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
18:}

TO:
48

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 33if(offset>=15){
offset-=15;
}

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 2th generated patches:
Validating 200 patches...
Tested:4230 patches
Compile failed:3652 patches
Compilation rate:0.13664302600472814
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/10.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:if(millisecs!=0){
int[] fieldMillis={Calendar.MILLISECOND};
millisToSet=truncate(val,millisecs,fieldMillis,true);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:if(seconds!=0){
int[] fieldSeconds={Calendar.SECOND};
secondsToSet=truncate(val,seconds,fieldSeconds,true);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
91:}

TO:
60

INSERT:
95:}

TO:
60

INSERT:
96:}

TO:
60

INSERT:
100:}

TO:
60

INSERT:
101:}

TO:
60

INSERT:
102:}

TO:
60

INSERT:
103:}

TO:
60

INSERT:
105:}

TO:
60

Following are 4th generated patches:
Validating 117 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
13:if(millisecs!=0){
int[] fieldMillis={Calendar.MILLISECOND};
millisToSet=truncate(val,millisecs,fieldMillis,true);
}
TO:
5

INSERT:
17:int secondsToSet=0;
TO:
5

INSERT:
18:if(seconds!=0){
int[] fieldSeconds={Calendar.SECOND};
secondsToSet=truncate(val,seconds,fieldSeconds,true);
}
TO:
5

INSERT:
22:int minutesToSet=0;
TO:
5

INSERT:
23:if(minutes!=0){
int[] fieldMinutes={Calendar.MINUTE};
minutesToSet=truncate(val,minutes,fieldMinutes,true);
}
TO:
5

INSERT:
91:}

TO:
60

INSERT:
95:}

TO:
60

INSERT:
96:}

TO:
60

INSERT:
100:}

TO:
60

INSERT:
101:}

TO:
60

INSERT:
102:}

TO:
60

INSERT:
103:}

TO:
60

INSERT:
105:}

TO:
60

Tested:4947 patches
Compile failed:4369 patches
Compilation rate:0.11683848797250859

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/11.java
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 63 patches...
Current actions:
INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

Following are 1th generated patches:
Validating 168 patches...
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8:val.setTimeInMillis(millis);
TO:
5

Following are 3th generated patches:
Validating 117 patches...
Current actions:
INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

Following are 4th generated patches:
Validating 51 patches...
Current actions:
INSERT:
6:long millis=val.getTimeInMillis();
TO:
5

INSERT:
7:millis-=millis%DateUtils.MILLIS_PER_SECOND;
TO:
5

INSERT:
8:val.setTimeInMillis(millis);
TO:
5

INSERT:
9:millis-=millis%DateUtils.MILLIS_PER_MINUTE;
TO:
5

INSERT:
10:val.setTimeInMillis(millis);
TO:
5

INSERT:
11:millis-=millis%DateUtils.MILLIS_PER_HOUR;
TO:
5

INSERT:
12:val.setTimeInMillis(millis);
TO:
5

Tested:5521 patches
Compile failed:4883 patches
Compilation rate:0.11555877558413331
NNNNNNNNNNNNPPPPNPPPPNNPNNNNNPNPNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNPPPPPPPNPNNPPPPPPPPNPPNNPPNNNNNPPNNNNPNNNNPNNNNNNNNNPPPNNNNNNNNNPNNNNPPNNPNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/12.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:5955 patches
Compile failed:5232 patches
Compilation rate:0.12141057934508816
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNPNNNNNNNNNPNNNNNPNPPPPNNPNPNNPNNNPNPPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNPNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNPPPPPNPNPPPNNNNNNNNNNNNNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/13.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%ROUND_FRACTION));
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,millis-(millis%ROUND_FRACTION));
TO:
5

INSERT:
9:val.set(Calendar.SECOND,seconds-(seconds%ROUND_FRACTION));
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%ROUND_FRACTION));
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:6590 patches
Compile failed:5854 patches
Compilation rate:0.11168437025796661

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/14.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 2th generated patches:
Validating 115 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
10:val.set(Calendar.HOUR,0);
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:7325 patches
Compile failed:6506 patches
Compilation rate:0.11180887372013652

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/15.java
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
16:break;
TO:
48

INSERT:
19:if(offset>=12){
offset-=12;
}
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
30:for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
TO:
48

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

INSERT:
7:int offset=0;
TO:
5

INSERT:
14:round=offset>7;
TO:
48

INSERT:
16:break;
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
25:}

TO:
48

DELETE:
Original line: 27int offset=0;

INSERT:
27:val.setTime(new Date(time));
TO:
48

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

INSERT:
51:int offset=val.get(fields[i][0])-min;
TO:
53

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTime().getTime();
TO:
5

DELETE:
Original line: 6boolean roundUp=false;

INSERT:
7:int offset=0;
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
10:offset=val.get(Calendar.DATE)-1;
TO:
30

INSERT:
11:if(offset>=15){
offset-=15;
}
TO:
30

INSERT:
14:round=offset>7;
TO:
48

INSERT:
16:break;
TO:
48

INSERT:
17:case Calendar.AM_PM :
TO:
48

INSERT:
18:offset=val.get(Calendar.HOUR_OF_DAY);
TO:
48

INSERT:
19:if(offset>=12){
offset-=12;
}
TO:
48

INSERT:
22:round=offset>6;
TO:
48

INSERT:
23:time-=offset*DateUtils.MILLIS_PER_HOUR;
TO:
48

INSERT:
24:break;
TO:
48

INSERT:
25:}

TO:
48

INSERT:
26:time-=val.getTime().getTime()-time;
TO:
48

INSERT:
27:val.setTime(new Date(time));
TO:
48

INSERT:
28:boolean roundUp=false;
TO:
48

INSERT:
29:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
int offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
48

Following are 3th generated patches:
Validating 200 patches...
Tested:7893 patches
Compile failed:7074 patches
Compilation rate:0.10376282782212087

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/16.java
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int milli=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:val.set(Calendar.MILLISECOND,milli-milli%1000);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-sec%60);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-min%60);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:8528 patches
Compile failed:7702 patches
Compilation rate:0.09685741088180112

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/17.java
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-minutes%DateUtils.MILLIS_PER_HOUR);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecs=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
8:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
9:val.set(Calendar.MILLISECOND,millisecs-millisecs%DateUtils.MILLIS_PER_SECOND);
TO:
5

INSERT:
10:val.set(Calendar.SECOND,seconds-seconds%DateUtils.MILLIS_PER_MINUTE);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:9163 patches
Compile failed:8319 patches
Compilation rate:0.09210957110116774
NNNNNNNNNNNNNNNNNPPPNPNNPNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNPNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPPNPNPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/18.java
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

Following are 0th generated patches:
Validating 1 patches...
Tested:9165 patches
Compile failed:8321 patches
Compilation rate:0.09208947081287507
NN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/19.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
7:case Calendar.MILLISECOND :
TO:
5

INSERT:
8:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
9:case Calendar.SECOND :
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
13:default :
TO:
5

INSERT:
14:break;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
7:case Calendar.MILLISECOND :
TO:
5

INSERT:
10:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
11:case Calendar.MINUTE :
TO:
5

INSERT:
14:break;
TO:
5

INSERT:
16:boolean roundUp=false;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 3th generated patches:
Validating 174 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:switch (field){
case Calendar.MILLISECOND :
val.set(Calendar.MILLISECOND,0);
case Calendar.SECOND :
val.set(Calendar.SECOND,0);
case Calendar.MINUTE :
val.set(Calendar.MINUTE,0);
default :
break;
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
16:boolean roundUp=false;
TO:
5

INSERT:
17:for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:9994 patches
Compile failed:9136 patches
Compilation rate:0.08585151090654393

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/20.java
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 2th generated patches:
Validating 117 patches...
Current actions:
DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

INSERT:
57:val.add(fields[i][0],-offset);
TO:
56

Following are 3th generated patches:
Validating 118 patches...
Tested:10232 patches
Compile failed:9350 patches
Compilation rate:0.08620015637216576
PPPPNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNPPNNNNNNNNNNPPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPNNNNNNNPNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNPNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/21.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 25 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
10:val.setTimeInMillis(time);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

Following are 2th generated patches:
Validating 169 patches...
Current actions:
INSERT:
8:time=(time/1000)*1000;
TO:
5

INSERT:
9:time=(time/60000)*60000;
TO:
5

Following are 3th generated patches:
Validating 52 patches...
Current actions:
INSERT:
8:time=(time/1000)*1000;
TO:
5

Following are 4th generated patches:
Validating 26 patches...
Current actions:
INSERT:
9:time=(time/60000)*60000;
TO:
5

Tested:10692 patches
Compile failed:9740 patches
Compilation rate:0.08903853348297792
NNNNNNNNNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNPNPNPNPPPNNNNNNNPPPPPPNNPPPPNNNNPNNPNNNNNNNNPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNPNNNPPPNPNPPPPPNPPNPPNPNPPPNPPPPPNNPPNPNNPNNNNNPNPNNNNNPNNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/22.java
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
20:return ;
TO:
48

INSERT:
21:}

TO:
48

DELETE:
Original line: 24return ;

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 2th generated patches:
Validating 7 patches...
Current actions:
INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
21:}

TO:
48

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 43if(offset>=12){
offset-=12;
}

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(field,1);
}
}
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
20:return ;
TO:
48

INSERT:
21:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 2 patches...
Tested:10696 patches
Compile failed:9743 patches
Compilation rate:0.08909872849663425
PNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/23.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,ms-(ms%1000));
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,ms-(ms%1000));
TO:
5

INSERT:
8:int sec=val.get(Calendar.SECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,sec-(sec%60));
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,min-(min%60));
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:11130 patches
Compile failed:10170 patches
Compilation rate:0.0862533692722372
NNNNNNNNNNNNNNNNNNNPPNNNNNNNPPNNNPNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/24.java
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 0th generated patches:
Validating 7 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

Following are 2th generated patches:
Validating 117 patches...
Current actions:
INSERT:
7:time=truncate(field,time);
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 3th generated patches:
Validating 171 patches...
Current actions:
INSERT:
8:val.setTimeInMillis(time);
TO:
5

Following are 4th generated patches:
Validating 117 patches...
Current actions:
INSERT:
6:long time=val.getTimeInMillis();
TO:
5

INSERT:
8:val.setTimeInMillis(time);
TO:
5

Tested:11739 patches
Compile failed:10767 patches
Compilation rate:0.08280092001022234

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/25.java
Current actions:
INSERT:
6:int min=val.getActualMinimum(field);
TO:
5

Following are 0th generated patches:
Validating 134 patches...
Current actions:
INSERT:
8:if(field==Calendar.MILLISECOND){
val.set(Calendar.MILLISECOND,min);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
11:if(field==Calendar.SECOND){
val.set(Calendar.SECOND,min);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int min=val.getActualMinimum(field);
TO:
5

INSERT:
8:if(field==Calendar.MILLISECOND){
val.set(Calendar.MILLISECOND,min);
}
TO:
5

INSERT:
12:val.set(Calendar.SECOND,min);
TO:
5

INSERT:
14:else{
if(field==Calendar.MINUTE){
val.set(Calendar.MINUTE,min);
}
}
TO:
5

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
14:else{
if(field==Calendar.MINUTE){
val.set(Calendar.MINUTE,min);
}
}
TO:
5

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

Tested:12470 patches
Compile failed:11467 patches
Compilation rate:0.08043303929430634
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNPNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNPNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNPNNNNNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/26.java
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

INSERT:
67:val.set(Calendar.SECOND,ss);
TO:
59

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int ms=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
9:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
10:int min=val.get(Calendar.MINUTE);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,ms);
TO:
59

INSERT:
67:val.set(Calendar.SECOND,ss);
TO:
59

INSERT:
68:val.set(Calendar.MINUTE,min);
TO:
59

Following are 3th generated patches:
Validating 117 patches...
Tested:13110 patches
Compile failed:12082 patches
Compilation rate:0.0784134248665141
NNNNNNNNNNNNNNNNPPNNNPNNNNNNPNNNNNNNNNNNNNNNPNPPPPNNNPNNNNPNNNNNNNNPPNNNNNNNNNPPPNNNPPNNNPNNNNNNNNNPNNNNNNNNNNNNNNNPNNNPNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/27.java
Current actions:
INSERT:
6:switch (field){
case Calendar.MILLISECOND :
case Calendar.SECOND :
case Calendar.MINUTE :
val.set(Calendar.MILLISECOND,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MINUTE,0);
break;
case Calendar.DATE :
val.set(Calendar.HOUR_OF_DAY,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.HOUR :
case Calendar.HOUR_OF_DAY :
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
case Calendar.AM_PM :
val.set(Calendar.HOUR,0);
val.set(Calendar.MINUTE,0);
val.set(Calendar.SECOND,0);
val.set(Calendar.MILLISECOND,0);
break;
default :
break;
}
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
44:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
8:case Calendar.SECOND :
TO:
5

INSERT:
9:case Calendar.MINUTE :
TO:
5

INSERT:
11:val.set(Calendar.SECOND,0);
TO:
5

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

INSERT:
16:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
17:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
19:break;
TO:
5

INSERT:
22:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
24:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
28:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
33:break;
TO:
5

INSERT:
44:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Tested:13305 patches
Compile failed:12277 patches
Compilation rate:0.0772641863960917
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/28.java
Current actions:
INSERT:
6: final int milli=Calendar.MILLISECOND;
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
9:if(field==milli){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7: final int second=Calendar.SECOND;
TO:
5

INSERT:
8: final int minute=Calendar.MINUTE;
TO:
5

INSERT:
9:if(field==milli){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

INSERT:
12:if(field==second){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:14102 patches
Compile failed:12905 patches
Compilation rate:0.08488157708126506
NNNPPPPPPPPNPNNPPPPPPPPPNPPPPPPPNPPPNPNPNNNNNNPNNPPNPPNPPPNPPPPPPPNPNNPPNPPPNPNNNNNNNPPPPPPNPPPPNNNPPNPPNNPNNPPPNNNPPNPPPPPPPNNNNPPPPPPPPNNPNNNNPNNNNNNPPNNPPPNPPPPNPPPPPPPPPNNPPPPNPPPPPNPPPPNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPPNNNPNNNNNPPNNPPNNNNNPPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPPPPPNNNPNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNPNNNNNNNNNNNNNPNNNNNNNNPNNNPNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/29.java
Current actions:
Wrap:
IfStatement
On:
[val.add(fields[i][0],1);, if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}, {
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}]
Following are 0th generated patches:
Validating 50 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 1th generated patches:
Validating 198 patches...
Current actions:
DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 15else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
10:if(round&&roundUp){
val.add(fields[i][0],1);
}
TO:
9

Tested:14728 patches
Compile failed:13466 patches
Compilation rate:0.08568712656165128
NNNNNPPPPPPPPPPNNNPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPPNPNNNNNPNNNNNNNPPNNNPNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNPNNNNPPNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPPPNNNNNNNNPNNNNNNPPNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNPNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPPPNNNNNNNNPNNNNNNNPPNNNNNPNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/30.java
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 1th generated patches:
Validating 117 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
8:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
7:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
9:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:15454 patches
Compile failed:14120 patches
Compilation rate:0.08632069367154135
PPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNPNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNPNNPNNNNNPNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNPNNNNPNNNPPPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNPNPNNNNNNPNNNNNNPNNNNNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNPNNNNNPNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPNNNNNPNNNNNPPNNNNPPNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/31.java
Current actions:
UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 2th generated patches:
Validating 8 patches...
Current actions:
DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 52int min=val.getActualMinimum(fields[i][0]);

Following are 3th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

UPDATE
FROM:
10:if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
TO:
9:if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 7 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
}
throw new IllegalArgumentException("The field "+field+" is not supported");
}
TO:
1

DELETE:
Original line: 3if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Tested:15460 patches
Compile failed:14126 patches
Compilation rate:0.08628719275549807
NNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/32.java
Current actions:
INSERT:
9:if(offset>0){
val.add(Calendar.MILLISECOND,-offset);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:if(offset>0){
val.add(Calendar.SECOND,-offset);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:int[] date={Calendar.MILLISECOND,Calendar.SECOND,Calendar.MINUTE,Calendar.HOUR,Calendar.DATE,Calendar.MONTH,Calendar.YEAR};
TO:
5

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
7:int[] roundUp={0,0,15,6,15,0,0};
TO:
5

INSERT:
8:int offset=val.get(Calendar.MILLISECOND)-roundUp[0];
TO:
5

INSERT:
9:if(offset>0){
val.add(Calendar.MILLISECOND,-offset);
}
TO:
5

INSERT:
12:offset=val.get(Calendar.SECOND)-roundUp[1];
TO:
5

INSERT:
13:if(offset>0){
val.add(Calendar.SECOND,-offset);
}
TO:
5

INSERT:
16:offset=val.get(Calendar.MINUTE)-roundUp[2];
TO:
5

INSERT:
17:if(offset>0){
val.add(Calendar.MINUTE,-offset);
}
TO:
5

INSERT:
20:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
21:val.set(Calendar.MINUTE,0);
TO:
5

INSERT:
22:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
23:val.set(Calendar.MILLISECOND,0);
TO:
5

INSERT:
24:for(int i=0;i<date.length;i++){
if(date[i]==field){
if(round&&roundUp[i]!=0){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(date[i],1);
}
}
return ;
}
}
TO:
5

INSERT:
43:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
44:}

TO:
48

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Tested:15860 patches
Compile failed:14512 patches
Compilation rate:0.08499369482976041
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/33.java
Current actions:
INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

Following are 1th generated patches:
Validating 98 patches...
Current actions:
INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 21val.add(fields[i][0],1);

INSERT:
27:}

TO:
48

Following are 2th generated patches:
Validating 50 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
27:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 83 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

DELETE:
Original line: 10if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}

INSERT:
26:throw new IllegalArgumentException("The field "+field+" is not supported");
TO:
48

INSERT:
27:}

TO:
48

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 32 patches...
Current actions:
INSERT:
6:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
return ;
}
TO:
5

INSERT:
19:if(round){
val.add(fields[i][0],1);
}
TO:
9

DELETE:
Original line: 20else{
val.add(fields[i][0],1);
}

INSERT:
27:}

TO:
48

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 46roundUp=offset>6;

DELETE:
Original line: 47offsetSet=true;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Tested:16105 patches
Compile failed:14732 patches
Compilation rate:0.08525302701024527
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPNPPPPPPPPPNPNPPPPNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/34.java
Current actions:
Wrap:
MethodDeclaration
On:
[int offset=0;, boolean offsetSet=false;, int min=val.getActualMinimum(fields[i][0]);, throw new ArithmeticException("Calendar value too large for accurate calculations");, val.set(fields[i][0],val.get(fields[i][0])-offset);, boolean roundUp=false;, switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}, case DateUtils.SEMI_MONTH :, if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}, {
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}]
Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 1th generated patches:
Validating 2 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
2:{
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 12if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}

DELETE:
Original line: 17val.add(Calendar.MONTH,1);

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
INSERT:
2:private static void modify(Calendar val,int field,boolean round){
if(val.get(Calendar.YEAR)>280000000){
throw new ArithmeticException("Calendar value too large for accurate calculations");
}
boolean roundUp=false;
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}
TO:
1

DELETE:
Original line: 4throw new ArithmeticException("Calendar value too large for accurate calculations");

DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 8for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}

DELETE:
Original line: 27int offset=0;

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 29switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Tested:16183 patches
Compile failed:14769 patches
Compilation rate:0.08737564110486312
NNNNNNPPPPPPPNNNNNNNNNPPPNNNNNNNNNPPPPNPNNPNPNPNNPPPPPPPPNPNNPNPPPNPPPPPPPPPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/35.java
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
11:val.set(Calendar.SECOND,0);
TO:
5

INSERT:
66:val.set(Calendar.MILLISECOND,millisecond);
TO:
58

INSERT:
68:val.set(Calendar.MINUTE,minute);
TO:
58

INSERT:
69:val.set(Calendar.HOUR_OF_DAY,hour);
TO:
58

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int minute=val.get(Calendar.MINUTE);
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millisecond=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
8:int minute=val.get(Calendar.MINUTE);
TO:
5

INSERT:
10:val.set(Calendar.MILLISECOND,0);
TO:
5

Following are 3th generated patches:
Validating 200 patches...
Tested:16977 patches
Compile failed:15458 patches
Compilation rate:0.08947399422748424
NNNNNNNNNNNNPPPNPPPPPNPPNPNPPPNPNPNPPPNNNPNNNNNPNNPNNNPPNNPPPPNPPNNPPNNNNNPNPNPNNNPNNNPNPNNNNNNPPNNPPNNNNNPNNNNPNNPNPPPPPPPNNNPPPPNPPNNPPNNNPPNNNNNPPNPNNNPNNNNNNPNNPNPPPPPPPNNNPPPNPNPPPNPPNNNPPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/36.java
Current actions:
INSERT:
16:if(firstJanX==4||firstJanX==1){
return ;
}
TO:
5

DELETE:
Original line: 24return ;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
34:if(!round){
switch (field){
case DateUtils.SECOND :
val.set(Calendar.MILLISECOND,0);
case DateUtils.MINUTE :
val.set(Calendar.SECOND,0);
case DateUtils.HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.HOUR_OF_DAY :
val.set(Calendar.SECOND,0);
case DateUtils.MINUTE_OF_HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.SECOND_OF_MINUTE :
val.set(Calendar.SECOND,0);
}
}
TO:
50

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 6boolean roundUp=false;

DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
8:int seconds=val.get(Calendar.SECOND);
TO:
5

INSERT:
10:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
11:val.set(Calendar.MINUTE,minutes-(minutes%60));
TO:
5

INSERT:
12:val.set(Calendar.HOUR_OF_DAY,0);
TO:
5

INSERT:
13:val.set(Calendar.AM_PM,0);
TO:
5

INSERT:
14:val.set(Calendar.HOUR,0);
TO:
5

INSERT:
15:int firstJanX=val.get(firstJanXField[field]);
TO:
5

INSERT:
16:if(firstJanX==4||firstJanX==1){
return ;
}
TO:
5

INSERT:
20:switch (field){
case DateUtils.WEEK_OF_YEAR :
val.add(Calendar.DATE,7*(weekNumber-1));
break;
case DateUtils.WEEK_OF_MONTH :
val.add(Calendar.DATE,7*(weekNumber-val.get(Calendar.WEEK_OF_MONTH)));
break;
case Calendar.WEEK_OF_YEAR :
val.set(Calendar.WEEK_OF_YEAR,weekNumber);
break;
case Calendar.WEEK_OF_MONTH :
val.set(Calendar.WEEK_OF_MONTH,weekNumber);
break;
}
TO:
48

INSERT:
34:if(!round){
switch (field){
case DateUtils.SECOND :
val.set(Calendar.MILLISECOND,0);
case DateUtils.MINUTE :
val.set(Calendar.SECOND,0);
case DateUtils.HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.HOUR_OF_DAY :
val.set(Calendar.SECOND,0);
case DateUtils.MINUTE_OF_HOUR :
val.set(Calendar.MINUTE,0);
case DateUtils.SECOND_OF_MINUTE :
val.set(Calendar.SECOND,0);
}
}
TO:
50

Following are 3th generated patches:
Validating 200 patches...
Tested:17369 patches
Compile failed:15849 patches
Compilation rate:0.08751223444067016
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/37.java
Current actions:
INSERT:
6:if(round){
switch (field){
case DateUtils.SEMI_MONTH :
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
break;
case Calendar.AM_PM :
if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
break;
default :
val.add(field,1);
}
}
TO:
5

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
18:if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
TO:
40

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
12:else{
val.set(Calendar.DATE,val.getActualMaximum(Calendar.DATE));
val.add(Calendar.MONTH,-1);
}
TO:
30

DELETE:
Original line: 16val.add(Calendar.DATE,-15);

INSERT:
23:val.set(Calendar.HOUR,11);
TO:
40

INSERT:
26:default :
TO:
49

INSERT:
27:val.add(field,1);
TO:
49

DELETE:
Original line: 28boolean offsetSet=false;

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

INSERT:
31:val.add(field,1);
TO:
56

DELETE:
Original line: 42offset=val.get(Calendar.HOUR_OF_DAY);

DELETE:
Original line: 55roundUp=offset>((max-min)/2);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
13:val.set(Calendar.DATE,val.getActualMaximum(Calendar.DATE));
TO:
30

INSERT:
14:val.add(Calendar.MONTH,-1);
TO:
30

INSERT:
18:if(val.get(Calendar.AM_PM)==0){
val.set(Calendar.HOUR,0);
}
TO:
40

INSERT:
26:default :
TO:
49

INSERT:
27:val.add(field,1);
TO:
49

INSERT:
31:val.add(field,1);
TO:
56

Following are 4th generated patches:
Validating 200 patches...
Tested:17956 patches
Compile failed:16360 patches
Compilation rate:0.08888393851637336
PNNNNNNNNNPPPPPPNPNNNNNPNNNNPPNPPNNNNNNNNPPNNPPNNNNNNPNPPNNNNNPPPNPNPNNNNNNNNNNNNNNNNPNNNNNNPPPNNNPNNNNNNNNNNPNNNPPPPNNPNPNNPPNNPNPNPPNPPNPPPNNNPNPPPNNPPPNNNPPPPPNNNPPPNPPNNNPPPPNNNPNNNNNNPPNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/38.java
Current actions:
INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

DELETE:
Original line: 21val.add(fields[i][0],1);

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 7for(int i=0;i<fields.length;i++){
for(int j=0;j<fields[i].length;j++){
if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}
}
int offset=0;
boolean offsetSet=false;
switch (field){
case DateUtils.SEMI_MONTH :
if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}
break;
case Calendar.AM_PM :
if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}
break;
}
if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}
val.set(fields[i][0],val.get(fields[i][0])-offset);
}

INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
7:if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
TO:
5

DELETE:
Original line: 11if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}

INSERT:
16:else{
val.add(fields[i][0],1);
}
TO:
26

DELETE:
Original line: 21val.add(fields[i][0],1);

DELETE:
Original line: 30case DateUtils.SEMI_MONTH :

DELETE:
Original line: 31if(fields[i][0]==Calendar.DATE){
offset=val.get(Calendar.DATE)-1;
if(offset>=15){
offset-=15;
}
roundUp=offset>7;
offsetSet=true;
}

DELETE:
Original line: 39break;

DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 49break;

DELETE:
Original line: 53int max=val.getActualMaximum(fields[i][0]);

DELETE:
Original line: 57val.set(fields[i][0],val.get(fields[i][0])-offset);

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 3th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 9if(fields[i][j]==field){
if(round&&roundUp){
if(field==DateUtils.SEMI_MONTH){
if(val.get(Calendar.DATE)==1){
val.add(Calendar.DATE,15);
}
else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
}
else{
val.add(fields[i][0],1);
}
}
return ;
}

INSERT:
11:else{
val.add(Calendar.DATE,-15);
val.add(Calendar.MONTH,1);
}
TO:
5

DELETE:
Original line: 32offset=val.get(Calendar.DATE)-1;

DELETE:
Original line: 40case Calendar.AM_PM :

DELETE:
Original line: 47offsetSet=true;

DELETE:
Original line: 51if(!offsetSet){
int min=val.getActualMinimum(fields[i][0]);
int max=val.getActualMaximum(fields[i][0]);
offset=val.get(fields[i][0])-min;
roundUp=offset>((max-min)/2);
}

DELETE:
Original line: 59throw new IllegalArgumentException("The field "+field+" is not supported");

Following are 4th generated patches:
Validating 7 patches...
Current actions:
DELETE:
Original line: 41if(fields[i][0]==Calendar.HOUR_OF_DAY){
offset=val.get(Calendar.HOUR_OF_DAY);
if(offset>=12){
offset-=12;
}
roundUp=offset>6;
offsetSet=true;
}

DELETE:
Original line: 54offset=val.get(fields[i][0])-min;

Tested:17960 patches
Compile failed:16364 patches
Compilation rate:0.0888641425389755
NNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/lang_65/39.java
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:if(millis<500){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
14:if(seconds<30){
val.set(Calendar.SECOND,0);
}
TO:
5

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
6:int millis=val.get(Calendar.MILLISECOND);
TO:
5

INSERT:
7:if(millis<500){
val.set(Calendar.MILLISECOND,0);
}
TO:
5

INSERT:
10:else{
if(millis>500){
val.set(Calendar.MILLISECOND,1000);
}
}
TO:
5

INSERT:
14:if(seconds<30){
val.set(Calendar.SECOND,0);
}
TO:
5

INSERT:
18:val.set(Calendar.SECOND,60);
TO:
5

INSERT:
20:int minutes=val.get(Calendar.MINUTE);
TO:
5

INSERT:
21:if(minutes<30){
val.set(Calendar.MINUTE,0);
}
TO:
5

INSERT:
24:else{
if(minutes>30){
val.set(Calendar.MINUTE,60);
}
}
TO:
5

Following are 4th generated patches:
Validating 200 patches...
Tested:18757 patches
Compile failed:17010 patches
Compilation rate:0.09313856160366796
NNNNNNNNNPPPPPPPPNNNNPPPPPPNPPNNPNNNNNPPPNPNNNPNPPPNNNNNNNPPPPPNPPPNNPPNPNNNNNNNPNPNPPNNNNNNNNPPPPPNNNPNPPNPPNNPNPNNNNPPPNNPNNNPPNNPNNNNNNNNPPPNNPPPNNPNNNNPPNNNNNNNNPPPPPPPPNNPNNNNPNNNNNPNNPPNNNNPPPPPNNNNNNNNNNNNNPPPPNNNPNPNPNPPPNPNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNPNPNNNNNNNNNNNNNNNNNNNPNPPPPNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPPNNNNNNNNPPNNNNPNNNNPNNNNPPPNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNPNPNNNNPNNNNNNNNNNPNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNPPPNNNNNPNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNPNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNN
Finish : lang-65 > patch : 0 | Start : Tue Apr 09 22:10:06 HKT 2024 | End : 2024.04.09 AD at 22:41:17 HKT
