Repair : closure_105
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/0.java
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/1.java
Current actions:
DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

Following are 0th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 62foldedSize+=kJoinOverhead;

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

DELETE:
Original line: 62foldedSize+=kJoinOverhead;

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

Following are 3th generated patches:
Validating 1 patches...
Tested:6 patches
Compile failed:2 patches
Compilation rate:0.6666666666666666
NPPPPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/2.java
Current actions:
INSERT:
19:if(foldedStringNode==null){
foldedStringNode=Node.newString(NodeUtil.getStringValue(elem));
}
TO:
17

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
35:if(foldedStringNode!=null){
foldedSize+=InlineCostEstimator.getCost(foldedStringNode);
if(foldedSize>originalSize){
return ;
}
parent.replaceChild(n,foldedStringNode);
}
TO:
37

Following are 2th generated patches:
Validating 60 patches...
Current actions:
INSERT:
25:}

TO:
28

INSERT:
32:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
TO:
33

INSERT:
37:if(foldedSize>originalSize){
return ;
}
TO:
37

DELETE:
Original line: 47if(foldedSize>originalSize){
return ;
}

INSERT:
54:}

TO:
37

DELETE:
Original line: 58if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}

INSERT:
305:}

TO:
37

INSERT:
306:}

TO:
37

Following are 3th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 12List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
16:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
15

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

INSERT:
23:foldedStringNode=Node.newString(foldedStringNode.getString()+joinString+NodeUtil.getStringValue(elem));
TO:
23

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

INSERT:
25:}

TO:
28

INSERT:
32:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
TO:
33

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

INSERT:
36:foldedSize+=InlineCostEstimator.getCost(foldedStringNode);
TO:
37

INSERT:
37:if(foldedSize>originalSize){
return ;
}
TO:
37

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 40switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
parent.replaceChild(n,emptyStringNode);
break;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}
parent.replaceChild(n,foldedStringNode);
break;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
break;
}

INSERT:
48:arrayNode.detachChildren();
TO:
37

INSERT:
54:}

TO:
37

INSERT:
305:}

TO:
37

INSERT:
306:}

TO:
37

Following are 4th generated patches:
Validating 200 patches...
Current actions:
INSERT:
12:Node foldedStringNode=null;
TO:
11

DELETE:
Original line: 12List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
16:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
15

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

INSERT:
19:if(foldedStringNode==null){
foldedStringNode=Node.newString(NodeUtil.getStringValue(elem));
}
TO:
17

INSERT:
23:foldedStringNode=Node.newString(foldedStringNode.getString()+joinString+NodeUtil.getStringValue(elem));
TO:
23

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

INSERT:
25:}

TO:
28

INSERT:
32:if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
TO:
33

INSERT:
35:if(foldedStringNode!=null){
foldedSize+=InlineCostEstimator.getCost(foldedStringNode);
if(foldedSize>originalSize){
return ;
}
parent.replaceChild(n,foldedStringNode);
}
TO:
37

DELETE:
Original line: 35foldedSize+=sb.length()+2;

DELETE:
Original line: 36arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 41case 0 :

DELETE:
Original line: 42Node emptyStringNode=Node.newString("");

INSERT:
42:else{
foldedSize+="[].join()".length();
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
}
TO:
37

DELETE:
Original line: 43parent.replaceChild(n,emptyStringNode);

DELETE:
Original line: 44break;

DELETE:
Original line: 45case 1 :

DELETE:
Original line: 46Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 47if(foldedSize>originalSize){
return ;
}

DELETE:
Original line: 50arrayNode.detachChildren();

DELETE:
Original line: 52Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);

DELETE:
Original line: 53foldedStringNode=replacement;

INSERT:
54:}

TO:
37

DELETE:
Original line: 55parent.replaceChild(n,foldedStringNode);

DELETE:
Original line: 56break;

DELETE:
Original line: 58if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}

DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

DELETE:
Original line: 62foldedSize+=kJoinOverhead;

DELETE:
Original line: 64if(foldedSize>originalSize){
return ;
}

DELETE:
Original line: 67arrayNode.detachChildren();

DELETE:
Original line: 71break;

INSERT:
305:}

TO:
37

INSERT:
306:}

TO:
37

Tested:456 patches
Compile failed:452 patches
Compilation rate:0.008771929824561403
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/3.java
Current actions:
INSERT:
16:if(elem.getType()==Token.STRING){
foldedSize+=joinString.length()+elem.getString().length();
}
TO:
17

Following are 1th generated patches:
Validating 133 patches...
Current actions:
INSERT:
29:if(foldedSize<originalSize){
if(arrayNode.getChildCount()==1){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize<originalSize){
arrayNode.detachChildren();
Node foldedStringNode=Node.newString("");
for(Node elem : arrayNode.children()){
foldedStringNode=new Node(Token.ADD,foldedStringNode,elem);
if(elem.getType()!=Token.STRING){
foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(""));
}
foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(joinString));
}
foldedStringNode=foldedStringNode.getFirstChild();
foldedStringNode.setString("");
parent.replaceChild(n,foldedStringNode);
t.getCompiler().reportCodeChange();
}
}
TO:
39

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
22:}

TO:
28

INSERT:
30:if(arrayNode.getChildCount()==1){
return ;
}
TO:
39

DELETE:
Original line: 48return ;

INSERT:
52:}

TO:
35

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 12List<Node> arrayFoldedChildren=Lists.newLinkedList();

DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
16:if(elem.getType()==Token.STRING){
foldedSize+=joinString.length()+elem.getString().length();
}
TO:
17

DELETE:
Original line: 19sb.append(joinString);

INSERT:
20:foldedSize+=joinString.length()+8;
TO:
23

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

INSERT:
22:}

TO:
28

INSERT:
23:else{
foldedSize+=joinString.length()+InlineCostEstimator.getCost(elem);
}
TO:
28

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

INSERT:
29:if(foldedSize<originalSize){
if(arrayNode.getChildCount()==1){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize<originalSize){
arrayNode.detachChildren();
Node foldedStringNode=Node.newString("");
for(Node elem : arrayNode.children()){
foldedStringNode=new Node(Token.ADD,foldedStringNode,elem);
if(elem.getType()!=Token.STRING){
foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(""));
}
foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(joinString));
}
foldedStringNode=foldedStringNode.getFirstChild();
foldedStringNode.setString("");
parent.replaceChild(n,foldedStringNode);
t.getCompiler().reportCodeChange();
}
}
TO:
39

DELETE:
Original line: 30arrayFoldedChildren.add(elem);

DELETE:
Original line: 36arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 40switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
parent.replaceChild(n,emptyStringNode);
break;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}
parent.replaceChild(n,foldedStringNode);
break;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
break;
}

INSERT:
52:}

TO:
35

DELETE:
Original line: 73t.getCompiler().reportCodeChange();

Tested:790 patches
Compile failed:786 patches
Compilation rate:0.005063291139240506
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/4.java
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

DELETE:
Original line: 19sb.append(joinString);

INSERT:
24:foldedSize+=joinString.length()*(arrayFoldedChildren.size()-1);
TO:
33

DELETE:
Original line: 25foldedSize+=sb.length()+2;

DELETE:
Original line: 26arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 30arrayFoldedChildren.add(elem);

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 35foldedSize+=sb.length()+2;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

INSERT:
24:foldedSize+=joinString.length()*(arrayFoldedChildren.size()-1);
TO:
33

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

DELETE:
Original line: 30arrayFoldedChildren.add(elem);

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

INSERT:
46:foldedSize+="[].join()".length();
TO:
60

DELETE:
Original line: 50arrayNode.detachChildren();

DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

DELETE:
Original line: 62foldedSize+=kJoinOverhead;

Following are 4th generated patches:
Validating 200 patches...
Tested:1383 patches
Compile failed:1224 patches
Compilation rate:0.11496746203904555
NNPPPPPPPPPPPPPPPPPNPPPPPPPPPPPNPPPPPPPPPPNPPPPPPNPPPPPPNPPPPPPPPPNPNPPPPPNPPPNPNPNPPPPNPPPNNNNPNPNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPNPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPNPPPPPPPPPPPPPPPPPPNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/5.java
Current actions:
INSERT:
12:if(joinString.indexOf('\n')!=-1){
return ;
}
TO:
11

Following are 0th generated patches:
Validating 2 patches...
Current actions:
INSERT:
12:if(joinString.indexOf('\n')!=-1){
return ;
}
TO:
11

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:return ;
TO:
11

Following are 2th generated patches:
Validating 1 patches...
Tested:1586 patches
Compile failed:1422 patches
Compilation rate:0.1034047919293821
NPNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/6.java
Current actions:
Move
FROM:
Former Line 73:t.getCompiler().reportCodeChange();
TO:
Current Line 40:SwitchStatement

Following are 0th generated patches:
Validating 14 patches...
Current actions:
INSERT:
44:t.getCompiler().reportCodeChange();
TO:
43

DELETE:
Original line: 44break;

INSERT:
45:break;
TO:
43

INSERT:
57:t.getCompiler().reportCodeChange();
TO:
55

DELETE:
Original line: 73t.getCompiler().reportCodeChange();

INSERT:
73:t.getCompiler().reportCodeChange();
TO:
70

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 44break;

INSERT:
45:break;
TO:
43

INSERT:
57:t.getCompiler().reportCodeChange();
TO:
55

INSERT:
73:t.getCompiler().reportCodeChange();
TO:
70

Following are 2th generated patches:
Validating 200 patches...
Tested:1986 patches
Compile failed:1816 patches
Compilation rate:0.08559919436052367
PPPPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/7.java
Current actions:
DELETE:
Original line: 67arrayNode.detachChildren();

Following are 0th generated patches:
Validating 21 patches...
Current actions:
INSERT:
67:Node replacement=new Node(Token.ADD,Node.newString("["),arrayNode,Node.newString("].join("),Node.newString(joinString),Node.newString(")"));
TO:
66

DELETE:
Original line: 67arrayNode.detachChildren();

INSERT:
68:parent.replaceChild(n,replacement);
TO:
66

DELETE:
Original line: 68for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
67:Node replacement=new Node(Token.ADD,Node.newString("["),arrayNode,Node.newString("].join("),Node.newString(joinString),Node.newString(")"));
TO:
66

INSERT:
68:parent.replaceChild(n,replacement);
TO:
66

DELETE:
Original line: 68for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 2th generated patches:
Validating 200 patches...
Tested:2403 patches
Compile failed:2228 patches
Compilation rate:0.07282563462338744
NNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/8.java
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

Following are 0th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
24:if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}
TO:
20:if(foldedSize>0){
foldedSize+=joinString.length()+2;
arrayFoldedChildren.add(Node.newString(joinString));
foldedSize+=elem.getString().length();
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
34:if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}
TO:
32:if(foldedSize>0){
foldedSize+=joinString.length()+2;
arrayFoldedChildren.add(Node.newString(joinString));
}

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

DELETE:
Original line: 19sb.append(joinString);

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

INSERT:
25:else{
foldedSize+=elem.getString().length();
}
TO:
26

UPDATE
FROM:
35:foldedSize+=sb.length()+2;
TO:
33:foldedSize+=joinString.length()+2;

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

Following are 3th generated patches:
Validating 200 patches...
Current actions:
INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

DELETE:
Original line: 19sb.append(joinString);

UPDATE
FROM:
25:foldedSize+=sb.length()+2;
TO:
21:foldedSize+=joinString.length()+2;

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

UPDATE
FROM:
26:arrayFoldedChildren.add(Node.newString(sb.toString()));
TO:
22:arrayFoldedChildren.add(Node.newString(joinString));

INSERT:
26:foldedSize+=elem.getString().length();
TO:
26

DELETE:
Original line: 27sb=new StringBuilder();

UPDATE
FROM:
35:foldedSize+=sb.length()+2;
TO:
33:foldedSize+=joinString.length()+2;

UPDATE
FROM:
36:arrayFoldedChildren.add(Node.newString(sb.toString()));
TO:
34:arrayFoldedChildren.add(Node.newString(joinString));

Following are 4th generated patches:
Validating 200 patches...
Tested:2982 patches
Compile failed:2695 patches
Compilation rate:0.09624413145539906
NNPPPPPPPPPNPPPPPPPPPNNPNPNNNPPPPPPPPPPPPPPPPPPPNPNNNNNNNNNNNNPNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPPPPPPPPPPPPPNPPPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPNPNPPPPPNPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/9.java
Current actions:
INSERT:
18:if(elemString!=null&&elemString.length()>0){
if(joinString.length()>0){
foldedSize+=elemString.length()*joinString.length();
}
else{
foldedSize+=elemString.length();
}
foldedSize+=2;
}
TO:
17

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
19:if(joinString.length()>0){
foldedSize+=elemString.length()*joinString.length();
}
TO:
17

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
15:while(elem!=null){
if(NodeUtil.isImmutableValue(elem)){
String elemString=NodeUtil.getStringValue(elem);
if(elemString!=null&&elemString.length()>0){
if(joinString.length()>0){
foldedSize+=elemString.length()*joinString.length();
}
else{
foldedSize+=elemString.length();
}
foldedSize+=2;
}
}
else{
foldedSize+=InlineCostEstimator.getCost(elem);
}
arrayFoldedChildren.add(elem);
elem=elem.getNext();
}
TO:
15

DELETE:
Original line: 16while(elem!=null){
if(NodeUtil.isImmutableValue(elem)){
if(sb.length()>0){
sb.append(joinString);
}
sb.append(NodeUtil.getStringValue(elem));
}
else{
if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}

DELETE:
Original line: 35foldedSize+=sb.length()+2;

DELETE:
Original line: 36arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

Following are 3th generated patches:
Validating 200 patches...
Tested:3379 patches
Compile failed:3092 patches
Compilation rate:0.0849363717076058
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/10.java
Current actions:
INSERT:
14:if(NodeUtil.isImmutableValue(child)){
stringNodes.add(child);
}
TO:
12

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:if(stringNodes.isEmpty()){
Node emptyStringNode=Node.newString("");
parent.replaceChild(n,emptyStringNode);
t.getCompiler().reportCodeChange();
return ;
}
TO:
33

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
13:for(Node child : arrayNode.children()){
if(NodeUtil.isImmutableValue(child)){
stringNodes.add(child);
}
}
TO:
12

DELETE:
Original line: 14int foldedSize=0;

DELETE:
Original line: 15Node elem=arrayNode.getFirstChild();

DELETE:
Original line: 16while(elem!=null){
if(NodeUtil.isImmutableValue(elem)){
if(sb.length()>0){
sb.append(joinString);
}
sb.append(NodeUtil.getStringValue(elem));
}
else{
if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}
elem=elem.getNext();
}

INSERT:
20:parent.replaceChild(n,emptyStringNode);
TO:
42

INSERT:
22:return ;
TO:
42

INSERT:
25:for(int i=0;i<stringNodes.size();i++){
if(i>0){
sb.append(joinString);
}
sb.append(NodeUtil.getStringValue(stringNodes.get(i)));
}
TO:
42

INSERT:
33:parent.replaceChild(n,foldedStringNode);
TO:
42

INSERT:
35:}

TO:
42

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 40switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
parent.replaceChild(n,emptyStringNode);
break;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}
parent.replaceChild(n,foldedStringNode);
break;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
break;
}

Following are 4th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
12:List<Node> arrayFoldedChildren=Lists.newLinkedList();
TO:
12:List<Node> stringNodes=Lists.newLinkedList();

DELETE:
Original line: 14int foldedSize=0;

DELETE:
Original line: 15Node elem=arrayNode.getFirstChild();

INSERT:
21:t.getCompiler().reportCodeChange();
TO:
42

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

DELETE:
Original line: 23else{
if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}

INSERT:
25:for(int i=0;i<stringNodes.size();i++){
if(i>0){
sb.append(joinString);
}
sb.append(NodeUtil.getStringValue(stringNodes.get(i)));
}
TO:
42

DELETE:
Original line: 32elem=elem.getNext();

DELETE:
Original line: 35foldedSize+=sb.length()+2;

INSERT:
35:}

TO:
42

DELETE:
Original line: 45case 1 :

DELETE:
Original line: 46Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 51if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 58if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}

DELETE:
Original line: 61int kJoinOverhead="[].join()".length();

DELETE:
Original line: 64if(foldedSize>originalSize){
return ;
}

DELETE:
Original line: 67arrayNode.detachChildren();

DELETE:
Original line: 71break;

Tested:3970 patches
Compile failed:3678 patches
Compilation rate:0.07355163727959697

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/11.java
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
18:arrayFoldedChildren.add(Node.newString(elem.getString()));
TO:
17

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

INSERT:
18:arrayFoldedChildren.add(Node.newString(elem.getString()));
TO:
17

DELETE:
Original line: 19sb.append(joinString);

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

INSERT:
27:foldedSize+=(joinString.length()*(arrayFoldedChildren.size()-1));
TO:
38

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

INSERT:
59:arrayNode.addChildToBack(Node.newString(joinString));
TO:
70

Following are 2th generated patches:
Validating 200 patches...
Tested:4568 patches
Compile failed:4138 patches
Compilation rate:0.09413309982486866
NNPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPPNNPPPPPPPPPNPNPPPPPPPPNNPPNPPPPNPPNPNNNNPNNNNNNPNPPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPPPPPPPNPPPPPPPPPPPPPPPPPPPNPPPPPPPPPPPNPPPPPPPPPPPNPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/12.java
Current actions:
DELETE:
Original line: 67arrayNode.detachChildren();

Following are 0th generated patches:
Validating 21 patches...
Current actions:
DELETE:
Original line: 67arrayNode.detachChildren();

INSERT:
68:parent.replaceChild(n,replacement);
TO:
66

DELETE:
Original line: 68for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
67:Node replacement=new Node(Token.COMMA,arrayFoldedChildren);
TO:
66

DELETE:
Original line: 67arrayNode.detachChildren();

INSERT:
68:parent.replaceChild(n,replacement);
TO:
66

DELETE:
Original line: 68for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}

Following are 2th generated patches:
Validating 200 patches...
Tested:4985 patches
Compile failed:4485 patches
Compilation rate:0.10030090270812438
NNNNNNNNNNNNNNNPNPPPPNNNNNNNPNPPPPPNPNNNNPPNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNPPPPPPNNPPPPNNNNPPNNPNNPNPPNNPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNPPNPPNPNPPPPPPNNNNPPNNNNNNNPNPPPPNNNNNNPNNPNNNPNPNNNNNNNNPNNPPPPPPNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/13.java
Current actions:
DELETE:
Original line: 67arrayNode.detachChildren();

Following are 0th generated patches:
Validating 36 patches...
Current actions:
INSERT:
69:parent.replaceChild(arrayNode,joinedArrayNode);
TO:
66

DELETE:
Original line: 69arrayNode.addChildToBack(node);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
69:parent.replaceChild(arrayNode,joinedArrayNode);
TO:
66

Following are 2th generated patches:
Validating 200 patches...
Tested:5420 patches
Compile failed:4820 patches
Compilation rate:0.11070110701107011
NNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPPPNNNPPNNNNNNNNNPNPNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNPPPPNPNNPNNPNNNNNNNPNNNNPNNNPNNNNNNPNPNNNNPNNNNNNPPNNNNNNNPNPNPPNNPNNNNNNNNNNNNNNPPPPPPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPNNPPNPPPNNPNNNNNNNPNPPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPNPPNNNNNPNPNNNNNNPNNNNPNNNNNNNNPNNPPNNNNPNNNNNNNPPNNNNNNPPNNNPPPNNNNNNNNNNNNNNNNPPPPPNPNNPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/14.java
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 25foldedSize+=sb.length()+2;

DELETE:
Original line: 26arrayFoldedChildren.add(Node.newString(sb.toString()));

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

DELETE:
Original line: 19sb.append(joinString);

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

INSERT:
18:arrayFoldedChildren.add(elem);
TO:
17

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

DELETE:
Original line: 26arrayFoldedChildren.add(Node.newString(sb.toString()));

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

INSERT:
17:foldedSize+=elem.getString().length();
TO:
17

INSERT:
18:arrayFoldedChildren.add(elem);
TO:
17

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

DELETE:
Original line: 24if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

Following are 4th generated patches:
Validating 200 patches...
Tested:6015 patches
Compile failed:5282 patches
Compilation rate:0.12186201163757274
NNNNNNNNNNNNNNNNPPNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNPPPPPPPPPPNPPPPPPPPPPNPPPPPPPPPNPPPPPPPPPNPPPPPPPPPPPPNNNNPPPPPNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNPPNPNPPPNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/15.java
Tested:6015 patches
Compile failed:5282 patches
Compilation rate:0.12186201163757274

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/16.java
Current actions:
INSERT:
17:if(foldedStringNode==null){
foldedStringNode=Node.newString(NodeUtil.getStringValue(elem));
}
TO:
17

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
24:}

TO:
28

INSERT:
31:if(foldedStringNode!=null){
parent.replaceChild(n,foldedStringNode);
}
TO:
33

INSERT:
37:}

TO:
37

DELETE:
Original line: 55parent.replaceChild(n,foldedStringNode);

Following are 2th generated patches:
Validating 56 patches...
Current actions:
INSERT:
24:}

TO:
28

INSERT:
34:if(numFoldedChildren>1){
t.getCompiler().reportCodeChange();
}
TO:
33

INSERT:
37:}

TO:
37

DELETE:
Original line: 73t.getCompiler().reportCodeChange();

Following are 3th generated patches:
Validating 120 patches...
Current actions:
DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

INSERT:
24:}

TO:
28

INSERT:
37:}

TO:
37

DELETE:
Original line: 44break;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 12List<Node> arrayFoldedChildren=Lists.newLinkedList();

INSERT:
12:Node foldedStringNode=null;
TO:
11

DELETE:
Original line: 13StringBuilder sb=new StringBuilder();

UPDATE
FROM:
14:int foldedSize=0;
TO:
14:int numFoldedChildren=0;

INSERT:
17:if(foldedStringNode==null){
foldedStringNode=Node.newString(NodeUtil.getStringValue(elem));
}
TO:
17

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

INSERT:
21:foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(joinString));
TO:
23

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

INSERT:
22:foldedStringNode=new Node(Token.ADD,foldedStringNode,Node.newString(NodeUtil.getStringValue(elem)));
TO:
23

INSERT:
24:}

TO:
28

DELETE:
Original line: 25foldedSize+=sb.length()+2;

INSERT:
25:else{
numFoldedChildren++;
foldedStringNode=null;
}
TO:
28

DELETE:
Original line: 27sb=new StringBuilder();

DELETE:
Original line: 29foldedSize+=InlineCostEstimator.getCost(elem);

DELETE:
Original line: 30arrayFoldedChildren.add(elem);

INSERT:
31:if(foldedStringNode!=null){
parent.replaceChild(n,foldedStringNode);
}
TO:
33

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

INSERT:
34:if(numFoldedChildren>1){
t.getCompiler().reportCodeChange();
}
TO:
33

INSERT:
37:}

TO:
37

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 39int originalSize=InlineCostEstimator.getCost(n);

DELETE:
Original line: 40switch (arrayFoldedChildren.size()){
case 0 :
Node emptyStringNode=Node.newString("");
parent.replaceChild(n,emptyStringNode);
break;
case 1 :
Node foldedStringNode=arrayFoldedChildren.remove(0);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}
parent.replaceChild(n,foldedStringNode);
break;
default :
if(arrayFoldedChildren.size()==arrayNode.getChildCount()){
return ;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if(foldedSize>originalSize){
return ;
}
arrayNode.detachChildren();
for(Node node : arrayFoldedChildren){
arrayNode.addChildToBack(node);
}
break;
}

DELETE:
Original line: 73t.getCompiler().reportCodeChange();

Tested:6392 patches
Compile failed:5659 patches
Compilation rate:0.11467459324155194
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/17.java
Tested:6392 patches
Compile failed:5659 patches
Compilation rate:0.11467459324155194

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/18.java
Tested:6392 patches
Compile failed:5659 patches
Compilation rate:0.11467459324155194

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/19.java
Tested:6392 patches
Compile failed:5659 patches
Compilation rate:0.11467459324155194

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/20.java
Current actions:
DELETE:
Original line: 67arrayNode.detachChildren();

Following are 0th generated patches:
Validating 129 patches...
Current actions:
INSERT:
67:Node array=Node.newString("[");
TO:
66

DELETE:
Original line: 67arrayNode.detachChildren();

INSERT:
68:Node string=Node.newString("");
TO:
66

INSERT:
70:array.addChildToBack(string);
TO:
68

UPDATE
FROM:
69:arrayNode.addChildToBack(node);
TO:
71:array.addChildToBack(node);

INSERT:
72:string=Node.newString(joinString);
TO:
69

INSERT:
74:array.addChildToBack(string);
TO:
70

INSERT:
75:array.addChildToBack(Node.newString("]"));
TO:
70

INSERT:
76:parent.replaceChild(n,array);
TO:
70

Following are 1th generated patches:
Validating 200 patches...
Tested:6719 patches
Compile failed:5961 patches
Compilation rate:0.11281440690578955
NNNNNNNNNNNNNNPPNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNPPNNPNPPNNPNNNNNNNNNNNNNNNNNNNNNNPPNNNNPPNNNPNNNNNNNNNNNNNNNPNNPPPPPNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/closure_105/21.java
Current actions:
INSERT:
13:if(foldedNode==null){
return ;
}
TO:
11

INSERT:
23:}

TO:
39

DELETE:
Original line: 48return ;

Following are 1th generated patches:
Validating 56 patches...
Current actions:
DELETE:
Original line: 12List<Node> arrayFoldedChildren=Lists.newLinkedList();

INSERT:
12:Node foldedNode=foldStringJoin(arrayNode,joinString);
TO:
11

INSERT:
13:if(foldedNode==null){
return ;
}
TO:
11

INSERT:
17:int foldedSize=InlineCostEstimator.getCost(foldedNode);
TO:
39

DELETE:
Original line: 18if(sb.length()>0){
sb.append(joinString);
}

INSERT:
18:if(foldedSize>originalSize){
return ;
}
TO:
39

INSERT:
21:parent.replaceChild(n,foldedNode);
TO:
39

DELETE:
Original line: 21sb.append(NodeUtil.getStringValue(elem));

DELETE:
Original line: 23else{
if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
sb=new StringBuilder();
}
foldedSize+=InlineCostEstimator.getCost(elem);
arrayFoldedChildren.add(elem);
}

INSERT:
23:}

TO:
39

DELETE:
Original line: 34if(sb.length()>0){
foldedSize+=sb.length()+2;
arrayFoldedChildren.add(Node.newString(sb.toString()));
}

DELETE:
Original line: 38foldedSize+=arrayFoldedChildren.size()-1;

DELETE:
Original line: 45case 1 :

DELETE:
Original line: 46Node foldedStringNode=arrayFoldedChildren.remove(0);

DELETE:
Original line: 47if(foldedSize>originalSize){
return ;
}

DELETE:
Original line: 50arrayNode.detachChildren();

DELETE:
Original line: 51if(foldedStringNode.getType()!=Token.STRING){
Node replacement=new Node(Token.ADD,Node.newString(""),foldedStringNode);
foldedStringNode=replacement;
}

DELETE:
Original line: 55parent.replaceChild(n,foldedStringNode);

DELETE:
Original line: 62foldedSize+=kJoinOverhead;

DELETE:
Original line: 63foldedSize+=InlineCostEstimator.getCost(right);

DELETE:
Original line: 64if(foldedSize>originalSize){
return ;
}

DELETE:
Original line: 67arrayNode.detachChildren();

Following are 2th generated patches:
Validating 200 patches...
Tested:6969 patches
Compile failed:6211 patches
Compilation rate:0.10876739847897833
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : closure-105 > patch : 0 | Start : Thu Apr 11 17:51:32 HKT 2024 | End : 2024.04.11 AD at 18:04:02 HKT
