Repair : math_39
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/0.java
Tested:0 patches
Compile failed:0 patches
Compilation rate:NaN

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/1.java
Current actions:
DELETE:
Original line: 81 final double filteredNextT=stepStart+hNew;

Following are 0th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 82 final boolean filteredNextIsLast=forward?(filteredNextT>=t):(filteredNextT<=t);

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 81 final double filteredNextT=stepStart+hNew;

DELETE:
Original line: 82 final boolean filteredNextIsLast=forward?(filteredNextT>=t):(filteredNextT<=t);

DELETE:
Original line: 83if(filteredNextIsLast){
hNew=t-stepStart;
}

Following are 2th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 81 final double filteredNextT=stepStart+hNew;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 84hNew=t-stepStart;

Following are 4th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 81 final double filteredNextT=stepStart+hNew;

DELETE:
Original line: 83if(filteredNextIsLast){
hNew=t-stepStart;
}

Tested:15 patches
Compile failed:9 patches
Compilation rate:0.4
NNNNNNNPPPPNPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/2.java
Current actions:
Wrap:
IfStatement
On:
[for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}, hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);, firstTime=false;, if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}, {
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
},  final double[] scale=new double[mainSetDimension];]
Following are 0th generated patches:
Validating 15 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 1th generated patches:
Validating 54 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 2th generated patches:
Validating 55 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 2th generated patches:
Validating 55 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 4th generated patches:
Validating 56 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 4th generated patches:
Validating 56 patches...
Current actions:
INSERT:
27:if(firstTime){
 final double[] scale=new double[mainSetDimension];
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
TO:
26

DELETE:
Original line: 27if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}

Following are 4th generated patches:
Validating 56 patches...
Current actions:
DELETE:
Original line: 34else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}

Tested:347 patches
Compile failed:300 patches
Compilation rate:0.13544668587896252
NNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNPPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/3.java
Current actions:
DELETE:
Original line: 8 final int stages=c.length+1;

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
8: final double[] yDotK=y0.clone();
TO:
7

DELETE:
Original line: 8 final int stages=c.length+1;

DELETE:
Original line: 9 final double[][] yDotK=new double[stages][y.length];

INSERT:
10: final double[] yDotTmp=y0.clone();
TO:
10

DELETE:
Original line: 11 final double[] yDotTmp=new double[y.length];

UPDATE
FROM:
25:computeDerivatives(stepStart,y,yDotK[0]);
TO:
24:computeDerivatives(stepStart,y,yDotK);

UPDATE
FROM:
39:hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
TO:
38:hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK,yTmp,yDotK);

UPDATE
FROM:
43:for(int k=1;k<stages;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[0][j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
}
TO:
42:for(int k=1;k<c.length+1;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK);
}

UPDATE
FROM:
45:double sum=a[k-1][0]*yDotK[0][j];
TO:
44:double sum=a[k-1][0]*yDotK[j];

UPDATE
FROM:
51:computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
TO:
50:computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK);

UPDATE
FROM:
54:double sum=b[0]*yDotK[0][j];
TO:
53:double sum=b[0]*yDotK[j];

UPDATE
FROM:
55:for(int l=1;l<stages;++l){
sum+=b[l]*yDotK[l][j];
}
TO:
54:for(int l=1;l<c.length+1;++l){
sum+=b[l]*yDotK[l][j];
}

UPDATE
FROM:
68:System.arraycopy(yDotK[stages-1],0,yDotTmp,0,y0.length);
TO:
67:System.arraycopy(yDotK,0,yDotTmp,0,y0.length);

UPDATE
FROM:
74:System.arraycopy(yDotTmp,0,yDotK[0],0,y0.length);
TO:
73:System.arraycopy(yDotTmp,0,yDotK,0,y0.length);

Following are 1th generated patches:
Validating 200 patches...
Tested:741 patches
Compile failed:683 patches
Compilation rate:0.07827260458839407
NNNNNNNNNNNNNNNNNNNNNNNNNNPPNNPNNNNNNPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/4.java
Current actions:
INSERT:
42:if(k==0){
for(int j=0;j<m;++j){
y[j]+=stepSize*a[k][j];
}
}
TO:
42

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
55:if(k>0){
for(int j=0;j<m;++j){
y[j]+=stepSize*(a[k][j]+b[k][j]);
}
}
TO:
50

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
8: final int stages=c.length+1;
TO:
8: final int n=c.length;

DELETE:
Original line: 9 final double[][] yDotK=new double[stages][y.length];

DELETE:
Original line: 10 final double[] yTmp=y0.clone();

INSERT:
10: final double h=t-equations.getTime();
TO:
8

DELETE:
Original line: 11 final double[] yDotTmp=new double[y.length];

INSERT:
11: final int np1=n+1;
TO:
8

INSERT:
12: final int nm1=n-1;
TO:
8

UPDATE
FROM:
13:interpolator.reinitialize(this,yTmp,yDotK,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());
TO:
14:interpolator.reinitialize(this,y,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());

DELETE:
Original line: 24if(firstTime||!fsal){
computeDerivatives(stepStart,y,yDotK[0]);
}

UPDATE
FROM:
28: final double[] scale=new double[mainSetDimension];
TO:
26: final double[] scale=new double[m];

UPDATE
FROM:
39:hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
TO:
37:hNew=initializeStep(forward,getOrder(),scale,stepStart,y,null,y,null);

INSERT:
41:for(int k=0;k<n;++k){
if(k==0){
for(int j=0;j<m;++j){
y[j]+=stepSize*a[k][j];
}
}
else{
for(int j=0;j<m;++j){
y[j]=y[j]+stepSize*(a[k][j]+(k<nm1?b[k][j]:0)+(k>0?b[k][j]:0));
}
}
 final double tK=stepStart+c[k]*stepSize;
 final double[] yTmp=k<n-1?y.clone():y0.clone();
computeDerivatives(tK,yTmp,null);
if(k>0){
for(int j=0;j<m;++j){
y[j]+=stepSize*(a[k][j]+b[k][j]);
}
}
 final double[] yDot=k<n-1?yTmp:y0;
error=estimateError(yDot,y,null,stepSize);
if(error>=1.0){
 final double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety*FastMath.pow(error,exp)));
hNew=filterStep(stepSize*factor,forward,false);
}
}
TO:
42

DELETE:
Original line: 43for(int k=1;k<stages;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[0][j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
}

DELETE:
Original line: 55for(int l=1;l<stages;++l){
sum+=b[l]*yDotK[l][j];
}

DELETE:
Original line: 58yTmp[j]=y[j]+stepSize*sum;

DELETE:
Original line: 60error=estimateError(yDotK,y,yTmp,stepSize);

DELETE:
Original line: 61if(error>=1.0){
 final double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety*FastMath.pow(error,exp)));
hNew=filterStep(stepSize*factor,forward,false);
}

DELETE:
Original line: 66interpolator.storeTime(stepStart+stepSize);

DELETE:
Original line: 67System.arraycopy(yTmp,0,y,0,y0.length);

INSERT:
67:interpolator.storeTime(stepStart+stepSize);
TO:
64

INSERT:
68:stepStart=acceptStep(interpolator,y,null,t);
TO:
64

DELETE:
Original line: 68System.arraycopy(yDotK[stages-1],0,yDotTmp,0,y0.length);

DELETE:
Original line: 69stepStart=acceptStep(interpolator,y,yDotTmp,t);

DELETE:
Original line: 70System.arraycopy(y,0,yTmp,0,y.length);

DELETE:
Original line: 73if(fsal){
System.arraycopy(yDotTmp,0,yDotK[0],0,y0.length);
}

UPDATE
FROM:
80:hNew=filterStep(scaledH,forward,nextIsLast);
TO:
73:hNew=filterStep(stepSize*factor,forward,false);

DELETE:
Original line: 77 final double scaledH=stepSize*factor;

DELETE:
Original line: 78 final double nextT=stepStart+scaledH;

DELETE:
Original line: 79 final boolean nextIsLast=forward?(nextT>=t):(nextT<=t);

DELETE:
Original line: 81 final double filteredNextT=stepStart+hNew;

DELETE:
Original line: 83if(filteredNextIsLast){
hNew=t-stepStart;
}

Following are 3th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
8: final int stages=c.length+1;
TO:
8: final int n=c.length;

INSERT:
41:for(int k=0;k<n;++k){
if(k==0){
for(int j=0;j<m;++j){
y[j]+=stepSize*a[k][j];
}
}
else{
for(int j=0;j<m;++j){
y[j]=y[j]+stepSize*(a[k][j]+(k<nm1?b[k][j]:0)+(k>0?b[k][j]:0));
}
}
 final double tK=stepStart+c[k]*stepSize;
 final double[] yTmp=k<n-1?y.clone():y0.clone();
computeDerivatives(tK,yTmp,null);
if(k>0){
for(int j=0;j<m;++j){
y[j]+=stepSize*(a[k][j]+b[k][j]);
}
}
 final double[] yDot=k<n-1?yTmp:y0;
error=estimateError(yDot,y,null,stepSize);
if(error>=1.0){
 final double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety*FastMath.pow(error,exp)));
hNew=filterStep(stepSize*factor,forward,false);
}
}
TO:
42

DELETE:
Original line: 43for(int k=1;k<stages;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[0][j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
}

DELETE:
Original line: 69stepStart=acceptStep(interpolator,y,yDotTmp,t);

UPDATE
FROM:
80:hNew=filterStep(scaledH,forward,nextIsLast);
TO:
73:hNew=filterStep(stepSize*factor,forward,false);

DELETE:
Original line: 79 final boolean nextIsLast=forward?(nextT>=t):(nextT<=t);

DELETE:
Original line: 84hNew=t-stepStart;

Following are 4th generated patches:
Validating 33 patches...
Tested:968 patches
Compile failed:910 patches
Compilation rate:0.05991735537190083
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/5.java
Tested:968 patches
Compile failed:910 patches
Compilation rate:0.05991735537190083

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/6.java
Current actions:
UPDATE
FROM:
9: final double[][] yDotK=new double[stages][y.length];
TO:
9: final double[] yDotK=new double[stages];

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
9: final double[][] yDotK=new double[stages][y.length];
TO:
9: final double[] yDotK=new double[stages];

Following are 0th generated patches:
Validating 1 patches...
Tested:970 patches
Compile failed:912 patches
Compilation rate:0.05979381443298969
NN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_39/7.java
Current actions:
INSERT:
20:if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,null,y,null);
firstTime=false;
}
TO:
21

Following are 1th generated patches:
Validating 58 patches...
Current actions:
DELETE:
Original line: 9 final double[][] yDotK=new double[stages][y.length];

INSERT:
9: final int m=y0.length;
TO:
8

DELETE:
Original line: 10 final double[] yTmp=y0.clone();

DELETE:
Original line: 11 final double[] yDotTmp=new double[y.length];

UPDATE
FROM:
13:interpolator.reinitialize(this,yTmp,yDotK,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());
TO:
11:interpolator.reinitialize(this,y,null,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());

INSERT:
20:if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,null,y,null);
firstTime=false;
}
TO:
21

DELETE:
Original line: 22double error=10;

DELETE:
Original line: 23while(error>=1.0){
if(firstTime||!fsal){
computeDerivatives(stepStart,y,yDotK[0]);
}
if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
stepSize=hNew;
for(int k=1;k<stages;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[0][j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
}
for(int j=0;j<y0.length;++j){
double sum=b[0]*yDotK[0][j];
for(int l=1;l<stages;++l){
sum+=b[l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
error=estimateError(yDotK,y,yTmp,stepSize);
if(error>=1.0){
 final double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety*FastMath.pow(error,exp)));
hNew=filterStep(stepSize*factor,forward,false);
}
}

INSERT:
35:stepSize=hNew;
TO:
59

INSERT:
36:computeDerivatives(stepStart,y,null);
TO:
59

INSERT:
37:for(int j=0;j<m;++j){
double sum=y[j];
for(int k=0;k<n;++k){
 final double yDot=y[j]+stepSize*(a[k][0]*y[j]+b[k]*yDot[k]);
sum+=stepSize*a[k][k+1]*yDot[k];
}
y[j]=y[j]+stepSize*b[n]*sum;
}
TO:
59

INSERT:
45:estimateError(null,y,y,stepSize);
TO:
65

UPDATE
FROM:
69:stepStart=acceptStep(interpolator,y,yDotTmp,t);
TO:
47:stepStart=acceptStep(interpolator,y,null,t);

DELETE:
Original line: 67System.arraycopy(yTmp,0,y,0,y0.length);

DELETE:
Original line: 68System.arraycopy(yDotK[stages-1],0,yDotTmp,0,y0.length);

DELETE:
Original line: 70System.arraycopy(y,0,yTmp,0,y.length);

DELETE:
Original line: 73if(fsal){
System.arraycopy(yDotTmp,0,yDotK[0],0,y0.length);
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
8: final int stages=c.length+1;
TO:
8: final int n=c.length;

INSERT:
9: final int m=y0.length;
TO:
8

DELETE:
Original line: 11 final double[] yDotTmp=new double[y.length];

UPDATE
FROM:
13:interpolator.reinitialize(this,yTmp,yDotK,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());
TO:
11:interpolator.reinitialize(this,y,null,forward,equations.getPrimaryMapper(),equations.getSecondaryMappers());

DELETE:
Original line: 22double error=10;

DELETE:
Original line: 23while(error>=1.0){
if(firstTime||!fsal){
computeDerivatives(stepStart,y,yDotK[0]);
}
if(firstTime){
 final double[] scale=new double[mainSetDimension];
if(vecAbsoluteTolerance==null){
for(int i=0;i<scale.length;++i){
scale[i]=scalAbsoluteTolerance+scalRelativeTolerance*FastMath.abs(y[i]);
}
}
else{
for(int i=0;i<scale.length;++i){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*FastMath.abs(y[i]);
}
}
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
firstTime=false;
}
stepSize=hNew;
for(int k=1;k<stages;++k){
for(int j=0;j<y0.length;++j){
double sum=a[k-1][0]*yDotK[0][j];
for(int l=1;l<k;++l){
sum+=a[k-1][l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
computeDerivatives(stepStart+c[k-1]*stepSize,yTmp,yDotK[k]);
}
for(int j=0;j<y0.length;++j){
double sum=b[0]*yDotK[0][j];
for(int l=1;l<stages;++l){
sum+=b[l]*yDotK[l][j];
}
yTmp[j]=y[j]+stepSize*sum;
}
error=estimateError(yDotK,y,yTmp,stepSize);
if(error>=1.0){
 final double factor=FastMath.min(maxGrowth,FastMath.max(minReduction,safety*FastMath.pow(error,exp)));
hNew=filterStep(stepSize*factor,forward,false);
}
}

INSERT:
32:hNew=initializeStep(forward,getOrder(),scale,stepStart,y,null,y,null);
TO:
59

INSERT:
33:firstTime=false;
TO:
59

INSERT:
36:computeDerivatives(stepStart,y,null);
TO:
59

INSERT:
41:sum+=stepSize*a[k][k+1]*yDot[k];
TO:
59

INSERT:
45:estimateError(null,y,y,stepSize);
TO:
65

DELETE:
Original line: 67System.arraycopy(yTmp,0,y,0,y0.length);

DELETE:
Original line: 73if(fsal){
System.arraycopy(yDotTmp,0,yDotK[0],0,y0.length);
}

Following are 3th generated patches:
Validating 200 patches...
Tested:1421 patches
Compile failed:1357 patches
Compilation rate:0.045038705137227304
NNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPNNNNNNNNNNNNNNPNNNPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Finish : math-39 > patch : 0 | Start : Wed Apr 10 06:10:13 HKT 2024 | End : 2024.04.10 AD at 06:13:48 HKT
