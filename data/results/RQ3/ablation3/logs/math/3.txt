Repair : math_3
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/0.java
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 24 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 3th generated patches:
Validating 7 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 20 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:4 patches
Compile failed:2 patches
Compilation rate:0.5
PNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/1.java
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
20:prodLowSum+=a[i]*b[i+1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);
TO:
31

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
21:sLowSum+=a[i+1]*b[i]-(prodHighCur-sPrime)-(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
9:double prodHighNext=prodHigh[1]=a[1]*b[1];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
12:double prodLowSum=a[0]*b[1]-(prodHighNext-sPrime)-(prodHighCur-sPrime);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
13:double sLowSum=a[1]*b[0]-(prodHighCur-sPrime)-(sHighPrev-sPrime);
TO:
26

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
16:prodHighCur=prodHighNext;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
18:sHighPrev=sHighCur+prodHighNext;
TO:
29

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
21:sLowSum+=a[i+1]*b[i]-(prodHighCur-sPrime)-(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 200 patches...
Tested:391 patches
Compile failed:389 patches
Compilation rate:0.005115089514066497
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/2.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 83 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
22:double result=prodHigh[0]+(prodHigh[1]+(prodHigh[2]+prodLowSum));
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 82 patches...
Current actions:
DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:747 patches
Compile failed:723 patches
Compilation rate:0.0321285140562249
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPNPNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNPNNNPNNPNPNNNNPNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/3.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 10 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 15 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return prod;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 77 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
11:prod+=ai*bi;
TO:
14

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 49 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:844 patches
Compile failed:807 patches
Compilation rate:0.04383886255924171
NNNNNNNNNNNNNNNNNPPPPNNNNNNNNNPNPNNNPNNNNNNNNNNNNNPNNPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/4.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 129 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighCur-prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
27: final double sHighCur=sHighPrev+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighCur-prodHigh[i+1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

Following are 3th generated patches:
Validating 78 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22:double sHighPrev=prodHigh[0]+prodHigh[1];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

Following are 4th generated patches:
Validating 48 patches...
Tested:1482 patches
Compile failed:1344 patches
Compilation rate:0.0931174089068826
NNNNNNNNNNNNPPPPPPPPPNPPPPPPPPNNPNPNNPNNNPNNNNPPPPPPPPPPPPPPPPNNPPNPNPNNNNNPNNNNNPPPNNNNNNNNPNNNNNNNNNNNPPPPPPPPPPNPNNNPNNNPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNPNPNNNNNPNNNNNNNNNNNNNPNPNNNNPNNPNNNNNPNNNPNPNNPNNPPNNPNNNNNNNNNNNNNNNNPPNNNNNNPNNNNNNPNNPNNPNNNNNNNNNNNPNNNPNNNNNPNNNNNNNNNNNNNNNNNPNNNNNPPNPNNPPPNPNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/5.java
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 0th generated patches:
Validating 43 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
35:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 76 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 3 patches...
Current actions:
DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:1601 patches
Compile failed:1432 patches
Compilation rate:0.10555902560899438
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNPPPNNNPNNPNNNNPNNPNPPPNNPNNNNNPNNNPNPPNPPNPPPNPPPPPNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/6.java
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:prod+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 86 patches...
Current actions:
INSERT:
9:prod+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 101 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 9 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 36 patches...
Current actions:
DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:1775 patches
Compile failed:1606 patches
Compilation rate:0.09521126760563381
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/7.java
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 30 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 28 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:1827 patches
Compile failed:1657 patches
Compilation rate:0.09304871373836891
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/8.java
Tested:1827 patches
Compile failed:1657 patches
Compilation rate:0.09304871373836891

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/9.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHigh=0;
TO:
6

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 121 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
13:return prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 90 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
TO:
18

INSERT:
13:return prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 105 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 9 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len;++i){
prodHigh+=a[i]*b[i];
prodLowSum+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
13:return prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:2111 patches
Compile failed:1941 patches
Compilation rate:0.08053055423969682
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/10.java
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 0th generated patches:
Validating 3 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 1th generated patches:
Validating 72 patches...
Current actions:
INSERT:
8:double prodHighSum=0;
TO:
7

Following are 2th generated patches:
Validating 1 patches...
Current actions:
INSERT:
20:prodHighSum+=prodHigh[i];
TO:
18

Following are 3th generated patches:
Validating 71 patches...
Tested:2257 patches
Compile failed:2079 patches
Compilation rate:0.07886575099689853
NPPNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/11.java
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 8 patches...
Current actions:
UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 2th generated patches:
Validating 20 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 96 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 4th generated patches:
Validating 13 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:2351 patches
Compile failed:2173 patches
Compilation rate:0.07571246278179498
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/12.java
Current actions:
UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 2th generated patches:
Validating 19 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 25 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 29 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

UPDATE
FROM:
4:if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}
TO:
3:if(a.length!=b.length){
throw new DimensionMismatchException(a.length,b.length);
}

UPDATE
FROM:
5:throw new DimensionMismatchException(len,b.length);
TO:
4:throw new DimensionMismatchException(a.length,b.length);

INSERT:
6:double result=0;
TO:
6

INSERT:
7:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:2401 patches
Compile failed:2222 patches
Compilation rate:0.07455226988754686
PNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/13.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

Following are 1th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 3th generated patches:
Validating 3 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

INSERT:
24:result+=prodHigh[i]+prodLowSum;
TO:
21

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 66 patches...
Current actions:
INSERT:
22:double result=0;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
23:for(int i=0;i<len;i++){
result+=prodHigh[i]+prodLowSum;
}
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:2662 patches
Compile failed:2444 patches
Compilation rate:0.08189331329827197
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNPNNNNNNNPNNNNNPPNPPPPPPPNNPNNNNNPNNPPPPNPPPPPPPNPPNPPNNPNPPPNPNPNNNNNNNNNNNNNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/14.java
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22:double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 1 patches...
Tested:2664 patches
Compile failed:2444 patches
Compilation rate:0.08258258258258258
PP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/15.java
Current actions:
DELETE:
Original line: 23double prodHighNext=prodHigh[1];

Following are 1th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 6 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
10: final double ai2=ai*ai;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12:prod+=ai2*bi;
TO:
14

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 100 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 7 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:2748 patches
Compile failed:2528 patches
Compilation rate:0.08005822416302766
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/16.java
Current actions:
UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

Following are 1th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:double minA=a[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double minB=b[0];
TO:
6

INSERT:
9:double maxA=a[0];
TO:
6

DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
14:minA=ai<minA?ai:minA;
TO:
14

INSERT:
15:minB=bi<minB?bi:minB;
TO:
14

INSERT:
16:maxA=ai>maxA?ai:maxA;
TO:
14

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
19: final double min=minA<minB?minA:minB;
TO:
21

INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

INSERT:
28: final double invMin=1/min;
TO:
40

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
29:double result=0;
TO:
40

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 37result=0;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double minA=a[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double minB=b[0];
TO:
6

INSERT:
9:double maxA=a[0];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double maxB=b[0];
TO:
6

INSERT:
11:for(int i=1;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
minA=ai<minA?ai:minA;
minB=bi<minB?bi:minB;
maxA=ai>maxA?ai:maxA;
maxB=bi>maxB?bi:maxB;
}
TO:
6

INSERT:
19: final double min=minA<minB?minA:minB;
TO:
21

INSERT:
20: final double max=maxA>maxB?maxA:maxB;
TO:
21

UPDATE
FROM:
36:if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}
TO:
21:if(min<MIN_VALUE){
double result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
return result;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=0;
TO:
36

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

INSERT:
26:return result;
TO:
40

DELETE:
Original line: 27 final int lenMinusOne=len-1;

INSERT:
28: final double invMin=1/min;
TO:
40

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
29:double result=0;
TO:
40

INSERT:
30:for(int i=0;i<len;++i){
 final double ai=a[i]*invMin;
 final double bi=b[i]*invMin;
result+=ai*bi;
}
TO:
40

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
31: final double ai=a[i]*invMin;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
32: final double bi=b[i]*invMin;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

UPDATE
FROM:
42:return result;
TO:
35:return result*max;

DELETE:
Original line: 37result=0;

Following are 3th generated patches:
Validating 200 patches...
Tested:3117 patches
Compile failed:2897 patches
Compilation rate:0.07058068655758742
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/17.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 19 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 6 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 12 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 13 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:3121 patches
Compile failed:2901 patches
Compilation rate:0.07049022749118872
NNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/18.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 1th generated patches:
Validating 42 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
result+=SPLIT_FACTOR*a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 89 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return result/SPLIT_FACTOR;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

Following are 3th generated patches:
Validating 38 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
9:result+=SPLIT_FACTOR*a[i]*b[i];
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 95 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:3351 patches
Compile failed:3118 patches
Compilation rate:0.06953148313936139
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNPNNNNNNNNPPPNNNPNNNNPNNNNNPNNNNNNNNNNNNPNPNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/19.java
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 80 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 70 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 71 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
sum+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 75 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 37result=0;

Tested:3591 patches
Compile failed:3351 patches
Compilation rate:0.06683375104427736
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/20.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 11 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 22 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
22:double result=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 61 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

INSERT:
22:double result=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:3859 patches
Compile failed:3607 patches
Compilation rate:0.06530189168178284
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNNNNNNNNNNNPPNNPNPPPNNNNNNNNPPPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/21.java
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 5 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 78 patches...
Current actions:
INSERT:
11:sum+=ai*bi;
TO:
14

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 70 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 75 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:sum+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
42:return result;
TO:
13:return sum;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:4028 patches
Compile failed:3763 patches
Compilation rate:0.06578947368421052
NNNNNNNNNNNNNNNNNNPPPPNNNNNNNNNPPNNNNPPNNNNNNNPNNNNNNPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/22.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 84 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 138 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

INSERT:
11:return FastMath.linearCombination(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 139 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 10 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:4334 patches
Compile failed:4069 patches
Compilation rate:0.06114443931702815
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/23.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Following are 1th generated patches:
Validating 46 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 2th generated patches:
Validating 22 patches...
Current actions:
DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh=ai*bi;

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
22: final double sHigh=prodHigh+prodLowSum;

INSERT:
23:double result=sHigh;
TO:
22

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 4th generated patches:
Validating 66 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:4651 patches
Compile failed:4374 patches
Compilation rate:0.05955708449795743
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNPPNPNNPPPNNNNNNNNPPPNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/24.java
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

INSERT:
13:sum+=prod+prodLow;
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 147 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 69 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 94 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

INSERT:
13:sum+=prod+prodLow;
TO:
12

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 114 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return sum;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:5027 patches
Compile failed:4750 patches
Compilation rate:0.05510244678734832
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/25.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
17:prodLowSum+=a[i]*b[i]-prodHighNext;
TO:
29

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 171 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHighNext=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
10:double sHighPrev=0;
TO:
8

INSERT:
12:double sLowSum=0;
TO:
8

INSERT:
14:for(int i=0;i<len;++i){
prodHighNext=prodHigh+a[i]*b[i];
prodHigh=prodHighNext;
prodLowSum+=a[i]*b[i]-prodHighNext;
sHighPrev=sHighPrev+prodHigh;
sPrime=sHighPrev-prodHighNext;
sLowSum+=prodHighNext-(sHighPrev-sPrime);
}
TO:
27

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
15:prodHighNext=prodHigh+a[i]*b[i];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
19:sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
20:sLowSum+=prodHighNext-(sHighPrev-sPrime);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 200 patches...
Tested:5764 patches
Compile failed:5487 patches
Compilation rate:0.04805690492713394

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/26.java
Current actions:
INSERT:
27:if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
TO:
29

Following are 1th generated patches:
Validating 65 patches...
Current actions:
INSERT:
7:double a1=a[0];
TO:
6

INSERT:
10:double bSum=a1*b1;
TO:
6

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
24:bSum+=b[i];
TO:
19

INSERT:
27:if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
TO:
29

INSERT:
34:return prodHigh+(prodLow+(aSum+bSum)*SPLIT_FACTOR);
TO:
41

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double a1=a[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:double b1=b[0];
TO:
6

INSERT:
9:double aSum=a1*b1;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
8:double prodLowSum=0;
TO:
11:double prodLow=a1*b1;

INSERT:
12:double prodHigh=a1*b1;
TO:
8

INSERT:
13:for(int i=1;i<len;++i){
 final double aSplit=a[i]*SPLIT_FACTOR;
 final double aHigh=aSplit-(aSplit-a[i]);
 final double aLow=a[i]-aHigh;
 final double bSplit=b[i]*SPLIT_FACTOR;
 final double bHigh=bSplit-(bSplit-b[i]);
 final double bLow=b[i]-bHigh;
 final double prod=a[i]*b[i];
 final double prodHighNew=prod-(prod-aHigh*bHigh);
 final double prodLowNew=aLow*bLow-(((prodHighNew-(prodHigh-prodHighNew))-aLow*bHigh)-aHigh*bLow);
aSum+=a[i];
bSum+=b[i];
prodLow+=prodLowNew;
prodHigh+=prodHighNew;
if(prodHighNew!=prodHigh){
aSum-=aHigh;
bSum-=bHigh;
prodLow-=aLow*bHigh;
prodHigh=prodHighNew;
}
}
TO:
8

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
14: final double aSplit=a[i]*SPLIT_FACTOR;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
15: final double aHigh=aSplit-(aSplit-a[i]);

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
16: final double aLow=a[i]-aHigh;

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
17: final double bSplit=b[i]*SPLIT_FACTOR;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
19: final double bLow=b[i]-bHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
20: final double prod=a[i]*b[i];

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
22: final double prodLowNew=aLow*bLow-(((prodHighNew-(prodHigh-prodHighNew))-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
20:prodLowSum+=prodLow;
TO:
25:prodLow+=prodLowNew;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
26:prodHigh+=prodHighNew;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
34:return prodHigh+(prodLow+(aSum+bSum)*SPLIT_FACTOR);
TO:
41

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 200 patches...
Tested:6210 patches
Compile failed:5933 patches
Compilation rate:0.04460547504025765
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/27.java
Current actions:
UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
15: final double sPrime=sHighCur-sHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

Following are 1th generated patches:
Validating 48 patches...
Current actions:
INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

Following are 2th generated patches:
Validating 47 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

INSERT:
14: final double sHighNext=a[len-1]*b[len-1];
TO:
21

INSERT:
16: final double sLowSum=prodLowSum+(sHighNext-sPrime);
TO:
22

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
13: final double sHighCur=prodHigh+prodLowSum;
TO:
21

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
14: final double sHighNext=a[len-1]*b[len-1];
TO:
21

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

Following are 4th generated patches:
Validating 103 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
7:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=1;i<len;i++){
prodHigh+=a[i]*b[i];
prodLowSum+=a[i]*b[i]-prodHigh;
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
10:prodHigh+=a[i]*b[i];

INSERT:
14: final double sHighNext=a[len-1]*b[len-1];
TO:
21

UPDATE
FROM:
22: final double prodHighCur=prodHigh[0];
TO:
15: final double sPrime=sHighCur-sHighNext;

INSERT:
17: final double result=sHighCur+sLowSum;
TO:
22

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Tested:6588 patches
Compile failed:6311 patches
Compilation rate:0.0420461445051609
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/28.java
Current actions:
INSERT:
7:double r=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

Following are 1th generated patches:
Validating 5 patches...
Current actions:
INSERT:
9:r+=a[i]*b[i];
TO:
6

Following are 2th generated patches:
Validating 69 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:r+=a[i]*b[i];
TO:
6

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 76 patches...
Current actions:
INSERT:
9:r+=a[i]*b[i];
TO:
6

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 74 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Tested:6796 patches
Compile failed:6519 patches
Compilation rate:0.04075927015891701
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/29.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 4 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 11 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
4:for(int i=0;i<a.length;i++){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 15 patches...
Current actions:
INSERT:
3:double result=0;
TO:
2

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:6800 patches
Compile failed:6523 patches
Compilation rate:0.04073529411764706
NNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/30.java
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 96 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 102 patches...
Current actions:
INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 99 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 10 final double ai=a[i];

UPDATE
FROM:
42:return result;
TO:
11:return sum;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 97 patches...
Current actions:
INSERT:
3:double sum=0;
TO:
2

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
9:sum+=a[i]*b[i];
TO:
9

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:7120 patches
Compile failed:6836 patches
Compilation rate:0.039887640449438204
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNPNNNNNNNNNNNNNNNPNNNNNNNNNPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/31.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 39result+=a[i]*b[i];

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 56 patches...
Current actions:
DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 3th generated patches:
Validating 78 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 77 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

INSERT:
11:return sum(prod);
TO:
21

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:7308 patches
Compile failed:7024 patches
Compilation rate:0.03886152162014231
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/32.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHighSum=0;
TO:
6

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 87 patches...
Current actions:
DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHighSum=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
22:return prodHighSum+prodLowSum;
TO:
21

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 84 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double prodHighSum=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 53 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:7501 patches
Compile failed:7216 patches
Compilation rate:0.037994934008798824
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/33.java
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 13 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 23 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 17 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
3:double result=0;
TO:
2

INSERT:
4:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}
TO:
2

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 16 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Tested:7505 patches
Compile failed:7219 patches
Compilation rate:0.038107928047968025
NNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/34.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
21: final double result=prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 1th generated patches:
Validating 81 patches...
Current actions:
DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 2th generated patches:
Validating 2 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 3th generated patches:
Validating 63 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
17: final double prodHigh=ai*bi;
TO:
17

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Following are 4th generated patches:
Validating 54 patches...
Current actions:
INSERT:
17: final double prodHigh=ai*bi;
TO:
17

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
21: final double result=prodLowSum;
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

INSERT:
38:}

TO:
43

INSERT:
40:}

TO:
43

INSERT:
42:}

TO:
43

Tested:7888 patches
Compile failed:7602 patches
Compilation rate:0.03625760649087221
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/35.java
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 1th generated patches:
Validating 53 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 10 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 3th generated patches:
Validating 9 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 50 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
sum+=ai*bi;
}
TO:
6

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:7976 patches
Compile failed:7690 patches
Compilation rate:0.035857572718154464
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/36.java
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

Following are 0th generated patches:
Validating 41 patches...
Current actions:
UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
14: final double bHigh=bi-(bi-SPLIT_FACTOR*bi);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 2th generated patches:
Validating 200 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

Following are 3th generated patches:
Validating 75 patches...
Current actions:
UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
11: final double aHigh=ai-(ai-SPLIT_FACTOR*ai);

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
12: final double aLow=SPLIT_FACTOR*ai-aHigh;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
15: final double bLow=SPLIT_FACTOR*bi-bHigh;

Following are 4th generated patches:
Validating 75 patches...
Tested:8559 patches
Compile failed:8259 patches
Compilation rate:0.03505082369435682

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/37.java
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 50 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 171 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
9:prod[i]=a[i]*b[i];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 85 patches...
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
7: final double[] prod=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:return FastMath.addAndCheck(prod);
TO:
21

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 4th generated patches:
Validating 97 patches...
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod[i]=a[i]*b[i];
}
TO:
7

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:8912 patches
Compile failed:8612 patches
Compilation rate:0.033662477558348294
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/38.java
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

Following are 0th generated patches:
Validating 41 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 2th generated patches:
Validating 102 patches...
Current actions:
INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

Following are 3th generated patches:
Validating 101 patches...
Current actions:
INSERT:
11: final double aHigh=SPLIT_FACTOR*ai-(SPLIT_FACTOR*ai-ai);
TO:
10

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
14: final double bHigh=SPLIT_FACTOR*bi-(SPLIT_FACTOR*bi-bi);
TO:
14

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 4th generated patches:
Validating 199 patches...
Current actions:
DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

Tested:9545 patches
Compile failed:9150 patches
Compilation rate:0.04138292299633316
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNPNPNNNNNNPNNNNNNNNPNPPNNNNNNNNNPNNPNPNNPNNNNPNPNNNNNNNNPNNNPNPNNNNNPPNNNNNPPNNNNNNPNNNNNNNNNNNNPPNNNNNNPNNPNNNNNNNNNNNNNNNNNNPNPNNPNNNPNNNNPPNNNNNNNNNNNNNNNNNNNNNNPNNPPPPNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNPNPPNNNNPNNNNNNNNNNNNNPNNNPNPNNNPNNNNNPPNNPNNNNNNNPPNNNNNPPNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPNNNNNPNNNNNNPNNNNNPPNNNNNNNNNPNNNNPNNPPNPNNNPNNNNNNNNNPNNPNNPNNNNNPPNNNNNPPNNNNNPNNNNNNNNNNNNNPPNNNNNPNNNPNNNNNNNNNNNNNNNNNNPNPNNPNNPNNNNNPNPNNNNNNNNNNNNNNNNNNNNNPNNNPPPP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/39.java
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 94 patches...
Current actions:
DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 128 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
13:prod+=a[i]*b[i+1]+a[i+1]*b[i];
TO:
28

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 4th generated patches:
Validating 91 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:9819 patches
Compile failed:9424 patches
Compilation rate:0.0402281291373867
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/40.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
 final double ai=a[i];
 final double bi=b[i];
result=hiPrecSum(result,hiPrecMul(ai,bi));
}
TO:
6

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 1th generated patches:
Validating 47 patches...
Current actions:
DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 2th generated patches:
Validating 7 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
11:result=hiPrecSum(result,hiPrecMul(ai,bi));
TO:
14

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 37result=0;

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 3th generated patches:
Validating 59 patches...
Current actions:
DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 4th generated patches:
Validating 4 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:9913 patches
Compile failed:9518 patches
Compilation rate:0.0398466659941491
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/41.java
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 55 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 59 patches...
Current actions:
INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 42 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 11 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
11:result+=ai*bi;
TO:
14

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:10031 patches
Compile failed:9636 patches
Compilation rate:0.03937792842189213
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/42.java
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
12: final double prodLow=ai-(prod-ai);

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

UPDATE
FROM:
42:return result;
TO:
17:return sum;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 29 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 109 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double sum=0;
TO:
6

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 85 patches...
Current actions:
INSERT:
7:double sum=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
13: final double prodHigh=bi-(prod-bi);

INSERT:
14: final double summand=prod+prodHigh+prodLow;
TO:
16

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

INSERT:
15:sum+=summand;
TO:
16

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:10408 patches
Compile failed:10013 patches
Compilation rate:0.037951575710991545
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/43.java
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighPrev-sPrime))+(sHighPrev-sPrime);

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 42return result;

Following are 2th generated patches:
Validating 80 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 3th generated patches:
Validating 2 patches...
Current actions:
UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24:double sLowSum=(prodHigh[1]-(sHighPrev-sPrime))+(prodHigh[0]-sPrime);

UPDATE
FROM:
29:prodHighNext=prodHigh[i+1];
TO:
27:sHighPrev=prodHigh[i]+prodHigh[i+1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 4th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
22:double sHighPrev=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23:double sPrime=sHighPrev-prodHigh[1];

UPDATE
FROM:
31:sPrime=sHighCur-prodHighNext;
TO:
28:sPrime=sHighPrev-prodHigh[i+1];

UPDATE
FROM:
32:sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
TO:
29:sLowSum+=(prodHigh[i+1]-(sHighPrev-sPrime))+(sHighPrev-sPrime);

INSERT:
31:return sHighPrev+(prodLowSum+sLowSum);
TO:
34

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

DELETE:
Original line: 42return result;

Tested:11069 patches
Compile failed:10623 patches
Compilation rate:0.04029270936850664
NNNNNNNNNPPPPPPNNNNPPNPNNNNPNNNNNNNNPPNNNNNNNPNNPPPPNNNNNNNNPNNNNNNNPPNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNPPPPPPNNNNPPPPNNNNNNNNNNNNNPPNNPPPPNNPNPPPPNNNPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/44.java
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 185 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 181 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 155 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
13: final double prodLow=prod-prodHigh;

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 135 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12: final double prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prod);
TO:
13

INSERT:
14:result+=prodHigh+prodLow;
TO:
17

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:11646 patches
Compile failed:11200 patches
Compilation rate:0.038296410784818824

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/45.java
Current actions:
INSERT:
7:double result=0;
TO:
6

INSERT:
8:double prod;
TO:
6

UPDATE
FROM:
11: final double ca=SPLIT_FACTOR*ai;
TO:
11: final double aHigh=SPLIT_FACTOR*a[i];

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
16: final double sHigh=SPLIT_FACTOR*sum;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 37result=0;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
INSERT:
10:prod=a[i]*b[i];
TO:
9

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

UPDATE
FROM:
15: final double cb=SPLIT_FACTOR*bi;
TO:
12: final double bHigh=SPLIT_FACTOR*b[i];

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
15: final double sum=result+prod;
TO:
13

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
16: final double sHigh=SPLIT_FACTOR*sum;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 142 patches...
Current actions:
INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:double prod;
TO:
6

INSERT:
10:prod=a[i]*b[i];
TO:
9

DELETE:
Original line: 14 final double bi=b[i];

INSERT:
14: final double prodLow=a[i]*b[i]-prodHigh;
TO:
13

UPDATE
FROM:
16: final double bHigh=cb-(cb-bi);
TO:
16: final double sHigh=SPLIT_FACTOR*sum;

UPDATE
FROM:
17: final double bLow=bi-bHigh;
TO:
17: final double sPrime=sum-sHigh;

INSERT:
18:result=sHigh+(prodLow-(sPrime-(sHigh-prodHigh)));
TO:
17

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 104 patches...
Tested:12257 patches
Compile failed:11811 patches
Compilation rate:0.03638737048217345

Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/46.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 187 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 95 patches...
Current actions:
DELETE:
Original line: 8double prodLowSum=0;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 3th generated patches:
Validating 96 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 147 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
7:double result=0;
TO:
6

UPDATE
FROM:
13: final double aLow=ai-aHigh;
TO:
11: final double prod=ai*bi;

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12: final double prodLow=ai-((prod-ai)+ai);
TO:
13

UPDATE
FROM:
12: final double aHigh=ca-(ca-ai);
TO:
13: final double prodHigh=prod-prodLow;

INSERT:
14:result+=prodHigh+(prodLow*b[i]);
TO:
12

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 20prodLowSum+=prodLow;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 37result=0;

DELETE:
Original line: 39result+=a[i]*b[i];

Tested:12729 patches
Compile failed:12283 patches
Compilation rate:0.03503810197187524
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/47.java
Current actions:
INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 38for(int i=0;i<len;++i){
result+=a[i]*b[i];
}

Following are 1th generated patches:
Validating 48 patches...
Current actions:
DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 5 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 5 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 67 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

INSERT:
8:for(int i=0;i<len;++i){
prod+=a[i]*b[i];
}
TO:
8

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

UPDATE
FROM:
42:return result;
TO:
11:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Tested:12828 patches
Compile failed:12382 patches
Compilation rate:0.034767695665731214
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/48.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 109 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 108 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

INSERT:
19:prodLowSum+=aLow*bLow-(((prodHighSum-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
18

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 3th generated patches:
Validating 50 patches...
Current actions:
INSERT:
7:double prodHighSum=0;
TO:
6

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHighSum+=ai*bi;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 20prodLowSum+=prodLow;

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
21: final double result=prodHighSum+(prodLowSum+prodHighSum);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:13260 patches
Compile failed:12785 patches
Compilation rate:0.03582202111613876
NNNNNNNNNNNNNNNNNNNNPPNNPNNPNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNNPNPPNNPPNPPNNNNPNNNPNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNPPPNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/49.java
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 0th generated patches:
Validating 3 patches...
Current actions:
UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 1th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 27 final int lenMinusOne=len-1;

Following are 2th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
28:for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}
TO:
27:for(int i=1;i<len-1;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 1 patches...
Tested:13267 patches
Compile failed:12787 patches
Compilation rate:0.036179995477500566
NPPPPNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/50.java
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 1th generated patches:
Validating 135 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHigh=a[0]*b[0];

INSERT:
10:prodHigh=prodHigh+a[i+1]*b[i+1];
TO:
23

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

INSERT:
12:prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
TO:
23

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 39result+=a[i]*b[i];

Following are 2th generated patches:
Validating 176 patches...
Current actions:
UPDATE
FROM:
8:double prodLowSum=0;
TO:
7:double prod=0;

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
23:double prodHighNext=prodHigh[1];
TO:
8:double prodHigh=a[0]*b[0];

INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

INSERT:
14:prod=prod+a[len-1]*b[len-1]+prodHigh;
TO:
23

UPDATE
FROM:
42:return result;
TO:
15:return prod;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 3th generated patches:
Validating 131 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
9:for(int i=0;i<len-1;i++){
prodHigh=prodHigh+a[i+1]*b[i+1];
prod=prod+a[i]*b[i]+prodHigh;
prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
}
TO:
23

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

Following are 4th generated patches:
Validating 49 patches...
Current actions:
INSERT:
12:prodHigh=SPLIT_FACTOR*prod-(SPLIT_FACTOR*prod-prodHigh);
TO:
23

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 18prodHigh[i]=ai*bi;

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

Tested:13714 patches
Compile failed:13222 patches
Compilation rate:0.0358757474114044
NNNNNNNNNNNNNNNNNNNPNNNNNNNPPPPNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/51.java
Current actions:
UPDATE
FROM:
7: final double[] prodHigh=new double[len];
TO:
3: final double[] prodHigh=new double[a.length];

DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
6:prodHigh[i]=a[i]*b[i];

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

INSERT:
12:result+=prodHigh[i];
TO:
35

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 1th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

UPDATE
FROM:
38:for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
TO:
16:for(int i=0;i<a.length;++i){
result+=a[i]*b[i];
}

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 2th generated patches:
Validating 118 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

DELETE:
Original line: 10 final double ai=a[i];

DELETE:
Original line: 11 final double ca=SPLIT_FACTOR*ai;

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 16 final double bHigh=cb-(cb-bi);

Following are 3th generated patches:
Validating 49 patches...
Current actions:
DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

Following are 4th generated patches:
Validating 2 patches...
Current actions:
DELETE:
Original line: 3 final int len=a.length;

DELETE:
Original line: 4if(len!=b.length){
throw new DimensionMismatchException(len,b.length);
}

INSERT:
5:for(int i=0;i<a.length;i++){
prodHigh[i]=a[i]*b[i];
 final double prodLow=a[i]*b[i]-prodHigh[i];
prodLowSum+=prodLow;
}
TO:
8

UPDATE
FROM:
30: final double sHighCur=sHighPrev+prodHighNext;
TO:
7: final double prodLow=a[i]*b[i]-prodHigh[i];

UPDATE
FROM:
35:double result=sHighPrev+(prodLowSum+sLowSum);
TO:
10:double result=prodHigh[0]+(prodLowSum+prodHigh[1]);

DELETE:
Original line: 10 final double ai=a[i];

INSERT:
11:for(int i=2;i<a.length;i++){
result+=prodHigh[i];
}
TO:
35

DELETE:
Original line: 12 final double aHigh=ca-(ca-ai);

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 29prodHighNext=prodHigh[i+1];

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:14046 patches
Compile failed:13554 patches
Compilation rate:0.03502776591200342
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/52.java
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

Following are 1th generated patches:
Validating 38 patches...
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 8double prodLowSum=0;

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 30 final double sHighCur=sHighPrev+prodHighNext;

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 32sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);

DELETE:
Original line: 33sHighPrev=sHighCur;

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 2th generated patches:
Validating 49 patches...
Current actions:
DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

Following are 3th generated patches:
Validating 1 patches...
Current actions:
INSERT:
7:double result=a[0]*b[0];
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

INSERT:
8:for(int i=1;i<len;++i){
result+=a[i]*b[i];
}
TO:
6

DELETE:
Original line: 9for(int i=0;i<len;i++){
 final double ai=a[i];
 final double ca=SPLIT_FACTOR*ai;
 final double aHigh=ca-(ca-ai);
 final double aLow=ai-aHigh;
 final double bi=b[i];
 final double cb=SPLIT_FACTOR*bi;
 final double bHigh=cb-(cb-bi);
 final double bLow=bi-bHigh;
prodHigh[i]=ai*bi;
 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
prodLowSum+=prodLow;
}

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 24double sHighPrev=prodHighCur+prodHighNext;

DELETE:
Original line: 25double sPrime=sHighPrev-prodHighNext;

DELETE:
Original line: 26double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

DELETE:
Original line: 35double result=sHighPrev+(prodLowSum+sLowSum);

DELETE:
Original line: 36if(Double.isNaN(result)){
result=0;
for(int i=0;i<len;++i){
result+=a[i]*b[i];
}
}

Following are 4th generated patches:
Validating 47 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

DELETE:
Original line: 8double prodLowSum=0;

DELETE:
Original line: 13 final double aLow=ai-aHigh;

DELETE:
Original line: 14 final double bi=b[i];

DELETE:
Original line: 15 final double cb=SPLIT_FACTOR*bi;

DELETE:
Original line: 17 final double bLow=bi-bHigh;

DELETE:
Original line: 19 final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

DELETE:
Original line: 31sPrime=sHighCur-prodHighNext;

DELETE:
Original line: 33sHighPrev=sHighCur;

Tested:14152 patches
Compile failed:13656 patches
Compilation rate:0.035048049745618995
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNPNNP
Current file:/data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Patch Number: /data/PLM4APR/codex_out/200_patches_starcoder_all/math_3/53.java
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

Following are 0th generated patches:
Validating 200 patches...
Current actions:
DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 1th generated patches:
Validating 68 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 33sHighPrev=sHighCur;

Following are 2th generated patches:
Validating 3 patches...
Current actions:
INSERT:
7:double prodHigh=0;
TO:
6

DELETE:
Original line: 7 final double[] prodHigh=new double[len];

UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

UPDATE
FROM:
19: final double prodLow=aLow*bLow-(((prodHigh[i]-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);
TO:
19: final double prodLow=aLow*bLow-(((prodHigh-aHigh*bHigh)-aLow*bHigh)-aHigh*bLow);

UPDATE
FROM:
24:double sHighPrev=prodHighCur+prodHighNext;
TO:
22: final double sHighPrev=prodHigh+prodHigh;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

UPDATE
FROM:
25:double sPrime=sHighPrev-prodHighNext;
TO:
23: final double sPrime=sHighPrev-prodHigh;

DELETE:
Original line: 23double prodHighNext=prodHigh[1];

UPDATE
FROM:
26:double sLowSum=(prodHighNext-(sHighPrev-sPrime))+(prodHighCur-sPrime);
TO:
24: final double sLowSum=(prodHigh-(sHighPrev-sPrime))+(prodHigh-sPrime);

DELETE:
Original line: 27 final int lenMinusOne=len-1;

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 3th generated patches:
Validating 167 patches...
Current actions:
DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Following are 4th generated patches:
Validating 1 patches...
Current actions:
UPDATE
FROM:
18:prodHigh[i]=ai*bi;
TO:
18:prodHigh+=ai*bi;

DELETE:
Original line: 22 final double prodHighCur=prodHigh[0];

DELETE:
Original line: 28for(int i=1;i<lenMinusOne;i++){
prodHighNext=prodHigh[i+1];
 final double sHighCur=sHighPrev+prodHighNext;
sPrime=sHighCur-prodHighNext;
sLowSum+=(prodHighNext-(sHighCur-sPrime))+(sHighPrev-sPrime);
sHighPrev=sHighCur;
}

Tested:14573 patches
Compile failed:14022 patches
Compilation rate:0.03780964797913951
NNNNNNNNNNNNNNNNNNNNNNNNNNPNNPPNNPNNNPPPNNNNNPPPNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNNNNNNPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNNNNPNNNNNNNNNNNNNNPNNPNNNNNPNNNPNNPPNNNNNNNNNPPPNPPNNNNNNNNNNPNNPNNNNNNNNPNNNPPNNPPPPNPPPPPNPPPPNNPNPNPNPNNNNNNPNPPNNNPPPPP
Finish : math-3 > patch : 0 | Start : Tue Apr 09 22:41:18 HKT 2024 | End : 2024.04.09 AD at 23:18:49 HKT
